(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}


// BYTES

function _Bytes_width(bytes)
{
	return bytes.byteLength;
}

var _Bytes_getHostEndianness = F2(function(le, be)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be));
	});
});


// ENCODERS

function _Bytes_encode(encoder)
{
	var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
	$elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
	return mutableBytes;
}


// SIGNED INTEGERS

var _Bytes_write_i8  = F3(function(mb, i, n) { mb.setInt8(i, n); return i + 1; });
var _Bytes_write_i16 = F4(function(mb, i, n, isLE) { mb.setInt16(i, n, isLE); return i + 2; });
var _Bytes_write_i32 = F4(function(mb, i, n, isLE) { mb.setInt32(i, n, isLE); return i + 4; });


// UNSIGNED INTEGERS

var _Bytes_write_u8  = F3(function(mb, i, n) { mb.setUint8(i, n); return i + 1 ;});
var _Bytes_write_u16 = F4(function(mb, i, n, isLE) { mb.setUint16(i, n, isLE); return i + 2; });
var _Bytes_write_u32 = F4(function(mb, i, n, isLE) { mb.setUint32(i, n, isLE); return i + 4; });


// FLOATS

var _Bytes_write_f32 = F4(function(mb, i, n, isLE) { mb.setFloat32(i, n, isLE); return i + 4; });
var _Bytes_write_f64 = F4(function(mb, i, n, isLE) { mb.setFloat64(i, n, isLE); return i + 8; });


// BYTES

var _Bytes_write_bytes = F3(function(mb, offset, bytes)
{
	for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4)
	{
		mb.setUint32(offset + i, bytes.getUint32(i));
	}
	for (; i < len; i++)
	{
		mb.setUint8(offset + i, bytes.getUint8(i));
	}
	return offset + len;
});


// STRINGS

function _Bytes_getStringWidth(string)
{
	for (var width = 0, i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		width +=
			(code < 0x80) ? 1 :
			(code < 0x800) ? 2 :
			(code < 0xD800 || 0xDBFF < code) ? 3 : (i++, 4);
	}
	return width;
}

var _Bytes_write_string = F3(function(mb, offset, string)
{
	for (var i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		offset +=
			(code < 0x80)
				? (mb.setUint8(offset, code)
				, 1
				)
				:
			(code < 0x800)
				? (mb.setUint16(offset, 0xC080 /* 0b1100000010000000 */
					| (code >>> 6 & 0x1F /* 0b00011111 */) << 8
					| code & 0x3F /* 0b00111111 */)
				, 2
				)
				:
			(code < 0xD800 || 0xDBFF < code)
				? (mb.setUint16(offset, 0xE080 /* 0b1110000010000000 */
					| (code >>> 12 & 0xF /* 0b00001111 */) << 8
					| code >>> 6 & 0x3F /* 0b00111111 */)
				, mb.setUint8(offset + 2, 0x80 /* 0b10000000 */
					| code & 0x3F /* 0b00111111 */)
				, 3
				)
				:
			(code = (code - 0xD800) * 0x400 + string.charCodeAt(++i) - 0xDC00 + 0x10000
			, mb.setUint32(offset, 0xF0808080 /* 0b11110000100000001000000010000000 */
				| (code >>> 18 & 0x7 /* 0b00000111 */) << 24
				| (code >>> 12 & 0x3F /* 0b00111111 */) << 16
				| (code >>> 6 & 0x3F /* 0b00111111 */) << 8
				| code & 0x3F /* 0b00111111 */)
			, 4
			);
	}
	return offset;
});


// DECODER

var _Bytes_decode = F2(function(decoder, bytes)
{
	try {
		return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
	} catch(e) {
		return $elm$core$Maybe$Nothing;
	}
});

var _Bytes_read_i8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getInt8(offset)); });
var _Bytes_read_i16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE)); });
var _Bytes_read_i32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE)); });
var _Bytes_read_u8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getUint8(offset)); });
var _Bytes_read_u16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE)); });
var _Bytes_read_u32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE)); });
var _Bytes_read_f32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE)); });
var _Bytes_read_f64 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE)); });

var _Bytes_read_bytes = F3(function(len, bytes, offset)
{
	return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
});

var _Bytes_read_string = F3(function(len, bytes, offset)
{
	var string = '';
	var end = offset + len;
	for (; offset < end;)
	{
		var byte = bytes.getUint8(offset++);
		string +=
			(byte < 128)
				? String.fromCharCode(byte)
				:
			((byte & 0xE0 /* 0b11100000 */) === 0xC0 /* 0b11000000 */)
				? String.fromCharCode((byte & 0x1F /* 0b00011111 */) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */)
				:
			((byte & 0xF0 /* 0b11110000 */) === 0xE0 /* 0b11100000 */)
				? String.fromCharCode(
					(byte & 0xF /* 0b00001111 */) << 12
					| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
					| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
				)
				:
				(byte =
					((byte & 0x7 /* 0b00000111 */) << 18
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 12
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
						| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
					) - 0x10000
				, String.fromCharCode(Math.floor(byte / 0x400) + 0xD800, byte % 0x400 + 0xDC00)
				);
	}
	return _Utils_Tuple2(offset, string);
});

var _Bytes_decodeFailure = F2(function() { throw 0; });



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}


// DECODER

var _File_decoder = _Json_decodePrim(function(value) {
	// NOTE: checks if `File` exists in case this is run on node
	return (typeof File !== 'undefined' && value instanceof File)
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FILE', value);
});


// METADATA

function _File_name(file) { return file.name; }
function _File_mime(file) { return file.type; }
function _File_size(file) { return file.size; }

function _File_lastModified(file)
{
	return $elm$time$Time$millisToPosix(file.lastModified);
}


// DOWNLOAD

var _File_downloadNode;

function _File_getDownloadNode()
{
	return _File_downloadNode || (_File_downloadNode = document.createElement('a'));
}

var _File_download = F3(function(name, mime, content)
{
	return _Scheduler_binding(function(callback)
	{
		var blob = new Blob([content], {type: mime});

		// for IE10+
		if (navigator.msSaveOrOpenBlob)
		{
			navigator.msSaveOrOpenBlob(blob, name);
			return;
		}

		// for HTML5
		var node = _File_getDownloadNode();
		var objectUrl = URL.createObjectURL(blob);
		node.href = objectUrl;
		node.download = name;
		_File_click(node);
		URL.revokeObjectURL(objectUrl);
	});
});

function _File_downloadUrl(href)
{
	return _Scheduler_binding(function(callback)
	{
		var node = _File_getDownloadNode();
		node.href = href;
		node.download = '';
		node.origin === location.origin || (node.target = '_blank');
		_File_click(node);
	});
}


// IE COMPATIBILITY

function _File_makeBytesSafeForInternetExplorer(bytes)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10
	// all other browsers can just run `new Blob([bytes])` directly with no problem
	//
	return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}

function _File_click(node)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11
	// all other browsers have MouseEvent and do not need this conditional stuff
	//
	if (typeof MouseEvent === 'function')
	{
		node.dispatchEvent(new MouseEvent('click'));
	}
	else
	{
		var event = document.createEvent('MouseEvents');
		event.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.body.appendChild(node);
		node.dispatchEvent(event);
		document.body.removeChild(node);
	}
}


// UPLOAD

var _File_node;

function _File_uploadOne(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			callback(_Scheduler_succeed(event.target.files[0]));
		});
		_File_click(_File_node);
	});
}

function _File_uploadOneOrMore(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.multiple = true;
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			var elmFiles = _List_fromArray(event.target.files);
			callback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));
		});
		_File_click(_File_node);
	});
}


// CONTENT

function _File_toString(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsText(blob);
		return function() { reader.abort(); };
	});
}

function _File_toBytes(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(new DataView(reader.result)));
		});
		reader.readAsArrayBuffer(blob);
		return function() { reader.abort(); };
	});
}

function _File_toUrl(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsDataURL(blob);
		return function() { reader.abort(); };
	});
}



// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;


/*
 * Copyright (c) 2010 Mozilla Corporation
 * Copyright (c) 2010 Vladimir Vukicevic
 * Copyright (c) 2013 John Mayer
 * Copyright (c) 2018 Andrey Kuzmin
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

// Vector2

var _MJS_v2 = F2(function(x, y) {
    return new Float64Array([x, y]);
});

var _MJS_v2getX = function(a) {
    return a[0];
};

var _MJS_v2getY = function(a) {
    return a[1];
};

var _MJS_v2setX = F2(function(x, a) {
    return new Float64Array([x, a[1]]);
});

var _MJS_v2setY = F2(function(y, a) {
    return new Float64Array([a[0], y]);
});

var _MJS_v2toRecord = function(a) {
    return { x: a[0], y: a[1] };
};

var _MJS_v2fromRecord = function(r) {
    return new Float64Array([r.x, r.y]);
};

var _MJS_v2add = F2(function(a, b) {
    var r = new Float64Array(2);
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    return r;
});

var _MJS_v2sub = F2(function(a, b) {
    var r = new Float64Array(2);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    return r;
});

var _MJS_v2negate = function(a) {
    var r = new Float64Array(2);
    r[0] = -a[0];
    r[1] = -a[1];
    return r;
};

var _MJS_v2direction = F2(function(a, b) {
    var r = new Float64Array(2);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    var im = 1.0 / _MJS_v2lengthLocal(r);
    r[0] = r[0] * im;
    r[1] = r[1] * im;
    return r;
});

function _MJS_v2lengthLocal(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1]);
}
var _MJS_v2length = _MJS_v2lengthLocal;

var _MJS_v2lengthSquared = function(a) {
    return a[0] * a[0] + a[1] * a[1];
};

var _MJS_v2distance = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    return Math.sqrt(dx * dx + dy * dy);
});

var _MJS_v2distanceSquared = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    return dx * dx + dy * dy;
});

var _MJS_v2normalize = function(a) {
    var r = new Float64Array(2);
    var im = 1.0 / _MJS_v2lengthLocal(a);
    r[0] = a[0] * im;
    r[1] = a[1] * im;
    return r;
};

var _MJS_v2scale = F2(function(k, a) {
    var r = new Float64Array(2);
    r[0] = a[0] * k;
    r[1] = a[1] * k;
    return r;
});

var _MJS_v2dot = F2(function(a, b) {
    return a[0] * b[0] + a[1] * b[1];
});

// Vector3

var _MJS_v3temp1Local = new Float64Array(3);
var _MJS_v3temp2Local = new Float64Array(3);
var _MJS_v3temp3Local = new Float64Array(3);

var _MJS_v3 = F3(function(x, y, z) {
    return new Float64Array([x, y, z]);
});

var _MJS_v3getX = function(a) {
    return a[0];
};

var _MJS_v3getY = function(a) {
    return a[1];
};

var _MJS_v3getZ = function(a) {
    return a[2];
};

var _MJS_v3setX = F2(function(x, a) {
    return new Float64Array([x, a[1], a[2]]);
});

var _MJS_v3setY = F2(function(y, a) {
    return new Float64Array([a[0], y, a[2]]);
});

var _MJS_v3setZ = F2(function(z, a) {
    return new Float64Array([a[0], a[1], z]);
});

var _MJS_v3toRecord = function(a) {
    return { x: a[0], y: a[1], z: a[2] };
};

var _MJS_v3fromRecord = function(r) {
    return new Float64Array([r.x, r.y, r.z]);
};

var _MJS_v3add = F2(function(a, b) {
    var r = new Float64Array(3);
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    r[2] = a[2] + b[2];
    return r;
});

function _MJS_v3subLocal(a, b, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
    return r;
}
var _MJS_v3sub = F2(_MJS_v3subLocal);

var _MJS_v3negate = function(a) {
    var r = new Float64Array(3);
    r[0] = -a[0];
    r[1] = -a[1];
    r[2] = -a[2];
    return r;
};

function _MJS_v3directionLocal(a, b, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    return _MJS_v3normalizeLocal(_MJS_v3subLocal(a, b, r), r);
}
var _MJS_v3direction = F2(_MJS_v3directionLocal);

function _MJS_v3lengthLocal(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
}
var _MJS_v3length = _MJS_v3lengthLocal;

var _MJS_v3lengthSquared = function(a) {
    return a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
};

var _MJS_v3distance = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    return Math.sqrt(dx * dx + dy * dy + dz * dz);
});

var _MJS_v3distanceSquared = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    return dx * dx + dy * dy + dz * dz;
});

function _MJS_v3normalizeLocal(a, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    var im = 1.0 / _MJS_v3lengthLocal(a);
    r[0] = a[0] * im;
    r[1] = a[1] * im;
    r[2] = a[2] * im;
    return r;
}
var _MJS_v3normalize = _MJS_v3normalizeLocal;

var _MJS_v3scale = F2(function(k, a) {
    return new Float64Array([a[0] * k, a[1] * k, a[2] * k]);
});

var _MJS_v3dotLocal = function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};
var _MJS_v3dot = F2(_MJS_v3dotLocal);

function _MJS_v3crossLocal(a, b, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    r[0] = a[1] * b[2] - a[2] * b[1];
    r[1] = a[2] * b[0] - a[0] * b[2];
    r[2] = a[0] * b[1] - a[1] * b[0];
    return r;
}
var _MJS_v3cross = F2(_MJS_v3crossLocal);

var _MJS_v3mul4x4 = F2(function(m, v) {
    var w;
    var tmp = _MJS_v3temp1Local;
    var r = new Float64Array(3);

    tmp[0] = m[3];
    tmp[1] = m[7];
    tmp[2] = m[11];
    w = _MJS_v3dotLocal(v, tmp) + m[15];
    tmp[0] = m[0];
    tmp[1] = m[4];
    tmp[2] = m[8];
    r[0] = (_MJS_v3dotLocal(v, tmp) + m[12]) / w;
    tmp[0] = m[1];
    tmp[1] = m[5];
    tmp[2] = m[9];
    r[1] = (_MJS_v3dotLocal(v, tmp) + m[13]) / w;
    tmp[0] = m[2];
    tmp[1] = m[6];
    tmp[2] = m[10];
    r[2] = (_MJS_v3dotLocal(v, tmp) + m[14]) / w;
    return r;
});

// Vector4

var _MJS_v4 = F4(function(x, y, z, w) {
    return new Float64Array([x, y, z, w]);
});

var _MJS_v4getX = function(a) {
    return a[0];
};

var _MJS_v4getY = function(a) {
    return a[1];
};

var _MJS_v4getZ = function(a) {
    return a[2];
};

var _MJS_v4getW = function(a) {
    return a[3];
};

var _MJS_v4setX = F2(function(x, a) {
    return new Float64Array([x, a[1], a[2], a[3]]);
});

var _MJS_v4setY = F2(function(y, a) {
    return new Float64Array([a[0], y, a[2], a[3]]);
});

var _MJS_v4setZ = F2(function(z, a) {
    return new Float64Array([a[0], a[1], z, a[3]]);
});

var _MJS_v4setW = F2(function(w, a) {
    return new Float64Array([a[0], a[1], a[2], w]);
});

var _MJS_v4toRecord = function(a) {
    return { x: a[0], y: a[1], z: a[2], w: a[3] };
};

var _MJS_v4fromRecord = function(r) {
    return new Float64Array([r.x, r.y, r.z, r.w]);
};

var _MJS_v4add = F2(function(a, b) {
    var r = new Float64Array(4);
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    r[2] = a[2] + b[2];
    r[3] = a[3] + b[3];
    return r;
});

var _MJS_v4sub = F2(function(a, b) {
    var r = new Float64Array(4);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
    r[3] = a[3] - b[3];
    return r;
});

var _MJS_v4negate = function(a) {
    var r = new Float64Array(4);
    r[0] = -a[0];
    r[1] = -a[1];
    r[2] = -a[2];
    r[3] = -a[3];
    return r;
};

var _MJS_v4direction = F2(function(a, b) {
    var r = new Float64Array(4);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
    r[3] = a[3] - b[3];
    var im = 1.0 / _MJS_v4lengthLocal(r);
    r[0] = r[0] * im;
    r[1] = r[1] * im;
    r[2] = r[2] * im;
    r[3] = r[3] * im;
    return r;
});

function _MJS_v4lengthLocal(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);
}
var _MJS_v4length = _MJS_v4lengthLocal;

var _MJS_v4lengthSquared = function(a) {
    return a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3];
};

var _MJS_v4distance = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    var dw = a[3] - b[3];
    return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);
});

var _MJS_v4distanceSquared = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    var dw = a[3] - b[3];
    return dx * dx + dy * dy + dz * dz + dw * dw;
});

var _MJS_v4normalize = function(a) {
    var r = new Float64Array(4);
    var im = 1.0 / _MJS_v4lengthLocal(a);
    r[0] = a[0] * im;
    r[1] = a[1] * im;
    r[2] = a[2] * im;
    r[3] = a[3] * im;
    return r;
};

var _MJS_v4scale = F2(function(k, a) {
    var r = new Float64Array(4);
    r[0] = a[0] * k;
    r[1] = a[1] * k;
    r[2] = a[2] * k;
    r[3] = a[3] * k;
    return r;
});

var _MJS_v4dot = F2(function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
});

// Matrix4

var _MJS_m4x4temp1Local = new Float64Array(16);
var _MJS_m4x4temp2Local = new Float64Array(16);

var _MJS_m4x4identity = new Float64Array([
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0
]);

var _MJS_m4x4fromRecord = function(r) {
    var m = new Float64Array(16);
    m[0] = r.m11;
    m[1] = r.m21;
    m[2] = r.m31;
    m[3] = r.m41;
    m[4] = r.m12;
    m[5] = r.m22;
    m[6] = r.m32;
    m[7] = r.m42;
    m[8] = r.m13;
    m[9] = r.m23;
    m[10] = r.m33;
    m[11] = r.m43;
    m[12] = r.m14;
    m[13] = r.m24;
    m[14] = r.m34;
    m[15] = r.m44;
    return m;
};

var _MJS_m4x4toRecord = function(m) {
    return {
        m11: m[0], m21: m[1], m31: m[2], m41: m[3],
        m12: m[4], m22: m[5], m32: m[6], m42: m[7],
        m13: m[8], m23: m[9], m33: m[10], m43: m[11],
        m14: m[12], m24: m[13], m34: m[14], m44: m[15]
    };
};

var _MJS_m4x4inverse = function(m) {
    var r = new Float64Array(16);

    r[0] = m[5] * m[10] * m[15] - m[5] * m[11] * m[14] - m[9] * m[6] * m[15] +
        m[9] * m[7] * m[14] + m[13] * m[6] * m[11] - m[13] * m[7] * m[10];
    r[4] = -m[4] * m[10] * m[15] + m[4] * m[11] * m[14] + m[8] * m[6] * m[15] -
        m[8] * m[7] * m[14] - m[12] * m[6] * m[11] + m[12] * m[7] * m[10];
    r[8] = m[4] * m[9] * m[15] - m[4] * m[11] * m[13] - m[8] * m[5] * m[15] +
        m[8] * m[7] * m[13] + m[12] * m[5] * m[11] - m[12] * m[7] * m[9];
    r[12] = -m[4] * m[9] * m[14] + m[4] * m[10] * m[13] + m[8] * m[5] * m[14] -
        m[8] * m[6] * m[13] - m[12] * m[5] * m[10] + m[12] * m[6] * m[9];
    r[1] = -m[1] * m[10] * m[15] + m[1] * m[11] * m[14] + m[9] * m[2] * m[15] -
        m[9] * m[3] * m[14] - m[13] * m[2] * m[11] + m[13] * m[3] * m[10];
    r[5] = m[0] * m[10] * m[15] - m[0] * m[11] * m[14] - m[8] * m[2] * m[15] +
        m[8] * m[3] * m[14] + m[12] * m[2] * m[11] - m[12] * m[3] * m[10];
    r[9] = -m[0] * m[9] * m[15] + m[0] * m[11] * m[13] + m[8] * m[1] * m[15] -
        m[8] * m[3] * m[13] - m[12] * m[1] * m[11] + m[12] * m[3] * m[9];
    r[13] = m[0] * m[9] * m[14] - m[0] * m[10] * m[13] - m[8] * m[1] * m[14] +
        m[8] * m[2] * m[13] + m[12] * m[1] * m[10] - m[12] * m[2] * m[9];
    r[2] = m[1] * m[6] * m[15] - m[1] * m[7] * m[14] - m[5] * m[2] * m[15] +
        m[5] * m[3] * m[14] + m[13] * m[2] * m[7] - m[13] * m[3] * m[6];
    r[6] = -m[0] * m[6] * m[15] + m[0] * m[7] * m[14] + m[4] * m[2] * m[15] -
        m[4] * m[3] * m[14] - m[12] * m[2] * m[7] + m[12] * m[3] * m[6];
    r[10] = m[0] * m[5] * m[15] - m[0] * m[7] * m[13] - m[4] * m[1] * m[15] +
        m[4] * m[3] * m[13] + m[12] * m[1] * m[7] - m[12] * m[3] * m[5];
    r[14] = -m[0] * m[5] * m[14] + m[0] * m[6] * m[13] + m[4] * m[1] * m[14] -
        m[4] * m[2] * m[13] - m[12] * m[1] * m[6] + m[12] * m[2] * m[5];
    r[3] = -m[1] * m[6] * m[11] + m[1] * m[7] * m[10] + m[5] * m[2] * m[11] -
        m[5] * m[3] * m[10] - m[9] * m[2] * m[7] + m[9] * m[3] * m[6];
    r[7] = m[0] * m[6] * m[11] - m[0] * m[7] * m[10] - m[4] * m[2] * m[11] +
        m[4] * m[3] * m[10] + m[8] * m[2] * m[7] - m[8] * m[3] * m[6];
    r[11] = -m[0] * m[5] * m[11] + m[0] * m[7] * m[9] + m[4] * m[1] * m[11] -
        m[4] * m[3] * m[9] - m[8] * m[1] * m[7] + m[8] * m[3] * m[5];
    r[15] = m[0] * m[5] * m[10] - m[0] * m[6] * m[9] - m[4] * m[1] * m[10] +
        m[4] * m[2] * m[9] + m[8] * m[1] * m[6] - m[8] * m[2] * m[5];

    var det = m[0] * r[0] + m[1] * r[4] + m[2] * r[8] + m[3] * r[12];

    if (det === 0) {
        return $elm$core$Maybe$Nothing;
    }

    det = 1.0 / det;

    for (var i = 0; i < 16; i = i + 1) {
        r[i] = r[i] * det;
    }

    return $elm$core$Maybe$Just(r);
};

var _MJS_m4x4inverseOrthonormal = function(m) {
    var r = _MJS_m4x4transposeLocal(m);
    var t = [m[12], m[13], m[14]];
    r[3] = r[7] = r[11] = 0;
    r[12] = -_MJS_v3dotLocal([r[0], r[4], r[8]], t);
    r[13] = -_MJS_v3dotLocal([r[1], r[5], r[9]], t);
    r[14] = -_MJS_v3dotLocal([r[2], r[6], r[10]], t);
    return r;
};

function _MJS_m4x4makeFrustumLocal(left, right, bottom, top, znear, zfar) {
    var r = new Float64Array(16);

    r[0] = 2 * znear / (right - left);
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = 2 * znear / (top - bottom);
    r[6] = 0;
    r[7] = 0;
    r[8] = (right + left) / (right - left);
    r[9] = (top + bottom) / (top - bottom);
    r[10] = -(zfar + znear) / (zfar - znear);
    r[11] = -1;
    r[12] = 0;
    r[13] = 0;
    r[14] = -2 * zfar * znear / (zfar - znear);
    r[15] = 0;

    return r;
}
var _MJS_m4x4makeFrustum = F6(_MJS_m4x4makeFrustumLocal);

var _MJS_m4x4makePerspective = F4(function(fovy, aspect, znear, zfar) {
    var ymax = znear * Math.tan(fovy * Math.PI / 360.0);
    var ymin = -ymax;
    var xmin = ymin * aspect;
    var xmax = ymax * aspect;

    return _MJS_m4x4makeFrustumLocal(xmin, xmax, ymin, ymax, znear, zfar);
});

function _MJS_m4x4makeOrthoLocal(left, right, bottom, top, znear, zfar) {
    var r = new Float64Array(16);

    r[0] = 2 / (right - left);
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = 2 / (top - bottom);
    r[6] = 0;
    r[7] = 0;
    r[8] = 0;
    r[9] = 0;
    r[10] = -2 / (zfar - znear);
    r[11] = 0;
    r[12] = -(right + left) / (right - left);
    r[13] = -(top + bottom) / (top - bottom);
    r[14] = -(zfar + znear) / (zfar - znear);
    r[15] = 1;

    return r;
}
var _MJS_m4x4makeOrtho = F6(_MJS_m4x4makeOrthoLocal);

var _MJS_m4x4makeOrtho2D = F4(function(left, right, bottom, top) {
    return _MJS_m4x4makeOrthoLocal(left, right, bottom, top, -1, 1);
});

function _MJS_m4x4mulLocal(a, b) {
    var r = new Float64Array(16);
    var a11 = a[0];
    var a21 = a[1];
    var a31 = a[2];
    var a41 = a[3];
    var a12 = a[4];
    var a22 = a[5];
    var a32 = a[6];
    var a42 = a[7];
    var a13 = a[8];
    var a23 = a[9];
    var a33 = a[10];
    var a43 = a[11];
    var a14 = a[12];
    var a24 = a[13];
    var a34 = a[14];
    var a44 = a[15];
    var b11 = b[0];
    var b21 = b[1];
    var b31 = b[2];
    var b41 = b[3];
    var b12 = b[4];
    var b22 = b[5];
    var b32 = b[6];
    var b42 = b[7];
    var b13 = b[8];
    var b23 = b[9];
    var b33 = b[10];
    var b43 = b[11];
    var b14 = b[12];
    var b24 = b[13];
    var b34 = b[14];
    var b44 = b[15];

    r[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    r[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    r[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    r[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    r[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    r[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    r[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    r[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    r[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    r[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    r[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    r[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    r[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    r[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    r[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    r[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

    return r;
}
var _MJS_m4x4mul = F2(_MJS_m4x4mulLocal);

var _MJS_m4x4mulAffine = F2(function(a, b) {
    var r = new Float64Array(16);
    var a11 = a[0];
    var a21 = a[1];
    var a31 = a[2];
    var a12 = a[4];
    var a22 = a[5];
    var a32 = a[6];
    var a13 = a[8];
    var a23 = a[9];
    var a33 = a[10];
    var a14 = a[12];
    var a24 = a[13];
    var a34 = a[14];

    var b11 = b[0];
    var b21 = b[1];
    var b31 = b[2];
    var b12 = b[4];
    var b22 = b[5];
    var b32 = b[6];
    var b13 = b[8];
    var b23 = b[9];
    var b33 = b[10];
    var b14 = b[12];
    var b24 = b[13];
    var b34 = b[14];

    r[0] = a11 * b11 + a12 * b21 + a13 * b31;
    r[1] = a21 * b11 + a22 * b21 + a23 * b31;
    r[2] = a31 * b11 + a32 * b21 + a33 * b31;
    r[3] = 0;
    r[4] = a11 * b12 + a12 * b22 + a13 * b32;
    r[5] = a21 * b12 + a22 * b22 + a23 * b32;
    r[6] = a31 * b12 + a32 * b22 + a33 * b32;
    r[7] = 0;
    r[8] = a11 * b13 + a12 * b23 + a13 * b33;
    r[9] = a21 * b13 + a22 * b23 + a23 * b33;
    r[10] = a31 * b13 + a32 * b23 + a33 * b33;
    r[11] = 0;
    r[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14;
    r[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24;
    r[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34;
    r[15] = 1;

    return r;
});

var _MJS_m4x4makeRotate = F2(function(angle, axis) {
    var r = new Float64Array(16);
    axis = _MJS_v3normalizeLocal(axis, _MJS_v3temp1Local);
    var x = axis[0];
    var y = axis[1];
    var z = axis[2];
    var c = Math.cos(angle);
    var c1 = 1 - c;
    var s = Math.sin(angle);

    r[0] = x * x * c1 + c;
    r[1] = y * x * c1 + z * s;
    r[2] = z * x * c1 - y * s;
    r[3] = 0;
    r[4] = x * y * c1 - z * s;
    r[5] = y * y * c1 + c;
    r[6] = y * z * c1 + x * s;
    r[7] = 0;
    r[8] = x * z * c1 + y * s;
    r[9] = y * z * c1 - x * s;
    r[10] = z * z * c1 + c;
    r[11] = 0;
    r[12] = 0;
    r[13] = 0;
    r[14] = 0;
    r[15] = 1;

    return r;
});

var _MJS_m4x4rotate = F3(function(angle, axis, m) {
    var r = new Float64Array(16);
    var im = 1.0 / _MJS_v3lengthLocal(axis);
    var x = axis[0] * im;
    var y = axis[1] * im;
    var z = axis[2] * im;
    var c = Math.cos(angle);
    var c1 = 1 - c;
    var s = Math.sin(angle);
    var xs = x * s;
    var ys = y * s;
    var zs = z * s;
    var xyc1 = x * y * c1;
    var xzc1 = x * z * c1;
    var yzc1 = y * z * c1;
    var t11 = x * x * c1 + c;
    var t21 = xyc1 + zs;
    var t31 = xzc1 - ys;
    var t12 = xyc1 - zs;
    var t22 = y * y * c1 + c;
    var t32 = yzc1 + xs;
    var t13 = xzc1 + ys;
    var t23 = yzc1 - xs;
    var t33 = z * z * c1 + c;
    var m11 = m[0], m21 = m[1], m31 = m[2], m41 = m[3];
    var m12 = m[4], m22 = m[5], m32 = m[6], m42 = m[7];
    var m13 = m[8], m23 = m[9], m33 = m[10], m43 = m[11];
    var m14 = m[12], m24 = m[13], m34 = m[14], m44 = m[15];

    r[0] = m11 * t11 + m12 * t21 + m13 * t31;
    r[1] = m21 * t11 + m22 * t21 + m23 * t31;
    r[2] = m31 * t11 + m32 * t21 + m33 * t31;
    r[3] = m41 * t11 + m42 * t21 + m43 * t31;
    r[4] = m11 * t12 + m12 * t22 + m13 * t32;
    r[5] = m21 * t12 + m22 * t22 + m23 * t32;
    r[6] = m31 * t12 + m32 * t22 + m33 * t32;
    r[7] = m41 * t12 + m42 * t22 + m43 * t32;
    r[8] = m11 * t13 + m12 * t23 + m13 * t33;
    r[9] = m21 * t13 + m22 * t23 + m23 * t33;
    r[10] = m31 * t13 + m32 * t23 + m33 * t33;
    r[11] = m41 * t13 + m42 * t23 + m43 * t33;
    r[12] = m14,
    r[13] = m24;
    r[14] = m34;
    r[15] = m44;

    return r;
});

function _MJS_m4x4makeScale3Local(x, y, z) {
    var r = new Float64Array(16);

    r[0] = x;
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = y;
    r[6] = 0;
    r[7] = 0;
    r[8] = 0;
    r[9] = 0;
    r[10] = z;
    r[11] = 0;
    r[12] = 0;
    r[13] = 0;
    r[14] = 0;
    r[15] = 1;

    return r;
}
var _MJS_m4x4makeScale3 = F3(_MJS_m4x4makeScale3Local);

var _MJS_m4x4makeScale = function(v) {
    return _MJS_m4x4makeScale3Local(v[0], v[1], v[2]);
};

var _MJS_m4x4scale3 = F4(function(x, y, z, m) {
    var r = new Float64Array(16);

    r[0] = m[0] * x;
    r[1] = m[1] * x;
    r[2] = m[2] * x;
    r[3] = m[3] * x;
    r[4] = m[4] * y;
    r[5] = m[5] * y;
    r[6] = m[6] * y;
    r[7] = m[7] * y;
    r[8] = m[8] * z;
    r[9] = m[9] * z;
    r[10] = m[10] * z;
    r[11] = m[11] * z;
    r[12] = m[12];
    r[13] = m[13];
    r[14] = m[14];
    r[15] = m[15];

    return r;
});

var _MJS_m4x4scale = F2(function(v, m) {
    var r = new Float64Array(16);
    var x = v[0];
    var y = v[1];
    var z = v[2];

    r[0] = m[0] * x;
    r[1] = m[1] * x;
    r[2] = m[2] * x;
    r[3] = m[3] * x;
    r[4] = m[4] * y;
    r[5] = m[5] * y;
    r[6] = m[6] * y;
    r[7] = m[7] * y;
    r[8] = m[8] * z;
    r[9] = m[9] * z;
    r[10] = m[10] * z;
    r[11] = m[11] * z;
    r[12] = m[12];
    r[13] = m[13];
    r[14] = m[14];
    r[15] = m[15];

    return r;
});

function _MJS_m4x4makeTranslate3Local(x, y, z) {
    var r = new Float64Array(16);

    r[0] = 1;
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = 1;
    r[6] = 0;
    r[7] = 0;
    r[8] = 0;
    r[9] = 0;
    r[10] = 1;
    r[11] = 0;
    r[12] = x;
    r[13] = y;
    r[14] = z;
    r[15] = 1;

    return r;
}
var _MJS_m4x4makeTranslate3 = F3(_MJS_m4x4makeTranslate3Local);

var _MJS_m4x4makeTranslate = function(v) {
    return _MJS_m4x4makeTranslate3Local(v[0], v[1], v[2]);
};

var _MJS_m4x4translate3 = F4(function(x, y, z, m) {
    var r = new Float64Array(16);
    var m11 = m[0];
    var m21 = m[1];
    var m31 = m[2];
    var m41 = m[3];
    var m12 = m[4];
    var m22 = m[5];
    var m32 = m[6];
    var m42 = m[7];
    var m13 = m[8];
    var m23 = m[9];
    var m33 = m[10];
    var m43 = m[11];

    r[0] = m11;
    r[1] = m21;
    r[2] = m31;
    r[3] = m41;
    r[4] = m12;
    r[5] = m22;
    r[6] = m32;
    r[7] = m42;
    r[8] = m13;
    r[9] = m23;
    r[10] = m33;
    r[11] = m43;
    r[12] = m11 * x + m12 * y + m13 * z + m[12];
    r[13] = m21 * x + m22 * y + m23 * z + m[13];
    r[14] = m31 * x + m32 * y + m33 * z + m[14];
    r[15] = m41 * x + m42 * y + m43 * z + m[15];

    return r;
});

var _MJS_m4x4translate = F2(function(v, m) {
    var r = new Float64Array(16);
    var x = v[0];
    var y = v[1];
    var z = v[2];
    var m11 = m[0];
    var m21 = m[1];
    var m31 = m[2];
    var m41 = m[3];
    var m12 = m[4];
    var m22 = m[5];
    var m32 = m[6];
    var m42 = m[7];
    var m13 = m[8];
    var m23 = m[9];
    var m33 = m[10];
    var m43 = m[11];

    r[0] = m11;
    r[1] = m21;
    r[2] = m31;
    r[3] = m41;
    r[4] = m12;
    r[5] = m22;
    r[6] = m32;
    r[7] = m42;
    r[8] = m13;
    r[9] = m23;
    r[10] = m33;
    r[11] = m43;
    r[12] = m11 * x + m12 * y + m13 * z + m[12];
    r[13] = m21 * x + m22 * y + m23 * z + m[13];
    r[14] = m31 * x + m32 * y + m33 * z + m[14];
    r[15] = m41 * x + m42 * y + m43 * z + m[15];

    return r;
});

var _MJS_m4x4makeLookAt = F3(function(eye, center, up) {
    var z = _MJS_v3directionLocal(eye, center, _MJS_v3temp1Local);
    var x = _MJS_v3normalizeLocal(_MJS_v3crossLocal(up, z, _MJS_v3temp2Local), _MJS_v3temp2Local);
    var y = _MJS_v3normalizeLocal(_MJS_v3crossLocal(z, x, _MJS_v3temp3Local), _MJS_v3temp3Local);
    var tm1 = _MJS_m4x4temp1Local;
    var tm2 = _MJS_m4x4temp2Local;

    tm1[0] = x[0];
    tm1[1] = y[0];
    tm1[2] = z[0];
    tm1[3] = 0;
    tm1[4] = x[1];
    tm1[5] = y[1];
    tm1[6] = z[1];
    tm1[7] = 0;
    tm1[8] = x[2];
    tm1[9] = y[2];
    tm1[10] = z[2];
    tm1[11] = 0;
    tm1[12] = 0;
    tm1[13] = 0;
    tm1[14] = 0;
    tm1[15] = 1;

    tm2[0] = 1; tm2[1] = 0; tm2[2] = 0; tm2[3] = 0;
    tm2[4] = 0; tm2[5] = 1; tm2[6] = 0; tm2[7] = 0;
    tm2[8] = 0; tm2[9] = 0; tm2[10] = 1; tm2[11] = 0;
    tm2[12] = -eye[0]; tm2[13] = -eye[1]; tm2[14] = -eye[2]; tm2[15] = 1;

    return _MJS_m4x4mulLocal(tm1, tm2);
});


function _MJS_m4x4transposeLocal(m) {
    var r = new Float64Array(16);

    r[0] = m[0]; r[1] = m[4]; r[2] = m[8]; r[3] = m[12];
    r[4] = m[1]; r[5] = m[5]; r[6] = m[9]; r[7] = m[13];
    r[8] = m[2]; r[9] = m[6]; r[10] = m[10]; r[11] = m[14];
    r[12] = m[3]; r[13] = m[7]; r[14] = m[11]; r[15] = m[15];

    return r;
}
var _MJS_m4x4transpose = _MJS_m4x4transposeLocal;

var _MJS_m4x4makeBasis = F3(function(vx, vy, vz) {
    var r = new Float64Array(16);

    r[0] = vx[0];
    r[1] = vx[1];
    r[2] = vx[2];
    r[3] = 0;
    r[4] = vy[0];
    r[5] = vy[1];
    r[6] = vy[2];
    r[7] = 0;
    r[8] = vz[0];
    r[9] = vz[1];
    r[10] = vz[2];
    r[11] = 0;
    r[12] = 0;
    r[13] = 0;
    r[14] = 0;
    r[15] = 1;

    return r;
});


var _WebGL_guid = 0;

function _WebGL_listEach(fn, list) {
  for (; list.b; list = list.b) {
    fn(list.a);
  }
}

function _WebGL_listLength(list) {
  var length = 0;
  for (; list.b; list = list.b) {
    length++;
  }
  return length;
}

var _WebGL_rAF = typeof requestAnimationFrame !== 'undefined' ?
  requestAnimationFrame :
  function (cb) { setTimeout(cb, 1000 / 60); };

// eslint-disable-next-line no-unused-vars
var _WebGL_entity = F5(function (settings, vert, frag, mesh, uniforms) {
  return {
    $: 0,
    a: settings,
    b: vert,
    c: frag,
    d: mesh,
    e: uniforms
  };
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableBlend = F2(function (cache, setting) {
  var blend = cache.blend;
  blend.toggle = cache.toggle;

  if (!blend.enabled) {
    cache.gl.enable(cache.gl.BLEND);
    blend.enabled = true;
  }

  // a   b   c   d   e   f   g h i j
  // eq1 f11 f12 eq2 f21 f22 r g b a
  if (blend.a !== setting.a || blend.d !== setting.d) {
    cache.gl.blendEquationSeparate(setting.a, setting.d);
    blend.a = setting.a;
    blend.d = setting.d;
  }
  if (blend.b !== setting.b || blend.c !== setting.c || blend.e !== setting.e || blend.f !== setting.f) {
    cache.gl.blendFuncSeparate(setting.b, setting.c, setting.e, setting.f);
    blend.b = setting.b;
    blend.c = setting.c;
    blend.e = setting.e;
    blend.f = setting.f;
  }
  if (blend.g !== setting.g || blend.h !== setting.h || blend.i !== setting.i || blend.j !== setting.j) {
    cache.gl.blendColor(setting.g, setting.h, setting.i, setting.j);
    blend.g = setting.g;
    blend.h = setting.h;
    blend.i = setting.i;
    blend.j = setting.j;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableDepthTest = F2(function (cache, setting) {
  var depthTest = cache.depthTest;
  depthTest.toggle = cache.toggle;

  if (!depthTest.enabled) {
    cache.gl.enable(cache.gl.DEPTH_TEST);
    depthTest.enabled = true;
  }

  // a    b    c    d
  // func mask near far
  if (depthTest.a !== setting.a) {
    cache.gl.depthFunc(setting.a);
    depthTest.a = setting.a;
  }
  if (depthTest.b !== setting.b) {
    cache.gl.depthMask(setting.b);
    depthTest.b = setting.b;
  }
  if (depthTest.c !== setting.c || depthTest.d !== setting.d) {
    cache.gl.depthRange(setting.c, setting.d);
    depthTest.c = setting.c;
    depthTest.d = setting.d;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableStencilTest = F2(function (cache, setting) {
  var stencilTest = cache.stencilTest;
  stencilTest.toggle = cache.toggle;

  if (!stencilTest.enabled) {
    cache.gl.enable(cache.gl.STENCIL_TEST);
    stencilTest.enabled = true;
  }

  // a   b    c         d     e     f      g      h     i     j      k
  // ref mask writeMask test1 fail1 zfail1 zpass1 test2 fail2 zfail2 zpass2
  if (stencilTest.d !== setting.d || stencilTest.a !== setting.a || stencilTest.b !== setting.b) {
    cache.gl.stencilFuncSeparate(cache.gl.FRONT, setting.d, setting.a, setting.b);
    stencilTest.d = setting.d;
    // a and b are set in the cache.gl.BACK diffing because they should be the same
  }
  if (stencilTest.e !== setting.e || stencilTest.f !== setting.f || stencilTest.g !== setting.g) {
    cache.gl.stencilOpSeparate(cache.gl.FRONT, setting.e, setting.f, setting.g);
    stencilTest.e = setting.e;
    stencilTest.f = setting.f;
    stencilTest.g = setting.g;
  }
  if (stencilTest.c !== setting.c) {
    cache.gl.stencilMask(setting.c);
    stencilTest.c = setting.c;
  }
  if (stencilTest.h !== setting.h || stencilTest.a !== setting.a || stencilTest.b !== setting.b) {
    cache.gl.stencilFuncSeparate(cache.gl.BACK, setting.h, setting.a, setting.b);
    stencilTest.h = setting.h;
    stencilTest.a = setting.a;
    stencilTest.b = setting.b;
  }
  if (stencilTest.i !== setting.i || stencilTest.j !== setting.j || stencilTest.k !== setting.k) {
    cache.gl.stencilOpSeparate(cache.gl.BACK, setting.i, setting.j, setting.k);
    stencilTest.i = setting.i;
    stencilTest.j = setting.j;
    stencilTest.k = setting.k;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableScissor = F2(function (cache, setting) {
  var scissor = cache.scissor;
  scissor.toggle = cache.toggle;

  if (!scissor.enabled) {
    cache.gl.enable(cache.gl.SCISSOR_TEST);
    scissor.enabled = true;
  }

  if (scissor.a !== setting.a || scissor.b !== setting.b || scissor.c !== setting.c || scissor.d !== setting.d) {
    cache.gl.scissor(setting.a, setting.b, setting.c, setting.d);
    scissor.a = setting.a;
    scissor.b = setting.b;
    scissor.c = setting.c;
    scissor.d = setting.d;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableColorMask = F2(function (cache, setting) {
  var colorMask = cache.colorMask;
  colorMask.toggle = cache.toggle;
  colorMask.enabled = true;

  if (colorMask.a !== setting.a || colorMask.b !== setting.b || colorMask.c !== setting.c || colorMask.d !== setting.d) {
    cache.gl.colorMask(setting.a, setting.b, setting.c, setting.d);
    colorMask.a = setting.a;
    colorMask.b = setting.b;
    colorMask.c = setting.c;
    colorMask.d = setting.d;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableCullFace = F2(function (cache, setting) {
  var cullFace = cache.cullFace;
  cullFace.toggle = cache.toggle;

  if (!cullFace.enabled) {
    cache.gl.enable(cache.gl.CULL_FACE);
    cullFace.enabled = true;
  }

  if (cullFace.a !== setting.a) {
    cache.gl.cullFace(setting.a);
    cullFace.a = setting.a;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enablePolygonOffset = F2(function (cache, setting) {
  var polygonOffset = cache.polygonOffset;
  polygonOffset.toggle = cache.toggle;

  if (!polygonOffset.enabled) {
    cache.gl.enable(cache.gl.POLYGON_OFFSET_FILL);
    polygonOffset.enabled = true;
  }

  if (polygonOffset.a !== setting.a || polygonOffset.b !== setting.b) {
    cache.gl.polygonOffset(setting.a, setting.b);
    polygonOffset.a = setting.a;
    polygonOffset.b = setting.b;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableSampleCoverage = F2(function (cache, setting) {
  var sampleCoverage = cache.sampleCoverage;
  sampleCoverage.toggle = cache.toggle;

  if (!sampleCoverage.enabled) {
    cache.gl.enable(cache.gl.SAMPLE_COVERAGE);
    sampleCoverage.enabled = true;
  }

  if (sampleCoverage.a !== setting.a || sampleCoverage.b !== setting.b) {
    cache.gl.sampleCoverage(setting.a, setting.b);
    sampleCoverage.a = setting.a;
    sampleCoverage.b = setting.b;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableSampleAlphaToCoverage = function (cache) {
  var sampleAlphaToCoverage = cache.sampleAlphaToCoverage;
  sampleAlphaToCoverage.toggle = cache.toggle;

  if (!sampleAlphaToCoverage.enabled) {
    cache.gl.enable(cache.gl.SAMPLE_ALPHA_TO_COVERAGE);
    sampleAlphaToCoverage.enabled = true;
  }
};

var _WebGL_disableBlend = function (cache) {
  if (cache.blend.enabled) {
    cache.gl.disable(cache.gl.BLEND);
    cache.blend.enabled = false;
  }
};

var _WebGL_disableDepthTest = function (cache) {
  if (cache.depthTest.enabled) {
    cache.gl.disable(cache.gl.DEPTH_TEST);
    cache.depthTest.enabled = false;
  }
};

var _WebGL_disableStencilTest = function (cache) {
  if (cache.stencilTest.enabled) {
    cache.gl.disable(cache.gl.STENCIL_TEST);
    cache.stencilTest.enabled = false;
  }
};

var _WebGL_disableScissor = function (cache) {
  if (cache.scissor.enabled) {
    cache.gl.disable(cache.gl.SCISSOR_TEST);
    cache.scissor.enabled = false;
  }
};

var _WebGL_disableColorMask = function (cache) {
  var colorMask = cache.colorMask;
  if (!colorMask.a || !colorMask.b || !colorMask.c || !colorMask.d) {
    cache.gl.colorMask(true, true, true, true);
    colorMask.a = true;
    colorMask.b = true;
    colorMask.c = true;
    colorMask.d = true;
  }
};

var _WebGL_disableCullFace = function (cache) {
  cache.gl.disable(cache.gl.CULL_FACE);
};

var _WebGL_disablePolygonOffset = function (cache) {
  cache.gl.disable(cache.gl.POLYGON_OFFSET_FILL);
};

var _WebGL_disableSampleCoverage = function (cache) {
  cache.gl.disable(cache.gl.SAMPLE_COVERAGE);
};

var _WebGL_disableSampleAlphaToCoverage = function (cache) {
  cache.gl.disable(cache.gl.SAMPLE_ALPHA_TO_COVERAGE);
};

var _WebGL_settings = ['blend', 'depthTest', 'stencilTest', 'scissor', 'colorMask', 'cullFace', 'polygonOffset', 'sampleCoverage', 'sampleAlphaToCoverage'];
var _WebGL_disableFunctions = [_WebGL_disableBlend, _WebGL_disableDepthTest, _WebGL_disableStencilTest, _WebGL_disableScissor, _WebGL_disableColorMask, _WebGL_disableCullFace, _WebGL_disablePolygonOffset, _WebGL_disableSampleCoverage, _WebGL_disableSampleAlphaToCoverage];

function _WebGL_doCompile(gl, src, type) {
  var shader = gl.createShader(type);
  // Enable OES_standard_derivatives extension
  gl.shaderSource(shader, '#extension GL_OES_standard_derivatives : enable\n' + src);
  gl.compileShader(shader);
  return shader;
}

function _WebGL_doLink(gl, vshader, fshader) {
  var program = gl.createProgram();

  gl.attachShader(program, vshader);
  gl.attachShader(program, fshader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    throw ('Link failed: ' + gl.getProgramInfoLog(program) +
      '\nvs info-log: ' + gl.getShaderInfoLog(vshader) +
      '\nfs info-log: ' + gl.getShaderInfoLog(fshader));
  }

  return program;
}

function _WebGL_getAttributeInfo(gl, type) {
  switch (type) {
    case gl.FLOAT:
      return { size: 1, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_VEC2:
      return { size: 2, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_VEC3:
      return { size: 3, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_VEC4:
      return { size: 4, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_MAT4:
      return { size: 4, arraySize: 4, type: Float32Array, baseType: gl.FLOAT };
    case gl.INT:
      return { size: 1, arraySize: 1, type: Int32Array, baseType: gl.INT };
  }
}

/**
 *  Form the buffer for a given attribute.
 *
 *  @param {WebGLRenderingContext} gl context
 *  @param {WebGLActiveInfo} attribute the attribute to bind to.
 *         We use its name to grab the record by name and also to know
 *         how many elements we need to grab.
 *  @param {Mesh} mesh The mesh coming in from Elm.
 *  @param {Object} attributes The mapping between the attribute names and Elm fields
 *  @return {WebGLBuffer}
 */
function _WebGL_doBindAttribute(gl, attribute, mesh, attributes) {
  // The length of the number of vertices that
  // complete one 'thing' based on the drawing mode.
  // ie, 2 for Lines, 3 for Triangles, etc.
  var elemSize = mesh.a.elemSize;

  var idxKeys = [];
  for (var i = 0; i < elemSize; i++) {
    idxKeys.push(String.fromCharCode(97 + i));
  }

  function dataFill(data, cnt, fillOffset, elem, key) {
    var i;
    if (elemSize === 1) {
      for (i = 0; i < cnt; i++) {
        data[fillOffset++] = cnt === 1 ? elem[key] : elem[key][i];
      }
    } else {
      idxKeys.forEach(function (idx) {
        for (i = 0; i < cnt; i++) {
          data[fillOffset++] = cnt === 1 ? elem[idx][key] : elem[idx][key][i];
        }
      });
    }
  }

  var attributeInfo = _WebGL_getAttributeInfo(gl, attribute.type);

  if (attributeInfo === undefined) {
    throw new Error('No info available for: ' + attribute.type);
  }

  var dataIdx = 0;
  var dataOffset = attributeInfo.size * attributeInfo.arraySize * elemSize;
  var array = new attributeInfo.type(_WebGL_listLength(mesh.b) * dataOffset);

  _WebGL_listEach(function (elem) {
    dataFill(array, attributeInfo.size * attributeInfo.arraySize, dataIdx, elem, attributes[attribute.name] || attribute.name);
    dataIdx += dataOffset;
  }, mesh.b);

  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);
  return buffer;
}

/**
 *  This sets up the binding caching buffers.
 *
 *  We don't actually bind any buffers now except for the indices buffer.
 *  The problem with filling the buffers here is that it is possible to
 *  have a buffer shared between two webgl shaders;
 *  which could have different active attributes. If we bind it here against
 *  a particular program, we might not bind them all. That final bind is now
 *  done right before drawing.
 *
 *  @param {WebGLRenderingContext} gl context
 *  @param {Mesh} mesh a mesh object from Elm
 *  @return {Object} buffer - an object with the following properties
 *  @return {Number} buffer.numIndices
 *  @return {WebGLBuffer|null} buffer.indexBuffer - optional index buffer
 *  @return {Object} buffer.buffers - will be used to buffer attributes
 */
function _WebGL_doBindSetup(gl, mesh) {
  if (mesh.a.indexSize > 0) {
    var indexBuffer = gl.createBuffer();
    var indices = _WebGL_makeIndexedBuffer(mesh.c, mesh.a.indexSize);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
    return {
      numIndices: indices.length,
      indexBuffer: indexBuffer,
      buffers: {}
    };
  } else {
    return {
      numIndices: mesh.a.elemSize * _WebGL_listLength(mesh.b),
      indexBuffer: null,
      buffers: {}
    };
  }
}

/**
 *  Create an indices array and fill it from indices
 *  based on the size of the index
 *
 *  @param {List} indicesList the list of indices
 *  @param {Number} indexSize the size of the index
 *  @return {Uint32Array} indices
 */
function _WebGL_makeIndexedBuffer(indicesList, indexSize) {
  var indices = new Uint32Array(_WebGL_listLength(indicesList) * indexSize);
  var fillOffset = 0;
  var i;
  _WebGL_listEach(function (elem) {
    if (indexSize === 1) {
      indices[fillOffset++] = elem;
    } else {
      for (i = 0; i < indexSize; i++) {
        indices[fillOffset++] = elem[String.fromCharCode(97 + i)];
      }
    }
  }, indicesList);
  return indices;
}

function _WebGL_getProgID(vertID, fragID) {
  return vertID + '#' + fragID;
}

var _WebGL_drawGL = F2(function (model, domNode) {
  var cache = model.f;
  var gl = cache.gl;

  if (!gl) {
    return domNode;
  }

  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

  if (!cache.depthTest.b) {
    gl.depthMask(true);
    cache.depthTest.b = true;
  }
  if (cache.stencilTest.c !== cache.STENCIL_WRITEMASK) {
    gl.stencilMask(cache.STENCIL_WRITEMASK);
    cache.stencilTest.c = cache.STENCIL_WRITEMASK;
  }
  _WebGL_disableScissor(cache);
  _WebGL_disableColorMask(cache);
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);

  function drawEntity(entity) {
    if (!entity.d.b.b) {
      return; // Empty list
    }

    var progid;
    var program;
    var i;

    if (entity.b.id && entity.c.id) {
      progid = _WebGL_getProgID(entity.b.id, entity.c.id);
      program = cache.programs[progid];
    }

    if (!program) {

      var vshader;
      if (entity.b.id) {
        vshader = cache.shaders[entity.b.id];
      } else {
        entity.b.id = _WebGL_guid++;
      }

      if (!vshader) {
        vshader = _WebGL_doCompile(gl, entity.b.src, gl.VERTEX_SHADER);
        cache.shaders[entity.b.id] = vshader;
      }

      var fshader;
      if (entity.c.id) {
        fshader = cache.shaders[entity.c.id];
      } else {
        entity.c.id = _WebGL_guid++;
      }

      if (!fshader) {
        fshader = _WebGL_doCompile(gl, entity.c.src, gl.FRAGMENT_SHADER);
        cache.shaders[entity.c.id] = fshader;
      }

      var glProgram = _WebGL_doLink(gl, vshader, fshader);

      program = {
        glProgram: glProgram,
        attributes: Object.assign({}, entity.b.attributes, entity.c.attributes),
        currentUniforms: {},
        activeAttributes: [],
        activeAttributeLocations: []
      };

      program.uniformSetters = _WebGL_createUniformSetters(
        gl,
        model,
        program,
        Object.assign({}, entity.b.uniforms, entity.c.uniforms)
      );

      var numActiveAttributes = gl.getProgramParameter(glProgram, gl.ACTIVE_ATTRIBUTES);
      for (i = 0; i < numActiveAttributes; i++) {
        var attribute = gl.getActiveAttrib(glProgram, i);
        var attribLocation = gl.getAttribLocation(glProgram, attribute.name);
        program.activeAttributes.push(attribute);
        program.activeAttributeLocations.push(attribLocation);
      }

      progid = _WebGL_getProgID(entity.b.id, entity.c.id);
      cache.programs[progid] = program;
    }

    if (cache.lastProgId !== progid) {
      gl.useProgram(program.glProgram);
      cache.lastProgId = progid;
    }

    _WebGL_setUniforms(program.uniformSetters, entity.e);

    var buffer = cache.buffers.get(entity.d);

    if (!buffer) {
      buffer = _WebGL_doBindSetup(gl, entity.d);
      cache.buffers.set(entity.d, buffer);
    }

    for (i = 0; i < program.activeAttributes.length; i++) {
      attribute = program.activeAttributes[i];
      attribLocation = program.activeAttributeLocations[i];

      if (buffer.buffers[attribute.name] === undefined) {
        buffer.buffers[attribute.name] = _WebGL_doBindAttribute(gl, attribute, entity.d, program.attributes);
      }
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffers[attribute.name]);

      var attributeInfo = _WebGL_getAttributeInfo(gl, attribute.type);
      if (attributeInfo.arraySize === 1) {
        gl.enableVertexAttribArray(attribLocation);
        gl.vertexAttribPointer(attribLocation, attributeInfo.size, attributeInfo.baseType, false, 0, 0);
      } else {
        // Point to four vec4 in case of mat4
        var offset = attributeInfo.size * 4; // float32 takes 4 bytes
        var stride = offset * attributeInfo.arraySize;
        for (var m = 0; m < attributeInfo.arraySize; m++) {
          gl.enableVertexAttribArray(attribLocation + m);
          gl.vertexAttribPointer(attribLocation + m, attributeInfo.size, attributeInfo.baseType, false, stride, offset * m);
        }
      }
    }

    // Apply all the new settings
    cache.toggle = !cache.toggle;
    _WebGL_listEach($elm_explorations$webgl$WebGL$Internal$enableSetting(cache), entity.a);
    // Disable the settings that were applied in the previous draw call
    for (i = 0; i < _WebGL_settings.length; i++) {
      var setting = cache[_WebGL_settings[i]];
      if (setting.toggle !== cache.toggle && setting.enabled) {
        _WebGL_disableFunctions[i](cache);
        setting.enabled = false;
        setting.toggle = cache.toggle;
      }
    }

    if (buffer.indexBuffer) {
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer.indexBuffer);
      gl.drawElements(entity.d.a.mode, buffer.numIndices, gl.UNSIGNED_INT, 0);
    } else {
      gl.drawArrays(entity.d.a.mode, 0, buffer.numIndices);
    }
  }

  _WebGL_listEach(drawEntity, model.g);
  return domNode;
});

function _WebGL_createUniformSetters(gl, model, program, uniformsMap) {
  var glProgram = program.glProgram;
  var currentUniforms = program.currentUniforms;
  var textureCounter = 0;
  var cache = model.f;
  function createUniformSetter(glProgram, uniform) {
    var uniformName = uniform.name;
    var uniformLocation = gl.getUniformLocation(glProgram, uniformName);
    switch (uniform.type) {
      case gl.INT:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform1i(uniformLocation, value);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform1f(uniformLocation, value);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_VEC2:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform2f(uniformLocation, value[0], value[1]);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_VEC3:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform3f(uniformLocation, value[0], value[1], value[2]);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_VEC4:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform4f(uniformLocation, value[0], value[1], value[2], value[3]);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_MAT4:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniformMatrix4fv(uniformLocation, false, new Float32Array(value));
            currentUniforms[uniformName] = value;
          }
        };
      case gl.SAMPLER_2D:
        var currentTexture = textureCounter++;
        return function (texture) {
          gl.activeTexture(gl.TEXTURE0 + currentTexture);
          var tex = cache.textures.get(texture);
          if (!tex) {
            tex = texture.createTexture(gl);
            cache.textures.set(texture, tex);
          }
          gl.bindTexture(gl.TEXTURE_2D, tex);
          if (currentUniforms[uniformName] !== texture) {
            gl.uniform1i(uniformLocation, currentTexture);
            currentUniforms[uniformName] = texture;
          }
        };
      case gl.BOOL:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform1i(uniformLocation, value);
            currentUniforms[uniformName] = value;
          }
        };
      default:
        return function () { };
    }
  }

  var uniformSetters = {};
  var numUniforms = gl.getProgramParameter(glProgram, gl.ACTIVE_UNIFORMS);
  for (var i = 0; i < numUniforms; i++) {
    var uniform = gl.getActiveUniform(glProgram, i);
    uniformSetters[uniformsMap[uniform.name] || uniform.name] = createUniformSetter(glProgram, uniform);
  }

  return uniformSetters;
}

function _WebGL_setUniforms(setters, values) {
  Object.keys(values).forEach(function (name) {
    var setter = setters[name];
    if (setter) {
      setter(values[name]);
    }
  });
}

// VIRTUAL-DOM WIDGET

// eslint-disable-next-line no-unused-vars
var _WebGL_toHtml = F3(function (options, factList, entities) {
  return _VirtualDom_custom(
    factList,
    {
      g: entities,
      f: {},
      h: options
    },
    _WebGL_render,
    _WebGL_diff
  );
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableAlpha = F2(function (options, option) {
  options.contextAttributes.alpha = true;
  options.contextAttributes.premultipliedAlpha = option.a;
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableDepth = F2(function (options, option) {
  options.contextAttributes.depth = true;
  options.sceneSettings.push(function (gl) {
    gl.clearDepth(option.a);
  });
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableStencil = F2(function (options, option) {
  options.contextAttributes.stencil = true;
  options.sceneSettings.push(function (gl) {
    gl.clearStencil(option.a);
  });
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableAntialias = F2(function (options, option) {
  options.contextAttributes.antialias = true;
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableClearColor = F2(function (options, option) {
  options.sceneSettings.push(function (gl) {
    gl.clearColor(option.a, option.b, option.c, option.d);
  });
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enablePreserveDrawingBuffer = F2(function (options, option) {
  options.contextAttributes.preserveDrawingBuffer = true;
});

/**
 *  Creates canvas and schedules initial _WebGL_drawGL
 *  @param {Object} model
 *  @param {Object} model.f that may contain the following properties:
           gl, shaders, programs, buffers, textures
 *  @param {List<Option>} model.h list of options coming from Elm
 *  @param {List<Entity>} model.g list of entities coming from Elm
 *  @return {HTMLElement} <canvas> if WebGL is supported, otherwise a <div>
 */
function _WebGL_render(model) {
  var options = {
    contextAttributes: {
      alpha: false,
      depth: false,
      stencil: false,
      antialias: false,
      premultipliedAlpha: false,
      preserveDrawingBuffer: false
    },
    sceneSettings: []
  };

  _WebGL_listEach(function (option) {
    return A2($elm_explorations$webgl$WebGL$Internal$enableOption, options, option);
  }, model.h);

  var canvas = _VirtualDom_doc.createElement('canvas');
  var gl = canvas.getContext && (
    canvas.getContext('webgl', options.contextAttributes) ||
    canvas.getContext('experimental-webgl', options.contextAttributes)
  );

  if (gl && typeof WeakMap !== 'undefined') {
    options.sceneSettings.forEach(function (sceneSetting) {
      sceneSetting(gl);
    });

    // Activate extensions
    gl.getExtension('OES_standard_derivatives');
    gl.getExtension('OES_element_index_uint');

    model.f.gl = gl;

    // Cache the current settings in order to diff them to avoid redundant calls
    // https://emscripten.org/docs/optimizing/Optimizing-WebGL.html#avoid-redundant-calls
    model.f.toggle = false; // used to diff the settings from the previous and current draw calls
    model.f.blend = { enabled: false, toggle: false };
    model.f.depthTest = { enabled: false, toggle: false };
    model.f.stencilTest = { enabled: false, toggle: false };
    model.f.scissor = { enabled: false, toggle: false };
    model.f.colorMask = { enabled: false, toggle: false };
    model.f.cullFace = { enabled: false, toggle: false };
    model.f.polygonOffset = { enabled: false, toggle: false };
    model.f.sampleCoverage = { enabled: false, toggle: false };
    model.f.sampleAlphaToCoverage = { enabled: false, toggle: false };

    model.f.shaders = [];
    model.f.programs = {};
    model.f.lastProgId = null;
    model.f.buffers = new WeakMap();
    model.f.textures = new WeakMap();
    // Memorize the initial stencil write mask, because
    // browsers may have different number of stencil bits
    model.f.STENCIL_WRITEMASK = gl.getParameter(gl.STENCIL_WRITEMASK);

    // Render for the first time.
    // This has to be done in animation frame,
    // because the canvas is not in the DOM yet
    _WebGL_rAF(function () {
      return A2(_WebGL_drawGL, model, canvas);
    });

  } else {
    canvas = _VirtualDom_doc.createElement('div');
    canvas.innerHTML = '<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!';
  }

  return canvas;
}

function _WebGL_diff(oldModel, newModel) {
  newModel.f = oldModel.f;
  return _WebGL_drawGL(newModel);
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}



// VIRTUAL-DOM WIDGETS


var _Markdown_toHtml = F3(function(options, factList, rawMarkdown)
{
	return _VirtualDom_custom(
		factList,
		{
			a: options,
			b: rawMarkdown
		},
		_Markdown_render,
		_Markdown_diff
	);
});



// WIDGET IMPLEMENTATION


function _Markdown_render(model)
{
	return A2(_Markdown_replace, model, _VirtualDom_doc.createElement('div'));
}


function _Markdown_diff(x, y)
{
	return x.b === y.b && x.a === y.a
		? false
		: _Markdown_replace(y);
}


var _Markdown_replace = F2(function(model, div)
{
	div.innerHTML = _Markdown_marked(model.b, _Markdown_formatOptions(model.a));
	return div;
});



// ACTUAL MARKDOWN PARSER


var _Markdown_marked = function() {
	// catch the `marked` object regardless of the outer environment.
	// (ex. a CommonJS module compatible environment.)
	// note that this depends on marked's implementation of environment detection.
	var module = {};
	var exports = module.exports = {};

	/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/chjj/marked
	 * commit cd2f6f5b7091154c5526e79b5f3bfb4d15995a51
	 */
	(function(){var block={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:noop,hr:/^( *[-*_]){3,} *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:noop,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,blockquote:/^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,table:noop,paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,text:/^[^\n]+/};block.bullet=/(?:[*+-]|\d+\.)/;block.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;block.item=replace(block.item,"gm")(/bull/g,block.bullet)();block.list=replace(block.list)(/bull/g,block.bullet)("hr","\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))")("def","\\n+(?="+block.def.source+")")();block.blockquote=replace(block.blockquote)("def",block.def)();block._tag="(?!(?:"+"a|em|strong|small|s|cite|q|dfn|abbr|data|time|code"+"|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo"+"|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b";block.html=replace(block.html)("comment",/<!--[\s\S]*?-->/)("closed",/<(tag)[\s\S]+?<\/\1>/)("closing",/<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g,block._tag)();block.paragraph=replace(block.paragraph)("hr",block.hr)("heading",block.heading)("lheading",block.lheading)("blockquote",block.blockquote)("tag","<"+block._tag)("def",block.def)();block.normal=merge({},block);block.gfm=merge({},block.normal,{fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/});block.gfm.paragraph=replace(block.paragraph)("(?!","(?!"+block.gfm.fences.source.replace("\\1","\\2")+"|"+block.list.source.replace("\\1","\\3")+"|")();block.tables=merge({},block.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/});function Lexer(options){this.tokens=[];this.tokens.links={};this.options=options||marked.defaults;this.rules=block.normal;if(this.options.gfm){if(this.options.tables){this.rules=block.tables}else{this.rules=block.gfm}}}Lexer.rules=block;Lexer.lex=function(src,options){var lexer=new Lexer(options);return lexer.lex(src)};Lexer.prototype.lex=function(src){src=src.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n");return this.token(src,true)};Lexer.prototype.token=function(src,top,bq){var src=src.replace(/^ +$/gm,""),next,loose,cap,bull,b,item,space,i,l;while(src){if(cap=this.rules.newline.exec(src)){src=src.substring(cap[0].length);if(cap[0].length>1){this.tokens.push({type:"space"})}}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);cap=cap[0].replace(/^ {4}/gm,"");this.tokens.push({type:"code",text:!this.options.pedantic?cap.replace(/\n+$/,""):cap});continue}if(cap=this.rules.fences.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"code",lang:cap[2],text:cap[3]||""});continue}if(cap=this.rules.heading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:cap[1].length,text:cap[2]});continue}if(top&&(cap=this.rules.nptable.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].split(/ *\| */)}this.tokens.push(item);continue}if(cap=this.rules.lheading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:cap[2]==="="?1:2,text:cap[1]});continue}if(cap=this.rules.hr.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"hr"});continue}if(cap=this.rules.blockquote.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"blockquote_start"});cap=cap[0].replace(/^ *> ?/gm,"");this.token(cap,top,true);this.tokens.push({type:"blockquote_end"});continue}if(cap=this.rules.list.exec(src)){src=src.substring(cap[0].length);bull=cap[2];this.tokens.push({type:"list_start",ordered:bull.length>1});cap=cap[0].match(this.rules.item);next=false;l=cap.length;i=0;for(;i<l;i++){item=cap[i];space=item.length;item=item.replace(/^ *([*+-]|\d+\.) +/,"");if(~item.indexOf("\n ")){space-=item.length;item=!this.options.pedantic?item.replace(new RegExp("^ {1,"+space+"}","gm"),""):item.replace(/^ {1,4}/gm,"")}if(this.options.smartLists&&i!==l-1){b=block.bullet.exec(cap[i+1])[0];if(bull!==b&&!(bull.length>1&&b.length>1)){src=cap.slice(i+1).join("\n")+src;i=l-1}}loose=next||/\n\n(?!\s*$)/.test(item);if(i!==l-1){next=item.charAt(item.length-1)==="\n";if(!loose)loose=next}this.tokens.push({type:loose?"loose_item_start":"list_item_start"});this.token(item,false,bq);this.tokens.push({type:"list_item_end"})}this.tokens.push({type:"list_end"});continue}if(cap=this.rules.html.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&(cap[1]==="pre"||cap[1]==="script"||cap[1]==="style"),text:cap[0]});continue}if(!bq&&top&&(cap=this.rules.def.exec(src))){src=src.substring(cap[0].length);this.tokens.links[cap[1].toLowerCase()]={href:cap[2],title:cap[3]};continue}if(top&&(cap=this.rules.table.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/(?: *\| *)?\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */)}this.tokens.push(item);continue}if(top&&(cap=this.rules.paragraph.exec(src))){src=src.substring(cap[0].length);this.tokens.push({type:"paragraph",text:cap[1].charAt(cap[1].length-1)==="\n"?cap[1].slice(0,-1):cap[1]});continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"text",text:cap[0]});continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return this.tokens};var inline={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<([^ >]+(@|:\/)[^ >]+)>/,url:noop,tag:/^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,strong:/^_\_([\s\S]+?)_\_(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^\b_((?:[^_]|_\_)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:noop,text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/};inline._inside=/(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;inline._href=/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;inline.link=replace(inline.link)("inside",inline._inside)("href",inline._href)();inline.reflink=replace(inline.reflink)("inside",inline._inside)();inline.normal=merge({},inline);inline.pedantic=merge({},inline.normal,{strong:/^_\_(?=\S)([\s\S]*?\S)_\_(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/});inline.gfm=merge({},inline.normal,{escape:replace(inline.escape)("])","~|])")(),url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:replace(inline.text)("]|","~]|")("|","|https?://|")()});inline.breaks=merge({},inline.gfm,{br:replace(inline.br)("{2,}","*")(),text:replace(inline.gfm.text)("{2,}","*")()});function InlineLexer(links,options){this.options=options||marked.defaults;this.links=links;this.rules=inline.normal;this.renderer=this.options.renderer||new Renderer;this.renderer.options=this.options;if(!this.links){throw new Error("Tokens array requires a `links` property.")}if(this.options.gfm){if(this.options.breaks){this.rules=inline.breaks}else{this.rules=inline.gfm}}else if(this.options.pedantic){this.rules=inline.pedantic}}InlineLexer.rules=inline;InlineLexer.output=function(src,links,options){var inline=new InlineLexer(links,options);return inline.output(src)};InlineLexer.prototype.output=function(src){var out="",link,text,href,cap;while(src){if(cap=this.rules.escape.exec(src)){src=src.substring(cap[0].length);out+=cap[1];continue}if(cap=this.rules.autolink.exec(src)){src=src.substring(cap[0].length);if(cap[2]==="@"){text=cap[1].charAt(6)===":"?this.mangle(cap[1].substring(7)):this.mangle(cap[1]);href=this.mangle("mailto:")+text}else{text=escape(cap[1]);href=text}out+=this.renderer.link(href,null,text);continue}if(!this.inLink&&(cap=this.rules.url.exec(src))){src=src.substring(cap[0].length);text=escape(cap[1]);href=text;out+=this.renderer.link(href,null,text);continue}if(cap=this.rules.tag.exec(src)){if(!this.inLink&&/^<a /i.test(cap[0])){this.inLink=true}else if(this.inLink&&/^<\/a>/i.test(cap[0])){this.inLink=false}src=src.substring(cap[0].length);out+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(cap[0]):escape(cap[0]):cap[0];continue}if(cap=this.rules.link.exec(src)){src=src.substring(cap[0].length);this.inLink=true;out+=this.outputLink(cap,{href:cap[2],title:cap[3]});this.inLink=false;continue}if((cap=this.rules.reflink.exec(src))||(cap=this.rules.nolink.exec(src))){src=src.substring(cap[0].length);link=(cap[2]||cap[1]).replace(/\s+/g," ");link=this.links[link.toLowerCase()];if(!link||!link.href){out+=cap[0].charAt(0);src=cap[0].substring(1)+src;continue}this.inLink=true;out+=this.outputLink(cap,link);this.inLink=false;continue}if(cap=this.rules.strong.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.strong(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.em.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.em(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.codespan(escape(cap[2],true));continue}if(cap=this.rules.br.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.br();continue}if(cap=this.rules.del.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.del(this.output(cap[1]));continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.text(escape(this.smartypants(cap[0])));continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return out};InlineLexer.prototype.outputLink=function(cap,link){var href=escape(link.href),title=link.title?escape(link.title):null;return cap[0].charAt(0)!=="!"?this.renderer.link(href,title,this.output(cap[1])):this.renderer.image(href,title,escape(cap[1]))};InlineLexer.prototype.smartypants=function(text){if(!this.options.smartypants)return text;return text.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")};InlineLexer.prototype.mangle=function(text){if(!this.options.mangle)return text;var out="",l=text.length,i=0,ch;for(;i<l;i++){ch=text.charCodeAt(i);if(Math.random()>.5){ch="x"+ch.toString(16)}out+="&#"+ch+";"}return out};function Renderer(options){this.options=options||{}}Renderer.prototype.code=function(code,lang,escaped){if(this.options.highlight){var out=this.options.highlight(code,lang);if(out!=null&&out!==code){escaped=true;code=out}}if(!lang){return"<pre><code>"+(escaped?code:escape(code,true))+"\n</code></pre>"}return'<pre><code class="'+this.options.langPrefix+escape(lang,true)+'">'+(escaped?code:escape(code,true))+"\n</code></pre>\n"};Renderer.prototype.blockquote=function(quote){return"<blockquote>\n"+quote+"</blockquote>\n"};Renderer.prototype.html=function(html){return html};Renderer.prototype.heading=function(text,level,raw){return"<h"+level+' id="'+this.options.headerPrefix+raw.toLowerCase().replace(/[^\w]+/g,"-")+'">'+text+"</h"+level+">\n"};Renderer.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"};Renderer.prototype.list=function(body,ordered){var type=ordered?"ol":"ul";return"<"+type+">\n"+body+"</"+type+">\n"};Renderer.prototype.listitem=function(text){return"<li>"+text+"</li>\n"};Renderer.prototype.paragraph=function(text){return"<p>"+text+"</p>\n"};Renderer.prototype.table=function(header,body){return"<table>\n"+"<thead>\n"+header+"</thead>\n"+"<tbody>\n"+body+"</tbody>\n"+"</table>\n"};Renderer.prototype.tablerow=function(content){return"<tr>\n"+content+"</tr>\n"};Renderer.prototype.tablecell=function(content,flags){var type=flags.header?"th":"td";var tag=flags.align?"<"+type+' style="text-align:'+flags.align+'">':"<"+type+">";return tag+content+"</"+type+">\n"};Renderer.prototype.strong=function(text){return"<strong>"+text+"</strong>"};Renderer.prototype.em=function(text){return"<em>"+text+"</em>"};Renderer.prototype.codespan=function(text){return"<code>"+text+"</code>"};Renderer.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"};Renderer.prototype.del=function(text){return"<del>"+text+"</del>"};Renderer.prototype.link=function(href,title,text){if(this.options.sanitize){try{var prot=decodeURIComponent(unescape(href)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return""}if(prot.indexOf("javascript:")===0||prot.indexOf("vbscript:")===0||prot.indexOf("data:")===0){return""}}var out='<a href="'+href+'"';if(title){out+=' title="'+title+'"'}out+=">"+text+"</a>";return out};Renderer.prototype.image=function(href,title,text){var out='<img src="'+href+'" alt="'+text+'"';if(title){out+=' title="'+title+'"'}out+=this.options.xhtml?"/>":">";return out};Renderer.prototype.text=function(text){return text};function Parser(options){this.tokens=[];this.token=null;this.options=options||marked.defaults;this.options.renderer=this.options.renderer||new Renderer;this.renderer=this.options.renderer;this.renderer.options=this.options}Parser.parse=function(src,options,renderer){var parser=new Parser(options,renderer);return parser.parse(src)};Parser.prototype.parse=function(src){this.inline=new InlineLexer(src.links,this.options,this.renderer);this.tokens=src.reverse();var out="";while(this.next()){out+=this.tok()}return out};Parser.prototype.next=function(){return this.token=this.tokens.pop()};Parser.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0};Parser.prototype.parseText=function(){var body=this.token.text;while(this.peek().type==="text"){body+="\n"+this.next().text}return this.inline.output(body)};Parser.prototype.tok=function(){switch(this.token.type){case"space":{return""}case"hr":{return this.renderer.hr()}case"heading":{return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,this.token.text)}case"code":{return this.renderer.code(this.token.text,this.token.lang,this.token.escaped)}case"table":{var header="",body="",i,row,cell,flags,j;cell="";for(i=0;i<this.token.header.length;i++){flags={header:true,align:this.token.align[i]};cell+=this.renderer.tablecell(this.inline.output(this.token.header[i]),{header:true,align:this.token.align[i]})}header+=this.renderer.tablerow(cell);for(i=0;i<this.token.cells.length;i++){row=this.token.cells[i];cell="";for(j=0;j<row.length;j++){cell+=this.renderer.tablecell(this.inline.output(row[j]),{header:false,align:this.token.align[j]})}body+=this.renderer.tablerow(cell)}return this.renderer.table(header,body)}case"blockquote_start":{var body="";while(this.next().type!=="blockquote_end"){body+=this.tok()}return this.renderer.blockquote(body)}case"list_start":{var body="",ordered=this.token.ordered;while(this.next().type!=="list_end"){body+=this.tok()}return this.renderer.list(body,ordered)}case"list_item_start":{var body="";while(this.next().type!=="list_item_end"){body+=this.token.type==="text"?this.parseText():this.tok()}return this.renderer.listitem(body)}case"loose_item_start":{var body="";while(this.next().type!=="list_item_end"){body+=this.tok()}return this.renderer.listitem(body)}case"html":{var html=!this.token.pre&&!this.options.pedantic?this.inline.output(this.token.text):this.token.text;return this.renderer.html(html)}case"paragraph":{return this.renderer.paragraph(this.inline.output(this.token.text))}case"text":{return this.renderer.paragraph(this.parseText())}}};function escape(html,encode){return html.replace(!encode?/&(?!#?\w+;)/g:/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function unescape(html){return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g,function(_,n){n=n.toLowerCase();if(n==="colon")return":";if(n.charAt(0)==="#"){return n.charAt(1)==="x"?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1))}return""})}function replace(regex,opt){regex=regex.source;opt=opt||"";return function self(name,val){if(!name)return new RegExp(regex,opt);val=val.source||val;val=val.replace(/(^|[^\[])\^/g,"$1");regex=regex.replace(name,val);return self}}function noop(){}noop.exec=noop;function merge(obj){var i=1,target,key;for(;i<arguments.length;i++){target=arguments[i];for(key in target){if(Object.prototype.hasOwnProperty.call(target,key)){obj[key]=target[key]}}}return obj}function marked(src,opt,callback){if(callback||typeof opt==="function"){if(!callback){callback=opt;opt=null}opt=merge({},marked.defaults,opt||{});var highlight=opt.highlight,tokens,pending,i=0;try{tokens=Lexer.lex(src,opt)}catch(e){return callback(e)}pending=tokens.length;var done=function(err){if(err){opt.highlight=highlight;return callback(err)}var out;try{out=Parser.parse(tokens,opt)}catch(e){err=e}opt.highlight=highlight;return err?callback(err):callback(null,out)};if(!highlight||highlight.length<3){return done()}delete opt.highlight;if(!pending)return done();for(;i<tokens.length;i++){(function(token){if(token.type!=="code"){return--pending||done()}return highlight(token.text,token.lang,function(err,code){if(err)return done(err);if(code==null||code===token.text){return--pending||done()}token.text=code;token.escaped=true;--pending||done()})})(tokens[i])}return}try{if(opt)opt=merge({},marked.defaults,opt);return Parser.parse(Lexer.lex(src,opt),opt)}catch(e){e.message+="\nPlease report this to https://github.com/chjj/marked.";if((opt||marked.defaults).silent){return"<p>An error occured:</p><pre>"+escape(e.message+"",true)+"</pre>"}throw e}}marked.options=marked.setOptions=function(opt){merge(marked.defaults,opt);return marked};marked.defaults={gfm:true,tables:true,breaks:false,pedantic:false,sanitize:false,sanitizer:null,mangle:true,smartLists:false,silent:false,highlight:null,langPrefix:"lang-",smartypants:false,headerPrefix:"",renderer:new Renderer,xhtml:false};marked.Parser=Parser;marked.parser=Parser.parse;marked.Renderer=Renderer;marked.Lexer=Lexer;marked.lexer=Lexer.lex;marked.InlineLexer=InlineLexer;marked.inlineLexer=InlineLexer.output;marked.parse=marked;if(typeof module!=="undefined"&&typeof exports==="object"){module.exports=marked}else if(typeof define==="function"&&define.amd){define(function(){return marked})}else{this.marked=marked}}).call(function(){return this||(typeof window!=="undefined"?window:global)}());

	return module.exports;
}();


// FORMAT OPTIONS FOR MARKED IMPLEMENTATION

function _Markdown_formatOptions(options)
{
	function toHighlight(code, lang)
	{
		if (!lang && $elm$core$Maybe$isJust(options.defaultHighlighting))
		{
			lang = options.defaultHighlighting.a;
		}

		if (typeof hljs !== 'undefined' && lang && hljs.listLanguages().indexOf(lang) >= 0)
		{
			return hljs.highlight(lang, code, true).value;
		}

		return code;
	}

	var gfm = options.githubFlavored.a;

	return {
		highlight: toHighlight,
		gfm: gfm,
		tables: gfm && gfm.tables,
		breaks: gfm && gfm.breaks,
		sanitize: options.sanitize,
		smartypants: options.smartypants
	};
}
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $author$project$OAuthTypes$NoOp = {$: 'NoOp'};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $author$project$Main$OAuthMessage = function (a) {
	return {$: 'OAuthMessage', a: a};
};
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$List$cons = _List_cons;
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$application = _Browser_application;
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $chelovek0v$bbase64$Base64$Encode$BytesEncoder = function (a) {
	return {$: 'BytesEncoder', a: a};
};
var $chelovek0v$bbase64$Base64$Encode$bytes = function (input) {
	return $chelovek0v$bbase64$Base64$Encode$BytesEncoder(input);
};
var $elm$bytes$Bytes$Encode$getWidth = function (builder) {
	switch (builder.$) {
		case 'I8':
			return 1;
		case 'I16':
			return 2;
		case 'I32':
			return 4;
		case 'U8':
			return 1;
		case 'U16':
			return 2;
		case 'U32':
			return 4;
		case 'F32':
			return 4;
		case 'F64':
			return 8;
		case 'Seq':
			var w = builder.a;
			return w;
		case 'Utf8':
			var w = builder.a;
			return w;
		default:
			var bs = builder.a;
			return _Bytes_width(bs);
	}
};
var $elm$bytes$Bytes$LE = {$: 'LE'};
var $elm$bytes$Bytes$Encode$write = F3(
	function (builder, mb, offset) {
		switch (builder.$) {
			case 'I8':
				var n = builder.a;
				return A3(_Bytes_write_i8, mb, offset, n);
			case 'I16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'I32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U8':
				var n = builder.a;
				return A3(_Bytes_write_u8, mb, offset, n);
			case 'U16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F64':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f64,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'Seq':
				var bs = builder.b;
				return A3($elm$bytes$Bytes$Encode$writeSequence, bs, mb, offset);
			case 'Utf8':
				var s = builder.b;
				return A3(_Bytes_write_string, mb, offset, s);
			default:
				var bs = builder.a;
				return A3(_Bytes_write_bytes, mb, offset, bs);
		}
	});
var $elm$bytes$Bytes$Encode$writeSequence = F3(
	function (builders, mb, offset) {
		writeSequence:
		while (true) {
			if (!builders.b) {
				return offset;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$builders = bs,
					$temp$mb = mb,
					$temp$offset = A3($elm$bytes$Bytes$Encode$write, b, mb, offset);
				builders = $temp$builders;
				mb = $temp$mb;
				offset = $temp$offset;
				continue writeSequence;
			}
		}
	});
var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
var $elm$bytes$Bytes$Encode$Utf8 = F2(
	function (a, b) {
		return {$: 'Utf8', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$string = function (str) {
	return A2(
		$elm$bytes$Bytes$Encode$Utf8,
		_Bytes_getStringWidth(str),
		str);
};
var $elm$bytes$Bytes$Decode$decode = F2(
	function (_v0, bs) {
		var decoder = _v0.a;
		return A2(_Bytes_decode, decoder, bs);
	});
var $elm$bytes$Bytes$Decode$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$bytes$Bytes$Decode$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $chelovek0v$bbase64$Base64$Shift$Shift2 = {$: 'Shift2'};
var $chelovek0v$bbase64$Base64$Shift$Shift4 = {$: 'Shift4'};
var $chelovek0v$bbase64$Base64$Shift$Shift6 = {$: 'Shift6'};
var $elm$core$Bitwise$and = _Bitwise_and;
var $chelovek0v$bbase64$Base64$Shift$and = F2(
	function (shift, value) {
		switch (shift.$) {
			case 'Shift0':
				return value;
			case 'Shift2':
				return 3 & value;
			case 'Shift4':
				return 15 & value;
			default:
				return 63 & value;
		}
	});
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $chelovek0v$bbase64$Base64$Table$codeToCharMap = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(0, 'A'),
			_Utils_Tuple2(1, 'B'),
			_Utils_Tuple2(2, 'C'),
			_Utils_Tuple2(3, 'D'),
			_Utils_Tuple2(4, 'E'),
			_Utils_Tuple2(5, 'F'),
			_Utils_Tuple2(6, 'G'),
			_Utils_Tuple2(7, 'H'),
			_Utils_Tuple2(8, 'I'),
			_Utils_Tuple2(9, 'J'),
			_Utils_Tuple2(10, 'K'),
			_Utils_Tuple2(11, 'L'),
			_Utils_Tuple2(12, 'M'),
			_Utils_Tuple2(13, 'N'),
			_Utils_Tuple2(14, 'O'),
			_Utils_Tuple2(15, 'P'),
			_Utils_Tuple2(16, 'Q'),
			_Utils_Tuple2(17, 'R'),
			_Utils_Tuple2(18, 'S'),
			_Utils_Tuple2(19, 'T'),
			_Utils_Tuple2(20, 'U'),
			_Utils_Tuple2(21, 'V'),
			_Utils_Tuple2(22, 'W'),
			_Utils_Tuple2(23, 'X'),
			_Utils_Tuple2(24, 'Y'),
			_Utils_Tuple2(25, 'Z'),
			_Utils_Tuple2(26, 'a'),
			_Utils_Tuple2(27, 'b'),
			_Utils_Tuple2(28, 'c'),
			_Utils_Tuple2(29, 'd'),
			_Utils_Tuple2(30, 'e'),
			_Utils_Tuple2(31, 'f'),
			_Utils_Tuple2(32, 'g'),
			_Utils_Tuple2(33, 'h'),
			_Utils_Tuple2(34, 'i'),
			_Utils_Tuple2(35, 'j'),
			_Utils_Tuple2(36, 'k'),
			_Utils_Tuple2(37, 'l'),
			_Utils_Tuple2(38, 'm'),
			_Utils_Tuple2(39, 'n'),
			_Utils_Tuple2(40, 'o'),
			_Utils_Tuple2(41, 'p'),
			_Utils_Tuple2(42, 'q'),
			_Utils_Tuple2(43, 'r'),
			_Utils_Tuple2(44, 's'),
			_Utils_Tuple2(45, 't'),
			_Utils_Tuple2(46, 'u'),
			_Utils_Tuple2(47, 'v'),
			_Utils_Tuple2(48, 'w'),
			_Utils_Tuple2(49, 'x'),
			_Utils_Tuple2(50, 'y'),
			_Utils_Tuple2(51, 'z'),
			_Utils_Tuple2(52, '0'),
			_Utils_Tuple2(53, '1'),
			_Utils_Tuple2(54, '2'),
			_Utils_Tuple2(55, '3'),
			_Utils_Tuple2(56, '4'),
			_Utils_Tuple2(57, '5'),
			_Utils_Tuple2(58, '6'),
			_Utils_Tuple2(59, '7'),
			_Utils_Tuple2(60, '8'),
			_Utils_Tuple2(61, '9'),
			_Utils_Tuple2(62, '+'),
			_Utils_Tuple2(63, '/')
		]));
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $chelovek0v$bbase64$Base64$Table$encode = function (code) {
	var _v0 = A2($elm$core$Dict$get, code, $chelovek0v$bbase64$Base64$Table$codeToCharMap);
	if (_v0.$ === 'Just') {
		var char_ = _v0.a;
		return char_;
	} else {
		return '';
	}
};
var $chelovek0v$bbase64$Base64$Shift$next = function (shift) {
	switch (shift.$) {
		case 'Shift0':
			return $chelovek0v$bbase64$Base64$Shift$Shift2;
		case 'Shift2':
			return $chelovek0v$bbase64$Base64$Shift$Shift4;
		case 'Shift4':
			return $chelovek0v$bbase64$Base64$Shift$Shift6;
		default:
			return $chelovek0v$bbase64$Base64$Shift$Shift2;
	}
};
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $chelovek0v$bbase64$Base64$Shift$toInt = function (shift) {
	switch (shift.$) {
		case 'Shift0':
			return 0;
		case 'Shift2':
			return 2;
		case 'Shift4':
			return 4;
		default:
			return 6;
	}
};
var $chelovek0v$bbase64$Base64$Shift$shiftRightZfBy = F2(
	function (shift, value) {
		return value >>> $chelovek0v$bbase64$Base64$Shift$toInt(shift);
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $chelovek0v$bbase64$Base64$Shift$shiftLeftBy = F2(
	function (shift, value) {
		return value << $chelovek0v$bbase64$Base64$Shift$toInt(shift);
	});
var $chelovek0v$bbase64$Base64$Encode$sixtet = F2(
	function (octet, _v0) {
		var shift = _v0.a;
		var sixtet_ = _v0.b;
		var strAcc = _v0.c;
		switch (shift.$) {
			case 'Shift0':
				return A2($chelovek0v$bbase64$Base64$Shift$shiftRightZfBy, $chelovek0v$bbase64$Base64$Shift$Shift2, octet);
			case 'Shift2':
				return A2($chelovek0v$bbase64$Base64$Shift$shiftLeftBy, $chelovek0v$bbase64$Base64$Shift$Shift4, sixtet_) | A2($chelovek0v$bbase64$Base64$Shift$shiftRightZfBy, $chelovek0v$bbase64$Base64$Shift$Shift4, octet);
			case 'Shift4':
				return A2($chelovek0v$bbase64$Base64$Shift$shiftLeftBy, $chelovek0v$bbase64$Base64$Shift$Shift2, sixtet_) | A2($chelovek0v$bbase64$Base64$Shift$shiftRightZfBy, $chelovek0v$bbase64$Base64$Shift$Shift6, octet);
			default:
				return sixtet_;
		}
	});
var $chelovek0v$bbase64$Base64$Encode$encodeStep = F2(
	function (octet, encodeState) {
		var shift = encodeState.a;
		var strAcc = encodeState.c;
		var nextSixtet = function () {
			switch (shift.$) {
				case 'Shift0':
					return A2($chelovek0v$bbase64$Base64$Shift$and, $chelovek0v$bbase64$Base64$Shift$Shift2, octet);
				case 'Shift2':
					return A2($chelovek0v$bbase64$Base64$Shift$and, $chelovek0v$bbase64$Base64$Shift$Shift4, octet);
				case 'Shift4':
					return A2($chelovek0v$bbase64$Base64$Shift$and, $chelovek0v$bbase64$Base64$Shift$Shift6, octet);
				default:
					return A2($chelovek0v$bbase64$Base64$Shift$and, $chelovek0v$bbase64$Base64$Shift$Shift2, octet);
			}
		}();
		var currentSixtet = A2($chelovek0v$bbase64$Base64$Encode$sixtet, octet, encodeState);
		var base64Char = function () {
			if (shift.$ === 'Shift6') {
				return _Utils_ap(
					$chelovek0v$bbase64$Base64$Table$encode(currentSixtet),
					$chelovek0v$bbase64$Base64$Table$encode(
						A2($chelovek0v$bbase64$Base64$Shift$shiftRightZfBy, $chelovek0v$bbase64$Base64$Shift$Shift2, octet)));
			} else {
				return $chelovek0v$bbase64$Base64$Table$encode(currentSixtet);
			}
		}();
		return _Utils_Tuple3(
			$chelovek0v$bbase64$Base64$Shift$next(shift),
			nextSixtet,
			_Utils_ap(strAcc, base64Char));
	});
var $elm$bytes$Bytes$Decode$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $elm$bytes$Bytes$Decode$map = F2(
	function (func, _v0) {
		var decodeA = _v0.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v1 = A2(decodeA, bites, offset);
					var aOffset = _v1.a;
					var a = _v1.b;
					return _Utils_Tuple2(
						aOffset,
						func(a));
				}));
	});
var $elm$bytes$Bytes$Decode$succeed = function (a) {
	return $elm$bytes$Bytes$Decode$Decoder(
		F2(
			function (_v0, offset) {
				return _Utils_Tuple2(offset, a);
			}));
};
var $chelovek0v$bbase64$Base64$Encode$decodeStep = F2(
	function (octetDecoder, _v0) {
		var n = _v0.a;
		var encodeState = _v0.b;
		return (n <= 0) ? $elm$bytes$Bytes$Decode$succeed(
			$elm$bytes$Bytes$Decode$Done(encodeState)) : A2(
			$elm$bytes$Bytes$Decode$map,
			function (octet) {
				return $elm$bytes$Bytes$Decode$Loop(
					_Utils_Tuple2(
						n - 1,
						A2($chelovek0v$bbase64$Base64$Encode$encodeStep, octet, encodeState)));
			},
			octetDecoder);
	});
var $chelovek0v$bbase64$Base64$Encode$finalize = function (_v0) {
	var shift = _v0.a;
	var sixtet_ = _v0.b;
	var strAcc = _v0.c;
	switch (shift.$) {
		case 'Shift6':
			return _Utils_ap(
				strAcc,
				$chelovek0v$bbase64$Base64$Table$encode(sixtet_));
		case 'Shift4':
			return strAcc + ($chelovek0v$bbase64$Base64$Table$encode(
				A2($chelovek0v$bbase64$Base64$Shift$shiftLeftBy, $chelovek0v$bbase64$Base64$Shift$Shift2, sixtet_)) + '=');
		case 'Shift2':
			return strAcc + ($chelovek0v$bbase64$Base64$Table$encode(
				A2($chelovek0v$bbase64$Base64$Shift$shiftLeftBy, $chelovek0v$bbase64$Base64$Shift$Shift4, sixtet_)) + '==');
		default:
			return strAcc;
	}
};
var $chelovek0v$bbase64$Base64$Shift$Shift0 = {$: 'Shift0'};
var $chelovek0v$bbase64$Base64$Encode$initialEncodeState = _Utils_Tuple3($chelovek0v$bbase64$Base64$Shift$Shift0, 0, '');
var $elm$bytes$Bytes$Decode$loopHelp = F4(
	function (state, callback, bites, offset) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var decoder = _v0.a;
			var _v1 = A2(decoder, bites, offset);
			var newOffset = _v1.a;
			var step = _v1.b;
			if (step.$ === 'Loop') {
				var newState = step.a;
				var $temp$state = newState,
					$temp$callback = callback,
					$temp$bites = bites,
					$temp$offset = newOffset;
				state = $temp$state;
				callback = $temp$callback;
				bites = $temp$bites;
				offset = $temp$offset;
				continue loopHelp;
			} else {
				var result = step.a;
				return _Utils_Tuple2(newOffset, result);
			}
		}
	});
var $elm$bytes$Bytes$Decode$loop = F2(
	function (state, callback) {
		return $elm$bytes$Bytes$Decode$Decoder(
			A2($elm$bytes$Bytes$Decode$loopHelp, state, callback));
	});
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$bytes$Bytes$Decode$unsignedInt8 = $elm$bytes$Bytes$Decode$Decoder(_Bytes_read_u8);
var $elm$bytes$Bytes$width = _Bytes_width;
var $chelovek0v$bbase64$Base64$Encode$tryEncode = function (input) {
	var decoderInitialState = _Utils_Tuple2(
		$elm$bytes$Bytes$width(input),
		$chelovek0v$bbase64$Base64$Encode$initialEncodeState);
	var base64Decoder = A2(
		$elm$bytes$Bytes$Decode$loop,
		decoderInitialState,
		$chelovek0v$bbase64$Base64$Encode$decodeStep($elm$bytes$Bytes$Decode$unsignedInt8));
	return A2(
		$elm$core$Maybe$map,
		$chelovek0v$bbase64$Base64$Encode$finalize,
		A2($elm$bytes$Bytes$Decode$decode, base64Decoder, input));
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $chelovek0v$bbase64$Base64$Encode$encode = function (encoder) {
	if (encoder.$ === 'StringEncoder') {
		var input = encoder.a;
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			$chelovek0v$bbase64$Base64$Encode$tryEncode(
				$elm$bytes$Bytes$Encode$encode(
					$elm$bytes$Bytes$Encode$string(input))));
	} else {
		var input = encoder.a;
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			$chelovek0v$bbase64$Base64$Encode$tryEncode(input));
	}
};
var $author$project$StravaAuth$base64 = A2($elm$core$Basics$composeR, $chelovek0v$bbase64$Base64$Encode$bytes, $chelovek0v$bbase64$Base64$Encode$encode);
var $elm$bytes$Bytes$Encode$Seq = F2(
	function (a, b) {
		return {$: 'Seq', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$getWidths = F2(
	function (width, builders) {
		getWidths:
		while (true) {
			if (!builders.b) {
				return width;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$width = width + $elm$bytes$Bytes$Encode$getWidth(b),
					$temp$builders = bs;
				width = $temp$width;
				builders = $temp$builders;
				continue getWidths;
			}
		}
	});
var $elm$bytes$Bytes$Encode$sequence = function (builders) {
	return A2(
		$elm$bytes$Bytes$Encode$Seq,
		A2($elm$bytes$Bytes$Encode$getWidths, 0, builders),
		builders);
};
var $elm$bytes$Bytes$Encode$U8 = function (a) {
	return {$: 'U8', a: a};
};
var $elm$bytes$Bytes$Encode$unsignedInt8 = $elm$bytes$Bytes$Encode$U8;
var $author$project$StravaAuth$toBytes = A2(
	$elm$core$Basics$composeR,
	$elm$core$List$map($elm$bytes$Bytes$Encode$unsignedInt8),
	A2($elm$core$Basics$composeR, $elm$bytes$Bytes$Encode$sequence, $elm$bytes$Bytes$Encode$encode));
var $author$project$StravaAuth$convertBytes = A2(
	$elm$core$Basics$composeR,
	$author$project$StravaAuth$toBytes,
	A2(
		$elm$core$Basics$composeR,
		$author$project$StravaAuth$base64,
		function (state) {
			return {state: state};
		}));
var $author$project$Main$AdjustTimeZone = function (a) {
	return {$: 'AdjustTimeZone', a: a};
};
var $author$project$Main$GotWindowSize = function (a) {
	return {$: 'GotWindowSize', a: a};
};
var $author$project$SplitPane$SplitPane$Horizontal = {$: 'Horizontal'};
var $author$project$SplitPane$SplitPane$Vertical = {$: 'Vertical'};
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $author$project$SplitPane$SplitPane$State = function (a) {
	return {$: 'State', a: a};
};
var $author$project$SplitPane$SplitPane$configureSplitter = F2(
	function (newPosition, _v0) {
		var state = _v0.a;
		return $author$project$SplitPane$SplitPane$State(
			_Utils_update(
				state,
				{splitterPosition: newPosition}));
	});
var $author$project$PaneLayoutManager$Pane2 = {$: 'Pane2'};
var $author$project$PaneLayoutManager$Pane3 = {$: 'Pane3'};
var $author$project$PaneLayoutManager$Pane4 = {$: 'Pane4'};
var $author$project$PaneLayoutManager$PanesOne = {$: 'PanesOne'};
var $author$project$PaneLayoutManager$SliderIdle = {$: 'SliderIdle'};
var $author$project$MapPortController$defaultMapState = {lastClickLat: 0.0, lastClickLon: 0.0};
var $author$project$PaneLayoutManager$Pane1 = {$: 'Pane1'};
var $author$project$PaneLayoutManager$ViewInfo = {$: 'ViewInfo'};
var $author$project$PaneLayoutManager$defaultPaneContext = {activeView: $author$project$PaneLayoutManager$ViewInfo, mapContext: $elm$core$Maybe$Nothing, paneId: $author$project$PaneLayoutManager$Pane1, planContext: $elm$core$Maybe$Nothing, profileContext: $elm$core$Maybe$Nothing, thirdPersonContext: $elm$core$Maybe$Nothing};
var $author$project$PaneLayoutManager$defaultOptions = {
	mapState: $author$project$MapPortController$defaultMapState,
	pane1: $author$project$PaneLayoutManager$defaultPaneContext,
	pane2: _Utils_update(
		$author$project$PaneLayoutManager$defaultPaneContext,
		{paneId: $author$project$PaneLayoutManager$Pane2}),
	pane3: _Utils_update(
		$author$project$PaneLayoutManager$defaultPaneContext,
		{paneId: $author$project$PaneLayoutManager$Pane3}),
	pane4: _Utils_update(
		$author$project$PaneLayoutManager$defaultPaneContext,
		{paneId: $author$project$PaneLayoutManager$Pane4}),
	paneLayout: $author$project$PaneLayoutManager$PanesOne,
	popupVisible: false,
	scene3d: _List_Nil,
	sliderState: $author$project$PaneLayoutManager$SliderIdle
};
var $author$project$Tools$BendSmootherOptions$SmoothBend = {$: 'SmoothBend'};
var $author$project$Tools$BendSmoother$defaultOptions = {bendTrackPointSpacing: 5.0, mode: $author$project$Tools$BendSmootherOptions$SmoothBend, segments: 1, smoothedBend: $elm$core$Maybe$Nothing};
var $author$project$Tools$BezierOptions$Approximated = {$: 'Approximated'};
var $author$project$Tools$BezierOptions$ExtentIsRange = {$: 'ExtentIsRange'};
var $author$project$Tools$BezierSplines$defaultOptions = {bezierStyle: $author$project$Tools$BezierOptions$Approximated, bezierTension: 0.5, bezierTolerance: 5.0, extent: $author$project$Tools$BezierOptions$ExtentIsRange};
var $author$project$Tools$CentroidAverageOptions$ExtentRange = {$: 'ExtentRange'};
var $author$project$Tools$CentroidAverage$defaultOptions = {applyToAltitude: true, applyToPosition: true, extent: $author$project$Tools$CentroidAverageOptions$ExtentRange, weighting: 1.0};
var $author$project$Tools$CurveFormerOptions$Holistic = {$: 'Holistic'};
var $ianmackenzie$elm_units$Quantity$Quantity = function (a) {
	return {$: 'Quantity', a: a};
};
var $ianmackenzie$elm_units$Length$meters = function (numMeters) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numMeters);
};
var $ianmackenzie$elm_geometry$Geometry$Types$Vector2d = function (a) {
	return {$: 'Vector2d', a: a};
};
var $ianmackenzie$elm_geometry$Vector2d$zero = $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
	{x: 0, y: 0});
var $author$project$Tools$CurveFormer$defaultOptions = {
	dragging: $elm$core$Maybe$Nothing,
	fixedAttachmentPoints: $elm$core$Maybe$Nothing,
	lastVector: $ianmackenzie$elm_geometry$Vector2d$zero,
	newTrackPoints: _List_Nil,
	pointsAreContiguous: false,
	pointsWithinCircle: $elm$core$Dict$empty,
	pointsWithinDisc: $elm$core$Dict$empty,
	pullRadius: $ianmackenzie$elm_units$Length$meters(15.0),
	pushRadius: $ianmackenzie$elm_units$Length$meters(10.0),
	referencePoint: $elm$core$Maybe$Nothing,
	smoothGradient: $author$project$Tools$CurveFormerOptions$Holistic,
	spacing: $ianmackenzie$elm_units$Length$meters(5.0),
	transitionRadius: $ianmackenzie$elm_units$Length$meters(20.0),
	usePullRadius: false,
	vector: $ianmackenzie$elm_geometry$Vector2d$zero
};
var $author$project$Tools$DeletePoints$defaultOptions = {pointsToBeDeleted: _List_Nil, singlePoint: true};
var $author$project$Tools$DirectionChanges$DirectionChangeAbrupt = {$: 'DirectionChangeAbrupt'};
var $elm$core$Basics$pi = _Basics_pi;
var $ianmackenzie$elm_units$Angle$radians = function (numRadians) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numRadians);
};
var $ianmackenzie$elm_units$Angle$degrees = function (numDegrees) {
	return $ianmackenzie$elm_units$Angle$radians($elm$core$Basics$pi * (numDegrees / 180));
};
var $author$project$Tools$DirectionChanges$defaultOptions = {
	breaches: _List_Nil,
	currentBreach: 0,
	mode: $author$project$Tools$DirectionChanges$DirectionChangeAbrupt,
	radius: $ianmackenzie$elm_units$Length$meters(10.0),
	threshold: $ianmackenzie$elm_units$Angle$degrees(120)
};
var $author$project$Tools$DisplaySettingsOptions$PastelCurtain = {$: 'PastelCurtain'};
var $author$project$Tools$DisplaySettings$defaultOptions = {centreLine: false, curtainStyle: $author$project$Tools$DisplaySettingsOptions$PastelCurtain, groundPlane: true, roadSurface: true};
var $author$project$Tools$GradientProblems$AbruptChange = {$: 'AbruptChange'};
var $author$project$Tools$GradientProblems$defaultOptions = {breaches: _List_Nil, currentBreach: 0, mode: $author$project$Tools$GradientProblems$AbruptChange, threshold: 10.0};
var $author$project$Tools$InterpolateOptions$ExtentIsRange = {$: 'ExtentIsRange'};
var $author$project$Tools$Interpolate$defaultOptions = {
	extent: $author$project$Tools$InterpolateOptions$ExtentIsRange,
	minimumSpacing: $ianmackenzie$elm_units$Length$meters(10.0)
};
var $author$project$Tools$LimitGradientOptions$ExtentIsRange = {$: 'ExtentIsRange'};
var $author$project$Tools$LimitGradients$defaultOptions = {extent: $author$project$Tools$LimitGradientOptions$ExtentIsRange, maximumAscent: 15.0, maximumDescent: 15.0, previewData: $elm$core$Maybe$Nothing};
var $ianmackenzie$elm_units$Quantity$zero = $ianmackenzie$elm_units$Quantity$Quantity(0);
var $author$project$Tools$Nudge$defaultOptions = {fadeExtent: $ianmackenzie$elm_units$Quantity$zero, horizontal: $ianmackenzie$elm_units$Quantity$zero, vertical: $ianmackenzie$elm_units$Quantity$zero};
var $author$project$Tools$OutAndBack$defaultOptions = {offset: 0.0};
var $author$project$Tools$Pointers$defaultOptions = {orange: 0, purple: $elm$core$Maybe$Nothing};
var $author$project$Tools$Simplify$defaultOptions = {pointsToRemove: $elm$core$Dict$empty};
var $author$project$Tools$TrackInfoBox$InfoForTrack = {$: 'InfoForTrack'};
var $author$project$Tools$TrackInfoBox$defaultOptions = {displayMode: $author$project$Tools$TrackInfoBox$InfoForTrack, memoryInfo: $elm$core$Maybe$Nothing};
var $author$project$Tools$UndoRedo$Options = function (dummy) {
	return {dummy: dummy};
};
var $author$project$Tools$UndoRedo$defaultOptions = $author$project$Tools$UndoRedo$Options(0);
var $author$project$ToolsController$Contracted = {$: 'Contracted'};
var $author$project$ToolsController$DockLowerRight = {$: 'DockLowerRight'};
var $author$project$ToolsController$ToolBendSmoother = {$: 'ToolBendSmoother'};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze = A3($mdgriffith$elm_ui$Element$rgb255, 223, 249, 251);
var $smucode$elm_flat_colors$FlatColors$AussiePalette$deepKoamaru = A3($mdgriffith$elm_ui$Element$rgb255, 48, 51, 107);
var $mdgriffith$elm_ui$Element$toRgb = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $author$project$ViewPureStyles$contrastingColour = function (col) {
	var _v0 = $mdgriffith$elm_ui$Element$toRgb(col);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	var grey = ((0.299 * red) + (0.587 * green)) + (0.114 * blue);
	return (grey > 0.5) ? $smucode$elm_flat_colors$FlatColors$AussiePalette$deepKoamaru : $smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze;
};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$greenSea = A3($mdgriffith$elm_ui$Element$rgb255, 22, 160, 133);
var $author$project$ToolsController$bendSmootherTool = {
	dock: $author$project$ToolsController$DockLowerRight,
	info: 'Make it smoother',
	isPopupOpen: false,
	label: 'Classic bends',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$greenSea,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$greenSea),
	toolType: $author$project$ToolsController$ToolBendSmoother,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolBezierSplines = {$: 'ToolBezierSplines'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst = A3($mdgriffith$elm_ui$Element$rgb255, 155, 89, 182);
var $author$project$ToolsController$bezierSplinesTool = {
	dock: $author$project$ToolsController$DockLowerRight,
	info: 'Make it smoother',
	isPopupOpen: false,
	label: 'Bezier splines',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst),
	toolType: $author$project$ToolsController$ToolBezierSplines,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolCentroidAverage = {$: 'ToolCentroidAverage'};
var $author$project$ToolsController$centroidAverageTool = {
	dock: $author$project$ToolsController$DockLowerRight,
	info: 'Make it smoother',
	isPopupOpen: false,
	label: 'Centroid Average',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst),
	toolType: $author$project$ToolsController$ToolCentroidAverage,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolCurveFormer = {$: 'ToolCurveFormer'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$turquoise = A3($mdgriffith$elm_ui$Element$rgb255, 26, 188, 156);
var $author$project$ToolsController$curveFormerTool = {
	dock: $author$project$ToolsController$DockLowerRight,
	info: 'Make it smoother',
	isPopupOpen: false,
	label: 'Radiused bends',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$turquoise,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$turquoise),
	toolType: $author$project$ToolsController$ToolCurveFormer,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolDeletePoints = {$: 'ToolDeletePoints'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete = A3($mdgriffith$elm_ui$Element$rgb255, 149, 165, 166);
var $author$project$ToolsController$deleteTool = {
	dock: $author$project$ToolsController$DockLowerRight,
	info: 'Away with ye',
	isPopupOpen: false,
	label: 'Delete points',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete),
	toolType: $author$project$ToolsController$ToolDeletePoints,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$DockLowerLeft = {$: 'DockLowerLeft'};
var $author$project$ToolsController$ToolAbruptDirectionChanges = {$: 'ToolAbruptDirectionChanges'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver = A3($mdgriffith$elm_ui$Element$rgb255, 52, 152, 219);
var $author$project$ToolsController$directionChangeTool = {
	dock: $author$project$ToolsController$DockLowerLeft,
	info: 'These may need smoothing',
	isPopupOpen: false,
	label: 'Direction changes',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
	toolType: $author$project$ToolsController$ToolAbruptDirectionChanges,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$DockUpperLeft = {$: 'DockUpperLeft'};
var $author$project$ToolsController$ToolDisplaySettings = {$: 'ToolDisplaySettings'};
var $author$project$ToolsController$displaySettingsTool = {
	dock: $author$project$ToolsController$DockUpperLeft,
	info: 'How it looks',
	isPopupOpen: false,
	label: 'Display',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
	toolType: $author$project$ToolsController$ToolDisplaySettings,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolGradientProblems = {$: 'ToolGradientProblems'};
var $author$project$ToolsController$gradientChangeTool = {
	dock: $author$project$ToolsController$DockLowerLeft,
	info: 'These may need smoothing',
	isPopupOpen: false,
	label: 'Gradient problems',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
	toolType: $author$project$ToolsController$ToolGradientProblems,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolInterpolate = {$: 'ToolInterpolate'};
var $author$project$ToolsController$interpolateTool = {
	dock: $author$project$ToolsController$DockLowerLeft,
	info: 'Add points',
	isPopupOpen: false,
	label: 'Add points',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete),
	toolType: $author$project$ToolsController$ToolInterpolate,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolLimitGradient = {$: 'ToolLimitGradient'};
var $author$project$ToolsController$limitGradientTool = {
	dock: $author$project$ToolsController$DockLowerLeft,
	info: 'Limit Gradients',
	isPopupOpen: false,
	label: 'Limit Gradients',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete),
	toolType: $author$project$ToolsController$ToolLimitGradient,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolNudge = {$: 'ToolNudge'};
var $author$project$ToolsController$nudgeTool = {
	dock: $author$project$ToolsController$DockLowerRight,
	info: 'Make it smoother',
	isPopupOpen: false,
	label: 'Nudge',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete),
	toolType: $author$project$ToolsController$ToolNudge,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolOutAndBack = {$: 'ToolOutAndBack'};
var $author$project$ToolsController$outAndBackTool = {
	dock: $author$project$ToolsController$DockLowerLeft,
	info: 'ET go home',
	isPopupOpen: false,
	label: 'Out and Back',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete),
	toolType: $author$project$ToolsController$ToolOutAndBack,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$DockUpperRight = {$: 'DockUpperRight'};
var $author$project$ToolsController$Expanded = {$: 'Expanded'};
var $author$project$ToolsController$ToolPointers = {$: 'ToolPointers'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$orange = A3($mdgriffith$elm_ui$Element$rgb255, 243, 156, 18);
var $author$project$ToolsController$pointersTool = {
	dock: $author$project$ToolsController$DockUpperRight,
	info: 'Use to bracket edits',
	isPopupOpen: false,
	label: 'Pointers',
	state: $author$project$ToolsController$Expanded,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$orange,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$orange),
	toolType: $author$project$ToolsController$ToolPointers,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolSimplify = {$: 'ToolSimplify'};
var $author$project$ToolsController$simplifyTool = {
	dock: $author$project$ToolsController$DockLowerLeft,
	info: 'Reduce noise',
	isPopupOpen: false,
	label: 'Simplify',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete),
	toolType: $author$project$ToolsController$ToolSimplify,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolTrackInfo = {$: 'ToolTrackInfo'};
var $author$project$ToolsController$trackInfoBox = {
	dock: $author$project$ToolsController$DockUpperLeft,
	info: 'Here is some useful information',
	isPopupOpen: false,
	label: 'Information',
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
	toolType: $author$project$ToolsController$ToolTrackInfo,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$ToolUndoRedo = {$: 'ToolUndoRedo'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$sunFlower = A3($mdgriffith$elm_ui$Element$rgb255, 241, 196, 15);
var $author$project$ToolsController$undoRedoTool = {
	dock: $author$project$ToolsController$DockUpperRight,
	info: 'Like time travel',
	isPopupOpen: false,
	label: 'Undo & Redo',
	state: $author$project$ToolsController$Expanded,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$sunFlower,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$sunFlower),
	toolType: $author$project$ToolsController$ToolUndoRedo,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$defaultTools = _List_fromArray(
	[$author$project$ToolsController$pointersTool, $author$project$ToolsController$undoRedoTool, $author$project$ToolsController$trackInfoBox, $author$project$ToolsController$displaySettingsTool, $author$project$ToolsController$directionChangeTool, $author$project$ToolsController$gradientChangeTool, $author$project$ToolsController$deleteTool, $author$project$ToolsController$bezierSplinesTool, $author$project$ToolsController$centroidAverageTool, $author$project$ToolsController$curveFormerTool, $author$project$ToolsController$bendSmootherTool, $author$project$ToolsController$nudgeTool, $author$project$ToolsController$outAndBackTool, $author$project$ToolsController$simplifyTool, $author$project$ToolsController$interpolateTool, $author$project$ToolsController$limitGradientTool]);
var $author$project$ToolsController$defaultOptions = {bendSmootherOptions: $author$project$Tools$BendSmoother$defaultOptions, bezierSplineOptions: $author$project$Tools$BezierSplines$defaultOptions, centroidAverageOptions: $author$project$Tools$CentroidAverage$defaultOptions, curveFormerOptions: $author$project$Tools$CurveFormer$defaultOptions, deleteOptions: $author$project$Tools$DeletePoints$defaultOptions, directionChangeOptions: $author$project$Tools$DirectionChanges$defaultOptions, displaySettings: $author$project$Tools$DisplaySettings$defaultOptions, gradientProblemOptions: $author$project$Tools$GradientProblems$defaultOptions, imperial: false, infoOptions: $author$project$Tools$TrackInfoBox$defaultOptions, interpolateSettings: $author$project$Tools$Interpolate$defaultOptions, limitGradientSettings: $author$project$Tools$LimitGradients$defaultOptions, nudgeOptions: $author$project$Tools$Nudge$defaultOptions, outAndBackSettings: $author$project$Tools$OutAndBack$defaultOptions, pointerOptions: $author$project$Tools$Pointers$defaultOptions, simplifySettings: $author$project$Tools$Simplify$defaultOptions, tools: $author$project$ToolsController$defaultTools, undoRedoOptions: $author$project$Tools$UndoRedo$defaultOptions};
var $elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$here = _Time_here(_Utils_Tuple0);
var $author$project$SplitPane$SplitPane$Draggable = function (a) {
	return {$: 'Draggable', a: a};
};
var $author$project$SplitPane$SplitPane$Percentage = function (a) {
	return {$: 'Percentage', a: a};
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $author$project$SplitPane$Bound$createBound = F2(
	function (a, b) {
		return _Utils_Tuple2(
			A2($elm$core$Basics$min, a, b),
			A2($elm$core$Basics$max, a, b));
	});
var $author$project$SplitPane$Bound$boundTo = function (_v0) {
	var a = _v0.a;
	var b = _v0.b;
	return A2(
		$elm$core$Basics$composeL,
		$elm$core$Basics$min(b),
		$elm$core$Basics$max(a));
};
var $author$project$SplitPane$Bound$putValue = F2(
	function (_v0, value) {
		var bound = _v0.b;
		return _Utils_Tuple2(
			A2($author$project$SplitPane$Bound$boundTo, bound, value),
			bound);
	});
var $author$project$SplitPane$Bound$createBounded = F2(
	function (value, bound) {
		return A2(
			$author$project$SplitPane$Bound$putValue,
			_Utils_Tuple2(value, bound),
			value);
	});
var $author$project$SplitPane$SplitPane$percentage = F2(
	function (x, bound) {
		var newBound = function () {
			if (bound.$ === 'Just') {
				var _v1 = bound.a;
				var lower = _v1.a;
				var upper = _v1.b;
				return A2($author$project$SplitPane$Bound$createBound, lower, upper);
			} else {
				return A2($author$project$SplitPane$Bound$createBound, 0.0, 1.0);
			}
		}();
		return $author$project$SplitPane$SplitPane$Percentage(
			A2($author$project$SplitPane$Bound$createBounded, x, newBound));
	});
var $author$project$SplitPane$SplitPane$init = function (o) {
	return $author$project$SplitPane$SplitPane$State(
		{
			dragState: $author$project$SplitPane$SplitPane$Draggable($elm$core$Maybe$Nothing),
			orientation: o,
			splitterPosition: A2($author$project$SplitPane$SplitPane$percentage, 0.5, $elm$core$Maybe$Nothing)
		});
};
var $author$project$OAuthTypes$AccessTokenRequested = {$: 'AccessTokenRequested'};
var $author$project$OAuthTypes$Authorized = function (a) {
	return {$: 'Authorized', a: a};
};
var $author$project$OAuthTypes$ErrAuthorization = function (a) {
	return {$: 'ErrAuthorization', a: a};
};
var $author$project$OAuthTypes$ErrStateMismatch = {$: 'ErrStateMismatch'};
var $author$project$OAuthTypes$Errored = function (a) {
	return {$: 'Errored', a: a};
};
var $author$project$OAuthTypes$Idle = {$: 'Idle'};
var $elm$core$Process$sleep = _Process_sleep;
var $andrewMacmurray$elm_delay$Delay$after = F2(
	function (time, msg) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always(msg),
			$elm$core$Process$sleep(time));
	});
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$OAuth$Internal$AuthorizationError = F4(
	function (error, errorDescription, errorUri, state) {
		return {error: error, errorDescription: errorDescription, errorUri: errorUri, state: state};
	});
var $elm$url$Url$Parser$Internal$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$Query$custom = F2(
	function (key, func) {
		return $elm$url$Url$Parser$Internal$Parser(
			function (dict) {
				return func(
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Dict$get, key, dict)));
			});
	});
var $elm$url$Url$Parser$Query$string = function (key) {
	return A2(
		$elm$url$Url$Parser$Query$custom,
		key,
		function (stringList) {
			if (stringList.b && (!stringList.b.b)) {
				var str = stringList.a;
				return $elm$core$Maybe$Just(str);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		});
};
var $author$project$OAuth$Internal$errorDescriptionParser = $elm$url$Url$Parser$Query$string('error_description');
var $author$project$OAuth$Internal$errorUriParser = $elm$url$Url$Parser$Query$string('error_uri');
var $elm$url$Url$Parser$Query$map3 = F4(
	function (func, _v0, _v1, _v2) {
		var a = _v0.a;
		var b = _v1.a;
		var c = _v2.a;
		return $elm$url$Url$Parser$Internal$Parser(
			function (dict) {
				return A3(
					func,
					a(dict),
					b(dict),
					c(dict));
			});
	});
var $author$project$OAuth$Internal$stateParser = $elm$url$Url$Parser$Query$string('state');
var $author$project$OAuth$Internal$authorizationErrorParser = function (errorCode) {
	return A4(
		$elm$url$Url$Parser$Query$map3,
		$author$project$OAuth$Internal$AuthorizationError(errorCode),
		$author$project$OAuth$Internal$errorDescriptionParser,
		$author$project$OAuth$Internal$errorUriParser,
		$author$project$OAuth$Internal$stateParser);
};
var $author$project$OAuth$AuthorizationCode$defaultAuthorizationErrorParser = $author$project$OAuth$Internal$authorizationErrorParser;
var $author$project$OAuth$AuthorizationCode$AuthorizationSuccess = F2(
	function (code, state) {
		return {code: code, state: state};
	});
var $elm$url$Url$Parser$Query$map = F2(
	function (func, _v0) {
		var a = _v0.a;
		return $elm$url$Url$Parser$Internal$Parser(
			function (dict) {
				return func(
					a(dict));
			});
	});
var $author$project$OAuth$AuthorizationCode$defaultAuthorizationSuccessParser = function (code) {
	return A2(
		$elm$url$Url$Parser$Query$map,
		$author$project$OAuth$AuthorizationCode$AuthorizationSuccess(code),
		$author$project$OAuth$Internal$stateParser);
};
var $author$project$OAuth$AuthorizationCode$defaultCodeParser = $elm$url$Url$Parser$Query$string('code');
var $author$project$OAuth$AccessDenied = {$: 'AccessDenied'};
var $author$project$OAuth$Custom = function (a) {
	return {$: 'Custom', a: a};
};
var $author$project$OAuth$InvalidRequest = {$: 'InvalidRequest'};
var $author$project$OAuth$InvalidScope = {$: 'InvalidScope'};
var $author$project$OAuth$ServerError = {$: 'ServerError'};
var $author$project$OAuth$TemporarilyUnavailable = {$: 'TemporarilyUnavailable'};
var $author$project$OAuth$UnauthorizedClient = {$: 'UnauthorizedClient'};
var $author$project$OAuth$UnsupportedResponseType = {$: 'UnsupportedResponseType'};
var $author$project$OAuth$errorCodeFromString = function (str) {
	switch (str) {
		case 'invalid_request':
			return $author$project$OAuth$InvalidRequest;
		case 'unauthorized_client':
			return $author$project$OAuth$UnauthorizedClient;
		case 'access_denied':
			return $author$project$OAuth$AccessDenied;
		case 'unsupported_response_type':
			return $author$project$OAuth$UnsupportedResponseType;
		case 'invalid_scope':
			return $author$project$OAuth$InvalidScope;
		case 'server_error':
			return $author$project$OAuth$ServerError;
		case 'temporarily_unavailable':
			return $author$project$OAuth$TemporarilyUnavailable;
		default:
			return $author$project$OAuth$Custom(str);
	}
};
var $author$project$OAuth$Internal$errorParser = function (errorCodeFromString) {
	return A2(
		$elm$url$Url$Parser$Query$map,
		$elm$core$Maybe$map(errorCodeFromString),
		$elm$url$Url$Parser$Query$string('error'));
};
var $author$project$OAuth$AuthorizationCode$defaultErrorParser = $author$project$OAuth$Internal$errorParser($author$project$OAuth$errorCodeFromString);
var $author$project$OAuth$AuthorizationCode$defaultParsers = {authorizationErrorParser: $author$project$OAuth$AuthorizationCode$defaultAuthorizationErrorParser, authorizationSuccessParser: $author$project$OAuth$AuthorizationCode$defaultAuthorizationSuccessParser, codeParser: $author$project$OAuth$AuthorizationCode$defaultCodeParser, errorParser: $author$project$OAuth$AuthorizationCode$defaultErrorParser};
var $author$project$OAuth$AuthorizationCode$Empty = {$: 'Empty'};
var $author$project$OAuth$AuthorizationCode$Error = function (a) {
	return {$: 'Error', a: a};
};
var $author$project$OAuth$AuthorizationCode$Success = function (a) {
	return {$: 'Success', a: a};
};
var $elm$url$Url$Parser$Query$map2 = F3(
	function (func, _v0, _v1) {
		var a = _v0.a;
		var b = _v1.a;
		return $elm$url$Url$Parser$Internal$Parser(
			function (dict) {
				return A2(
					func,
					a(dict),
					b(dict));
			});
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $elm$url$Url$Parser$State = F5(
	function (visited, unvisited, params, frag, value) {
		return {frag: frag, params: params, unvisited: unvisited, value: value, visited: visited};
	});
var $elm$url$Url$Parser$getFirstMatch = function (states) {
	getFirstMatch:
	while (true) {
		if (!states.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var state = states.a;
			var rest = states.b;
			var _v1 = state.unvisited;
			if (!_v1.b) {
				return $elm$core$Maybe$Just(state.value);
			} else {
				if ((_v1.a === '') && (!_v1.b.b)) {
					return $elm$core$Maybe$Just(state.value);
				} else {
					var $temp$states = rest;
					states = $temp$states;
					continue getFirstMatch;
				}
			}
		}
	}
};
var $elm$url$Url$Parser$removeFinalEmpty = function (segments) {
	if (!segments.b) {
		return _List_Nil;
	} else {
		if ((segments.a === '') && (!segments.b.b)) {
			return _List_Nil;
		} else {
			var segment = segments.a;
			var rest = segments.b;
			return A2(
				$elm$core$List$cons,
				segment,
				$elm$url$Url$Parser$removeFinalEmpty(rest));
		}
	}
};
var $elm$url$Url$Parser$preparePath = function (path) {
	var _v0 = A2($elm$core$String$split, '/', path);
	if (_v0.b && (_v0.a === '')) {
		var segments = _v0.b;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	} else {
		var segments = _v0;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	}
};
var $elm$url$Url$Parser$addToParametersHelp = F2(
	function (value, maybeList) {
		if (maybeList.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				_List_fromArray(
					[value]));
		} else {
			var list = maybeList.a;
			return $elm$core$Maybe$Just(
				A2($elm$core$List$cons, value, list));
		}
	});
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$url$Url$Parser$addParam = F2(
	function (segment, dict) {
		var _v0 = A2($elm$core$String$split, '=', segment);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var rawKey = _v0.a;
			var _v1 = _v0.b;
			var rawValue = _v1.a;
			var _v2 = $elm$url$Url$percentDecode(rawKey);
			if (_v2.$ === 'Nothing') {
				return dict;
			} else {
				var key = _v2.a;
				var _v3 = $elm$url$Url$percentDecode(rawValue);
				if (_v3.$ === 'Nothing') {
					return dict;
				} else {
					var value = _v3.a;
					return A3(
						$elm$core$Dict$update,
						key,
						$elm$url$Url$Parser$addToParametersHelp(value),
						dict);
				}
			}
		} else {
			return dict;
		}
	});
var $elm$url$Url$Parser$prepareQuery = function (maybeQuery) {
	if (maybeQuery.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var qry = maybeQuery.a;
		return A3(
			$elm$core$List$foldr,
			$elm$url$Url$Parser$addParam,
			$elm$core$Dict$empty,
			A2($elm$core$String$split, '&', qry));
	}
};
var $elm$url$Url$Parser$parse = F2(
	function (_v0, url) {
		var parser = _v0.a;
		return $elm$url$Url$Parser$getFirstMatch(
			parser(
				A5(
					$elm$url$Url$Parser$State,
					_List_Nil,
					$elm$url$Url$Parser$preparePath(url.path),
					$elm$url$Url$Parser$prepareQuery(url.query),
					url.fragment,
					$elm$core$Basics$identity)));
	});
var $elm$url$Url$Parser$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$query = function (_v0) {
	var queryParser = _v0.a;
	return $elm$url$Url$Parser$Parser(
		function (_v1) {
			var visited = _v1.visited;
			var unvisited = _v1.unvisited;
			var params = _v1.params;
			var frag = _v1.frag;
			var value = _v1.value;
			return _List_fromArray(
				[
					A5(
					$elm$url$Url$Parser$State,
					visited,
					unvisited,
					params,
					frag,
					value(
						queryParser(params)))
				]);
		});
};
var $author$project$OAuth$Internal$parseUrlQuery = F3(
	function (url, def, parser) {
		return A2(
			$elm$core$Maybe$withDefault,
			def,
			A2(
				$elm$url$Url$Parser$parse,
				$elm$url$Url$Parser$query(parser),
				url));
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$url$Url$Parser$slash = F2(
	function (_v0, _v1) {
		var parseBefore = _v0.a;
		var parseAfter = _v1.a;
		return $elm$url$Url$Parser$Parser(
			function (state) {
				return A2(
					$elm$core$List$concatMap,
					parseAfter,
					parseBefore(state));
			});
	});
var $elm$url$Url$Parser$questionMark = F2(
	function (parser, queryParser) {
		return A2(
			$elm$url$Url$Parser$slash,
			parser,
			$elm$url$Url$Parser$query(queryParser));
	});
var $elm$url$Url$Parser$top = $elm$url$Url$Parser$Parser(
	function (state) {
		return _List_fromArray(
			[state]);
	});
var $author$project$OAuth$AuthorizationCode$parseCodeWith = F2(
	function (_v0, url_) {
		var codeParser = _v0.codeParser;
		var errorParser = _v0.errorParser;
		var authorizationSuccessParser = _v0.authorizationSuccessParser;
		var authorizationErrorParser = _v0.authorizationErrorParser;
		var url = _Utils_update(
			url_,
			{path: '/'});
		var _v1 = A2(
			$elm$url$Url$Parser$parse,
			A2(
				$elm$url$Url$Parser$questionMark,
				$elm$url$Url$Parser$top,
				A3($elm$url$Url$Parser$Query$map2, $elm$core$Tuple$pair, codeParser, errorParser)),
			url);
		_v1$2:
		while (true) {
			if (_v1.$ === 'Just') {
				if (_v1.a.a.$ === 'Just') {
					var _v2 = _v1.a;
					var code = _v2.a.a;
					return A3(
						$author$project$OAuth$Internal$parseUrlQuery,
						url,
						$author$project$OAuth$AuthorizationCode$Empty,
						A2(
							$elm$url$Url$Parser$Query$map,
							$author$project$OAuth$AuthorizationCode$Success,
							authorizationSuccessParser(code)));
				} else {
					if (_v1.a.b.$ === 'Just') {
						var _v3 = _v1.a;
						var error = _v3.b.a;
						return A3(
							$author$project$OAuth$Internal$parseUrlQuery,
							url,
							$author$project$OAuth$AuthorizationCode$Empty,
							A2(
								$elm$url$Url$Parser$Query$map,
								$author$project$OAuth$AuthorizationCode$Error,
								authorizationErrorParser(error)));
					} else {
						break _v1$2;
					}
				}
			} else {
				break _v1$2;
			}
		}
		return $author$project$OAuth$AuthorizationCode$Empty;
	});
var $author$project$OAuth$AuthorizationCode$parseCode = $author$project$OAuth$AuthorizationCode$parseCodeWith($author$project$OAuth$AuthorizationCode$defaultParsers);
var $elm$browser$Browser$Navigation$replaceUrl = _Browser_replaceUrl;
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.protocol;
		if (_v0.$ === 'Http') {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var $author$project$StravaAuth$init = F4(
	function (mflags, origin, navigationKey, wrapperMsg) {
		var redirectUri = _Utils_update(
			origin,
			{fragment: $elm$core$Maybe$Nothing, query: $elm$core$Maybe$Nothing});
		var clearUrl = A2(
			$elm$browser$Browser$Navigation$replaceUrl,
			navigationKey,
			$elm$url$Url$toString(redirectUri));
		var _v0 = $author$project$OAuth$AuthorizationCode$parseCode(origin);
		switch (_v0.$) {
			case 'Empty':
				return _Utils_Tuple2(
					{flow: $author$project$OAuthTypes$Idle, redirectUri: redirectUri},
					$elm$core$Platform$Cmd$none);
			case 'Success':
				var code = _v0.a.code;
				var state = _v0.a.state;
				if (mflags.$ === 'Nothing') {
					return _Utils_Tuple2(
						{
							flow: $author$project$OAuthTypes$Errored($author$project$OAuthTypes$ErrStateMismatch),
							redirectUri: redirectUri
						},
						clearUrl);
				} else {
					var flags = mflags.a;
					return (!_Utils_eq(
						state,
						$elm$core$Maybe$Just(flags.state))) ? _Utils_Tuple2(
						{
							flow: $author$project$OAuthTypes$Errored($author$project$OAuthTypes$ErrStateMismatch),
							redirectUri: redirectUri
						},
						clearUrl) : _Utils_Tuple2(
						{
							flow: $author$project$OAuthTypes$Authorized(code),
							redirectUri: redirectUri
						},
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2(
									$andrewMacmurray$elm_delay$Delay$after,
									50,
									wrapperMsg($author$project$OAuthTypes$AccessTokenRequested)),
									clearUrl
								])));
				}
			default:
				var error = _v0.a;
				return _Utils_Tuple2(
					{
						flow: $author$project$OAuthTypes$Errored(
							$author$project$OAuthTypes$ErrAuthorization(error)),
						redirectUri: redirectUri
					},
					clearUrl);
		}
	});
var $author$project$About$introText = '\nThank you for testing **GPXmagic v3**. It\'s very much the same but with a\nnew core engine, and a new "pro" look and feel.\n\nThe main drivers here are speed, stability, and customisation.\nIn other words, it should be (mostly) faster, handle more complex routes, and\nmake it easier for you to organise tools your way.\n\nThere are some new tools in the pipeline but the priority is to migrate most\nof the existing tools, maybe fixing some bugs in the process.\n\n**Please** do not post problems on FaceBook; it\'s impossible to keep track. It\'s better\n(for now) if you email me peter@stepwiserefinement.co.uk.\n\nif you have a GitHub account, you can also post issues, see current issues, and ask questions at\nhttps://github.com/peterjamesward/GPXmagicV3/issues\n\n    ';
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $ianmackenzie$elm_units$Pixels$pixels = function (numPixels) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numPixels);
};
var $author$project$SplitPane$SplitPane$Px = function (a) {
	return {$: 'Px', a: a};
};
var $author$project$SplitPane$SplitPane$px = F2(
	function (x, bound) {
		var newBound = function () {
			if (bound.$ === 'Just') {
				var _v1 = bound.a;
				var lower = _v1.a;
				var upper = _v1.b;
				return A2($author$project$SplitPane$Bound$createBound, lower, upper);
			} else {
				return A2($author$project$SplitPane$Bound$createBound, 0, 9999999999);
			}
		}();
		return $author$project$SplitPane$SplitPane$Px(
			A2($author$project$SplitPane$Bound$createBounded, x, newBound));
	});
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$silver = A3($mdgriffith$elm_ui$Element$rgb255, 189, 195, 199);
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $author$project$LocalStorage$storageCommands = _Platform_outgoingPort('storageCommands', $elm$core$Basics$identity);
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$LocalStorage$storageGetItem = function (key) {
	return $author$project$LocalStorage$storageCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('storage.get')),
					_Utils_Tuple2(
					'key',
					$elm$json$Json$Encode$string(key))
				])));
};
var $author$project$LocalStorage$storageGetMemoryUsage = $author$project$LocalStorage$storageCommands(
	$elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'Cmd',
				$elm$json$Json$Encode$string('memory'))
			])));
var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
var $author$project$Main$init = F3(
	function (mflags, origin, navigationKey) {
		var _v0 = A4($author$project$StravaAuth$init, mflags, origin, navigationKey, $author$project$Main$OAuthMessage);
		var authData = _v0.a;
		var authCmd = _v0.b;
		return _Utils_Tuple2(
			{
				backgroundColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$silver,
				bottomDockTopEdge: A2(
					$author$project$SplitPane$SplitPane$configureSplitter,
					A2(
						$author$project$SplitPane$SplitPane$px,
						500 - 200,
						$elm$core$Maybe$Just(
							_Utils_Tuple2(300, 570))),
					$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Vertical)),
				contentArea: _Utils_Tuple2(
					$ianmackenzie$elm_units$Pixels$pixels(800),
					$ianmackenzie$elm_units$Pixels$pixels(500)),
				filename: $elm$core$Maybe$Nothing,
				ipInfo: $elm$core$Maybe$Nothing,
				isPopupOpen: false,
				leftDockInternal: A2(
					$author$project$SplitPane$SplitPane$configureSplitter,
					A2(
						$author$project$SplitPane$SplitPane$px,
						400,
						$elm$core$Maybe$Just(
							_Utils_Tuple2(50, 600))),
					$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Vertical)),
				leftDockRightEdge: A2(
					$author$project$SplitPane$SplitPane$configureSplitter,
					A2(
						$author$project$SplitPane$SplitPane$px,
						200,
						$elm$core$Maybe$Just(
							_Utils_Tuple2(20, 200))),
					$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal)),
				modalMessage: $elm$core$Maybe$Just($author$project$About$introText),
				paneLayoutOptions: $author$project$PaneLayoutManager$defaultOptions,
				previews: $elm$core$Dict$empty,
				rightDockInternal: A2(
					$author$project$SplitPane$SplitPane$configureSplitter,
					A2(
						$author$project$SplitPane$SplitPane$px,
						400,
						$elm$core$Maybe$Just(
							_Utils_Tuple2(50, 600))),
					$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Vertical)),
				rightDockLeftEdge: A2(
					$author$project$SplitPane$SplitPane$configureSplitter,
					A2(
						$author$project$SplitPane$SplitPane$px,
						800 - 200,
						$elm$core$Maybe$Just(
							_Utils_Tuple2(600, 990))),
					$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal)),
				stravaAuthentication: authData,
				time: $elm$time$Time$millisToPosix(0),
				toolOptions: $author$project$ToolsController$defaultOptions,
				track: $elm$core$Maybe$Nothing,
				windowSize: _Utils_Tuple2(1000, 800),
				zone: $elm$time$Time$utc
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						authCmd,
						A2($elm$core$Task$perform, $author$project$Main$AdjustTimeZone, $elm$time$Time$here),
						A2($elm$core$Task$attempt, $author$project$Main$GotWindowSize, $elm$browser$Browser$Dom$getViewport),
						$author$project$LocalStorage$storageGetItem('splits'),
						$author$project$LocalStorage$storageGetItem('tools'),
						$author$project$LocalStorage$storageGetItem('panes'),
						$author$project$LocalStorage$storageGetItem('measure'),
						$author$project$LocalStorage$storageGetItem('background'),
						$author$project$LocalStorage$storageGetItem('visuals'),
						$author$project$LocalStorage$storageGetMemoryUsage
					])));
	});
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $author$project$OAuthTypes$GotRandomBytes = function (a) {
	return {$: 'GotRandomBytes', a: a};
};
var $author$project$MapPortController$MapPortMessage = function (a) {
	return {$: 'MapPortMessage', a: a};
};
var $author$project$PaneLayoutManager$MapPortsMessage = function (a) {
	return {$: 'MapPortsMessage', a: a};
};
var $author$project$Main$PaneMsg = function (a) {
	return {$: 'PaneMsg', a: a};
};
var $author$project$Main$Resize = F2(
	function (a, b) {
		return {$: 'Resize', a: a, b: b};
	});
var $author$project$Main$SplitBottomDockTopEdge = function (a) {
	return {$: 'SplitBottomDockTopEdge', a: a};
};
var $author$project$Main$SplitLeftDockInternal = function (a) {
	return {$: 'SplitLeftDockInternal', a: a};
};
var $author$project$Main$SplitLeftDockRightEdge = function (a) {
	return {$: 'SplitLeftDockRightEdge', a: a};
};
var $author$project$Main$SplitRightDockInternal = function (a) {
	return {$: 'SplitRightDockInternal', a: a};
};
var $author$project$Main$SplitRightDockLeftEdge = function (a) {
	return {$: 'SplitRightDockLeftEdge', a: a};
};
var $author$project$Main$StorageMessage = function (a) {
	return {$: 'StorageMessage', a: a};
};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$MapPortController$mapResponses = _Platform_incomingPort('mapResponses', $elm$json$Json$Decode$value);
var $elm$browser$Browser$Events$Window = {$: 'Window'};
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Window,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $author$project$OAuthPorts$randomBytes = _Platform_incomingPort(
	'randomBytes',
	$elm$json$Json$Decode$list($elm$json$Json$Decode$int));
var $author$project$LocalStorage$storageResponses = _Platform_incomingPort('storageResponses', $elm$json$Json$Decode$value);
var $author$project$SplitPane$SplitPane$Position = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var $author$project$SplitPane$SplitPane$SplitterLeftAlone = function (a) {
	return {$: 'SplitterLeftAlone', a: a};
};
var $author$project$SplitPane$SplitPane$SplitterMove = function (a) {
	return {$: 'SplitterMove', a: a};
};
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $elm$browser$Browser$Events$Document = {$: 'Document'};
var $elm$browser$Browser$Events$onMouseMove = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'mousemove');
var $elm$browser$Browser$Events$onMouseUp = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'mouseup');
var $author$project$SplitPane$SplitPane$subscriptions = function (_v0) {
	var state = _v0.a;
	var _v1 = state.dragState;
	if ((_v1.$ === 'Draggable') && (_v1.a.$ === 'Just')) {
		return $elm$core$Platform$Sub$batch(
			_List_fromArray(
				[
					$elm$browser$Browser$Events$onMouseMove(
					A2(
						$elm$json$Json$Decode$map,
						$author$project$SplitPane$SplitPane$SplitterMove,
						A3(
							$elm$json$Json$Decode$map2,
							$author$project$SplitPane$SplitPane$Position,
							A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$int),
							A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$int)))),
					$elm$browser$Browser$Events$onMouseUp(
					A2(
						$elm$json$Json$Decode$map,
						$author$project$SplitPane$SplitPane$SplitterLeftAlone,
						A3(
							$elm$json$Json$Decode$map2,
							$author$project$SplitPane$SplitPane$Position,
							A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$int),
							A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$int))))
				]));
	} else {
		return $elm$core$Platform$Sub$none;
	}
};
var $author$project$Main$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$OAuthPorts$randomBytes(
				function (ints) {
					return $author$project$Main$OAuthMessage(
						$author$project$OAuthTypes$GotRandomBytes(ints));
				}),
				$author$project$MapPortController$mapResponses(
				A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, $author$project$Main$PaneMsg, $author$project$PaneLayoutManager$MapPortsMessage),
					$author$project$MapPortController$MapPortMessage)),
				$author$project$LocalStorage$storageResponses($author$project$Main$StorageMessage),
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$SplitLeftDockRightEdge,
				$author$project$SplitPane$SplitPane$subscriptions(model.leftDockRightEdge)),
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$SplitLeftDockInternal,
				$author$project$SplitPane$SplitPane$subscriptions(model.leftDockInternal)),
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$SplitRightDockLeftEdge,
				$author$project$SplitPane$SplitPane$subscriptions(model.rightDockLeftEdge)),
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$SplitRightDockInternal,
				$author$project$SplitPane$SplitPane$subscriptions(model.rightDockInternal)),
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$SplitBottomDockTopEdge,
				$author$project$SplitPane$SplitPane$subscriptions(model.bottomDockTopEdge)),
				$elm$browser$Browser$Events$onResize(
				F2(
					function (w, h) {
						return A2($author$project$Main$Resize, w, h);
					}))
			]));
};
var $author$project$DomainModel$GPXSource = F3(
	function (longitude, latitude, altitude) {
		return {altitude: altitude, latitude: latitude, longitude: longitude};
	});
var $author$project$Main$GpxLoaded = function (a) {
	return {$: 'GpxLoaded', a: a};
};
var $author$project$Main$GpxSelected = function (a) {
	return {$: 'GpxSelected', a: a};
};
var $author$project$Main$IpInfoAcknowledged = function (a) {
	return {$: 'IpInfoAcknowledged', a: a};
};
var $author$project$Actions$MapRefresh = {$: 'MapRefresh'};
var $author$project$Main$ReceivedIpDetails = function (a) {
	return {$: 'ReceivedIpDetails', a: a};
};
var $author$project$Actions$StoreLocally = F2(
	function (a, b) {
		return {$: 'StoreLocally', a: a, b: b};
	});
var $author$project$Main$ToolsMsg = function (a) {
	return {$: 'ToolsMsg', a: a};
};
var $author$project$Actions$TrackHasChanged = {$: 'TrackHasChanged'};
var $author$project$SplitPane$Bound$getValue = function (value) {
	return value.a;
};
var $author$project$SplitPane$SplitPane$getPosition = function (_v0) {
	var s = _v0.a;
	var _v1 = s.splitterPosition;
	if (_v1.$ === 'Percentage') {
		var percent = _v1.a;
		return $author$project$SplitPane$Bound$getValue(percent);
	} else {
		var pixels = _v1.a;
		return $author$project$SplitPane$Bound$getValue(pixels);
	}
};
var $elm$core$Basics$round = _Basics_round;
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $author$project$Main$adjustSpaceForContent = function (model) {
	var _v0 = _Utils_Tuple2(20, 80);
	var reservedWidth = _v0.a;
	var reservedHeight = _v0.b;
	var availableHeightPixels = $author$project$SplitPane$SplitPane$getPosition(model.bottomDockTopEdge) - reservedHeight;
	var availableWidthPixels = ($author$project$SplitPane$SplitPane$getPosition(model.rightDockLeftEdge) - $author$project$SplitPane$SplitPane$getPosition(model.leftDockRightEdge)) - reservedWidth;
	var _v1 = _Utils_Tuple2(model.windowSize.a, model.windowSize.b);
	var width = _v1.a;
	var height = _v1.b;
	return _Utils_update(
		model,
		{
			contentArea: _Utils_Tuple2(
				$ianmackenzie$elm_units$Pixels$pixels(
					$elm$core$Basics$round(availableWidthPixels)),
				$ianmackenzie$elm_units$Pixels$pixels(
					$elm$core$Basics$round(availableHeightPixels)))
		});
};
var $elm$core$Basics$truncate = _Basics_truncate;
var $author$project$Main$allocateSpaceForDocksAndContent = F3(
	function (newWidth, newHeight, model) {
		var currentRightInternal = $author$project$SplitPane$SplitPane$getPosition(model.rightDockInternal) | 0;
		var currentLeftSplit = $author$project$SplitPane$SplitPane$getPosition(model.leftDockRightEdge) | 0;
		var currentLeftInternal = $author$project$SplitPane$SplitPane$getPosition(model.leftDockInternal) | 0;
		var currentBottomSplit = $author$project$SplitPane$SplitPane$getPosition(model.bottomDockTopEdge) | 0;
		var _v0 = model.windowSize;
		var startWidth = _v0.a;
		var startHeight = _v0.b;
		var currentRightSplit = (startWidth | 0) - ($author$project$SplitPane$SplitPane$getPosition(model.rightDockLeftEdge) | 0);
		return $author$project$Main$adjustSpaceForContent(
			_Utils_update(
				model,
				{
					bottomDockTopEdge: A2(
						$author$project$SplitPane$SplitPane$configureSplitter,
						A2(
							$author$project$SplitPane$SplitPane$px,
							currentBottomSplit,
							$elm$core$Maybe$Just(
								_Utils_Tuple2(((newHeight * 2) / 3) | 0, newHeight - 75))),
						$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Vertical)),
					leftDockInternal: A2(
						$author$project$SplitPane$SplitPane$configureSplitter,
						A2(
							$author$project$SplitPane$SplitPane$px,
							currentLeftInternal,
							$elm$core$Maybe$Just(
								_Utils_Tuple2(50, newHeight - 75))),
						$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Vertical)),
					leftDockRightEdge: A2(
						$author$project$SplitPane$SplitPane$configureSplitter,
						A2(
							$author$project$SplitPane$SplitPane$px,
							currentLeftSplit,
							$elm$core$Maybe$Just(
								_Utils_Tuple2(20, (newWidth / 3) | 0))),
						$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal)),
					rightDockInternal: A2(
						$author$project$SplitPane$SplitPane$configureSplitter,
						A2(
							$author$project$SplitPane$SplitPane$px,
							currentRightInternal,
							$elm$core$Maybe$Just(
								_Utils_Tuple2(50, newHeight - 75))),
						$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Vertical)),
					rightDockLeftEdge: A2(
						$author$project$SplitPane$SplitPane$configureSplitter,
						A2(
							$author$project$SplitPane$SplitPane$px,
							newWidth - currentRightSplit,
							$elm$core$Maybe$Just(
								_Utils_Tuple2(((2 * newWidth) / 3) | 0, newWidth - 20))),
						$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal)),
					windowSize: _Utils_Tuple2(newWidth, newHeight)
				}));
	});
var $elm$json$Json$Encode$float = _Json_wrap;
var $author$project$MapPortController$mapCommands = _Platform_outgoingPort('mapCommands', $elm$core$Basics$identity);
var $author$project$MapboxKey$mapboxKey = 'pk.eyJ1IjoicGV0ZXJqYW1lc3dhcmQiLCJhIjoiY2tpdWswb3dsMm02bDMzcDMyNGw1bmh5aSJ9.Fk3ibin0PpeEGXlGsctP1g';
var $author$project$MapPortController$createMap = function (info) {
	return $author$project$MapPortController$mapCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('Init')),
					_Utils_Tuple2(
					'token',
					$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey)),
					_Utils_Tuple2(
					'lon',
					$elm$json$Json$Encode$float(info.centreLon)),
					_Utils_Tuple2(
					'lat',
					$elm$json$Json$Encode$float(info.centreLat)),
					_Utils_Tuple2(
					'zoom',
					$elm$json$Json$Encode$float(info.mapZoom))
				])));
};
var $author$project$ToolsController$encodeColour = function (colour) {
	var _v0 = $mdgriffith$elm_ui$Element$toRgb(colour);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'red',
				$elm$json$Json$Encode$float(red)),
				_Utils_Tuple2(
				'green',
				$elm$json$Json$Encode$float(green)),
				_Utils_Tuple2(
				'blue',
				$elm$json$Json$Encode$float(blue))
			]));
};
var $author$project$Main$encodeSplitValues = function (model) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'left',
				$elm$json$Json$Encode$float(
					$author$project$SplitPane$SplitPane$getPosition(model.leftDockRightEdge))),
				_Utils_Tuple2(
				'right',
				$elm$json$Json$Encode$float(
					$author$project$SplitPane$SplitPane$getPosition(model.rightDockLeftEdge))),
				_Utils_Tuple2(
				'bottom',
				$elm$json$Json$Encode$float(
					$author$project$SplitPane$SplitPane$getPosition(model.bottomDockTopEdge))),
				_Utils_Tuple2(
				'internalleft',
				$elm$json$Json$Encode$float(
					$author$project$SplitPane$SplitPane$getPosition(model.leftDockInternal))),
				_Utils_Tuple2(
				'internalright',
				$elm$json$Json$Encode$float(
					$author$project$SplitPane$SplitPane$getPosition(model.rightDockInternal)))
			]));
};
var $author$project$ToolsController$encodeDock = function (dock) {
	switch (dock.$) {
		case 'DockUpperLeft':
			return 'upperleft';
		case 'DockLowerLeft':
			return 'lowerleft';
		case 'DockUpperRight':
			return 'upperright';
		case 'DockLowerRight':
			return 'lowerright';
		case 'DockBottom':
			return 'bottom';
		default:
			return 'none';
	}
};
var $author$project$ToolsController$encodeState = function (state) {
	switch (state.$) {
		case 'Expanded':
			return 'expanded';
		case 'Contracted':
			return 'contracted';
		default:
			return 'disabled';
	}
};
var $author$project$ToolsController$encodeType = function (toolType) {
	switch (toolType.$) {
		case 'ToolTrackInfo':
			return 'ToolTrackInfo';
		case 'ToolAbruptDirectionChanges':
			return 'ToolAbruptDirectionChanges';
		case 'ToolDeletePoints':
			return 'ToolDeletePoints';
		case 'ToolPointers':
			return 'ToolPointers';
		case 'ToolUndoRedo':
			return 'ToolUndoRedo';
		case 'ToolBezierSplines':
			return 'ToolBezierSplines';
		case 'ToolCentroidAverage':
			return 'ToolCentroidAverage';
		case 'ToolCurveFormer':
			return 'ToolCurveFormer';
		case 'ToolBendSmoother':
			return 'ToolBendSmoother';
		case 'ToolNudge':
			return 'ToolNudge';
		case 'ToolGradientProblems':
			return 'ToolAbruptGradientChanges';
		case 'ToolDisplaySettings':
			return 'ToolDisplaySettings';
		case 'ToolOutAndBack':
			return 'ToolOutAndBack';
		case 'ToolSimplify':
			return 'ToolSimplify';
		case 'ToolInterpolate':
			return 'ToolInterpolate';
		default:
			return 'ToolLimitGradient';
	}
};
var $author$project$ToolsController$encodeOneTool = function (tool) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string(
					$author$project$ToolsController$encodeType(tool.toolType))),
				_Utils_Tuple2(
				'state',
				$elm$json$Json$Encode$string(
					$author$project$ToolsController$encodeState(tool.state))),
				_Utils_Tuple2(
				'dock',
				$elm$json$Json$Encode$string(
					$author$project$ToolsController$encodeDock(tool.dock))),
				_Utils_Tuple2(
				'tab',
				$author$project$ToolsController$encodeColour(tool.tabColour)),
				_Utils_Tuple2(
				'text',
				$author$project$ToolsController$encodeColour(tool.textColour))
			]));
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $author$project$ToolsController$encodeToolState = function (options) {
	return A2(
		$elm$json$Json$Encode$list,
		$elm$core$Basics$identity,
		A2($elm$core$List$map, $author$project$ToolsController$encodeOneTool, options.tools));
};
var $elm$core$String$endsWith = _String_endsWith;
var $elm$file$File$Select$file = F2(
	function (mimes, toMsg) {
		return A2(
			$elm$core$Task$perform,
			toMsg,
			_File_uploadOne(mimes));
	});
var $author$project$StravaAuth$getStravaToken = function (model) {
	var _v0 = model.flow;
	switch (_v0.$) {
		case 'Done':
			var info = _v0.a;
			var token = _v0.b;
			return $elm$core$Maybe$Just(token);
		case 'Authenticated':
			var token = _v0.a;
			return $elm$core$Maybe$Just(token);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$ViewMap$initialiseContext = function (currentContext) {
	if (currentContext.$ === 'Just') {
		var context = currentContext.a;
		return _Utils_update(
			context,
			{
				lastMapClick: _Utils_Tuple2(0, 0),
				mapClickDebounce: false
			});
	} else {
		return {
			draggable: false,
			followOrange: false,
			lastMapClick: _Utils_Tuple2(0, 0),
			mapClickDebounce: false
		};
	}
};
var $author$project$ViewPlan$DragNone = {$: 'DragNone'};
var $author$project$DomainModel$skipCount = function (treeNode) {
	if (treeNode.$ === 'Leaf') {
		var leaf = treeNode.a;
		return 1;
	} else {
		var node = treeNode.a;
		return node.nodeContent.skipCount;
	}
};
var $author$project$DomainModel$leafFromIndex = F2(
	function (index, treeNode) {
		leafFromIndex:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				var info = treeNode.a;
				return treeNode;
			} else {
				var info = treeNode.a;
				if (_Utils_cmp(
					index,
					$author$project$DomainModel$skipCount(info.left)) < 0) {
					var $temp$index = index,
						$temp$treeNode = info.left;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue leafFromIndex;
				} else {
					var $temp$index = index - $author$project$DomainModel$skipCount(info.left),
						$temp$treeNode = info.right;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue leafFromIndex;
				}
			}
		}
	});
var $author$project$DomainModel$asRecord = function (treeNode) {
	if (treeNode.$ === 'Leaf') {
		var section = treeNode.a;
		return section;
	} else {
		var node = treeNode.a;
		return node.nodeContent;
	}
};
var $author$project$DomainModel$startPoint = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).startPoint;
};
var $author$project$ViewPlan$initialiseView = F3(
	function (current, treeNode, currentContext) {
		if (currentContext.$ === 'Just') {
			var context = currentContext.a;
			return _Utils_update(
				context,
				{
					defaultZoomLevel: 12.0,
					dragAction: $author$project$ViewPlan$DragNone,
					fieldOfView: $ianmackenzie$elm_units$Angle$degrees(45),
					focalPoint: $author$project$DomainModel$startPoint(
						A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
					orbiting: $elm$core$Maybe$Nothing,
					waitingForClickDelay: false,
					zoomLevel: 12.0
				});
		} else {
			return {
				defaultZoomLevel: 12.0,
				dragAction: $author$project$ViewPlan$DragNone,
				fieldOfView: $ianmackenzie$elm_units$Angle$degrees(45),
				focalPoint: $author$project$DomainModel$startPoint(
					A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
				followSelectedPoint: true,
				orbiting: $elm$core$Maybe$Nothing,
				waitingForClickDelay: false,
				zoomLevel: 12.0
			};
		}
	});
var $author$project$ViewProfileCharts$DragNone = {$: 'DragNone'};
var $author$project$ViewProfileCharts$initialiseView = F3(
	function (current, treeNode, currentContext) {
		if (currentContext.$ === 'Just') {
			var context = currentContext.a;
			return _Utils_update(
				context,
				{
					defaultZoomLevel: 0.0,
					dragAction: $author$project$ViewProfileCharts$DragNone,
					focalPoint: $author$project$DomainModel$startPoint(
						A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
					metresPerPixel: 10.0,
					orbiting: $elm$core$Maybe$Nothing,
					waitingForClickDelay: false,
					zoomLevel: 0.0
				});
		} else {
			return {
				defaultZoomLevel: 0.0,
				dragAction: $author$project$ViewProfileCharts$DragNone,
				focalPoint: $author$project$DomainModel$startPoint(
					A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
				followSelectedPoint: true,
				gradientProblems: _List_Nil,
				imperial: false,
				metresPerPixel: 10.0,
				orbiting: $elm$core$Maybe$Nothing,
				previewData: _List_Nil,
				profileData: _List_Nil,
				waitingForClickDelay: false,
				zoomLevel: 0.0
			};
		}
	});
var $author$project$ViewThirdPerson$DragNone = {$: 'DragNone'};
var $ianmackenzie$elm_units$Length$kilometers = function (numKilometers) {
	return $ianmackenzie$elm_units$Length$meters(1000 * numKilometers);
};
var $ianmackenzie$elm_geometry$Geometry$Types$Direction2d = function (a) {
	return {$: 'Direction2d', a: a};
};
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $ianmackenzie$elm_geometry$Direction2d$negativeY = $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
	{x: 0, y: -1});
var $author$project$ViewThirdPerson$initialiseView = F3(
	function (current, treeNode, currentContext) {
		if (currentContext.$ === 'Just') {
			var context = currentContext.a;
			return _Utils_update(
				context,
				{
					cameraAzimuth: $ianmackenzie$elm_geometry$Direction2d$negativeY,
					cameraDistance: $ianmackenzie$elm_units$Length$kilometers(10),
					cameraElevation: $ianmackenzie$elm_units$Angle$degrees(30),
					defaultZoomLevel: 10.0,
					dragAction: $author$project$ViewThirdPerson$DragNone,
					fieldOfView: $ianmackenzie$elm_units$Angle$degrees(45),
					focalPoint: $author$project$DomainModel$startPoint(
						A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
					orbiting: $elm$core$Maybe$Nothing,
					waitingForClickDelay: false,
					zoomLevel: 10.0
				});
		} else {
			return {
				cameraAzimuth: $ianmackenzie$elm_geometry$Direction2d$negativeY,
				cameraDistance: $ianmackenzie$elm_units$Length$kilometers(10),
				cameraElevation: $ianmackenzie$elm_units$Angle$degrees(30),
				defaultZoomLevel: 10.0,
				dragAction: $author$project$ViewThirdPerson$DragNone,
				fieldOfView: $ianmackenzie$elm_units$Angle$degrees(45),
				focalPoint: $author$project$DomainModel$startPoint(
					A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
				followSelectedPoint: true,
				orbiting: $elm$core$Maybe$Nothing,
				waitingForClickDelay: false,
				zoomLevel: 10.0
			};
		}
	});
var $author$project$PaneLayoutManager$initialisePane = F3(
	function (track, options, pane) {
		return _Utils_update(
			pane,
			{
				mapContext: $elm$core$Maybe$Just(
					$author$project$ViewMap$initialiseContext(pane.mapContext)),
				planContext: $elm$core$Maybe$Just(
					A3($author$project$ViewPlan$initialiseView, 0, track.trackTree, pane.planContext)),
				profileContext: $elm$core$Maybe$Just(
					A3($author$project$ViewProfileCharts$initialiseView, 0, track.trackTree, pane.profileContext)),
				thirdPersonContext: $elm$core$Maybe$Just(
					A3($author$project$ViewThirdPerson$initialiseView, 0, track.trackTree, pane.thirdPersonContext))
			});
	});
var $author$project$PaneLayoutManager$initialise = F2(
	function (track, options) {
		return _Utils_update(
			options,
			{
				pane1: A3($author$project$PaneLayoutManager$initialisePane, track, options, options.pane1),
				pane2: A3($author$project$PaneLayoutManager$initialisePane, track, options, options.pane2),
				pane3: A3($author$project$PaneLayoutManager$initialisePane, track, options, options.pane3),
				pane4: A3($author$project$PaneLayoutManager$initialisePane, track, options, options.pane4)
			});
	});
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$file$File$name = _File_name;
var $elm$core$Basics$not = _Basics_not;
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $author$project$GpxParser$asRegex = function (t) {
	return A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString(t));
};
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $elm$core$Basics$cos = _Basics_cos;
var $elm$core$Basics$sin = _Basics_sin;
var $ianmackenzie$elm_geometry$Direction2d$fromAngle = function (_v0) {
	var angle = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
		{
			x: $elm$core$Basics$cos(angle),
			y: $elm$core$Basics$sin(angle)
		});
};
var $elm$core$String$toFloat = _String_toFloat;
var $author$project$GpxParser$parseGPXPoints = function (xml) {
	var value = function (x) {
		var _v12 = x.submatches;
		if (_v12.b && (_v12.a.$ === 'Just')) {
			var val = _v12.a.a;
			return $elm$core$String$toFloat(val);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var trkpts = A2(
		$elm$core$List$map,
		function ($) {
			return $.match;
		},
		A2(
			$elm$regex$Regex$find,
			$author$project$GpxParser$asRegex('<trkpt((.|\\n|\\r)*?)trkpt>'),
			xml));
	var matches = function (xs) {
		return A2($elm$core$List$map, value, xs);
	};
	var longitude = function (trkpt) {
		return matches(
			A2(
				$elm$regex$Regex$find,
				$author$project$GpxParser$asRegex('lon=\\\"([\\d\\.-]*)\\\"'),
				trkpt));
	};
	var latitude = function (trkpt) {
		return matches(
			A2(
				$elm$regex$Regex$find,
				$author$project$GpxParser$asRegex('lat=\\\"([\\d\\.-]*)\\\"'),
				trkpt));
	};
	var elevation = function (trkpt) {
		return matches(
			A2(
				$elm$regex$Regex$find,
				$author$project$GpxParser$asRegex('<ele>([\\d\\.-]*)<\\/ele>'),
				trkpt));
	};
	var trackPoint = function (trkpt) {
		var _v6 = _Utils_Tuple3(
			latitude(trkpt),
			longitude(trkpt),
			elevation(trkpt));
		if (((_v6.a.b && (_v6.a.a.$ === 'Just')) && _v6.b.b) && (_v6.b.a.$ === 'Just')) {
			if (_v6.c.b && (_v6.c.a.$ === 'Just')) {
				var _v7 = _v6.a;
				var lat = _v7.a.a;
				var _v8 = _v6.b;
				var lon = _v8.a.a;
				var _v9 = _v6.c;
				var ele = _v9.a.a;
				return $elm$core$Maybe$Just(
					{
						altitude: $ianmackenzie$elm_units$Length$meters(ele),
						latitude: $ianmackenzie$elm_units$Angle$degrees(lat),
						longitude: $ianmackenzie$elm_units$Angle$degrees(lon)
					});
			} else {
				var _v10 = _v6.a;
				var lat = _v10.a.a;
				var _v11 = _v6.b;
				var lon = _v11.a.a;
				return $elm$core$Maybe$Just(
					{
						altitude: $ianmackenzie$elm_units$Quantity$zero,
						latitude: $ianmackenzie$elm_units$Angle$degrees(lat),
						longitude: $ianmackenzie$elm_units$Angle$degrees(lon)
					});
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var earthVector = function (trkpt) {
		var _v0 = _Utils_Tuple3(
			latitude(trkpt),
			longitude(trkpt),
			elevation(trkpt));
		if (((_v0.a.b && (_v0.a.a.$ === 'Just')) && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
			if (_v0.c.b && (_v0.c.a.$ === 'Just')) {
				var _v1 = _v0.a;
				var lat = _v1.a.a;
				var _v2 = _v0.b;
				var lon = _v2.a.a;
				var _v3 = _v0.c;
				var alt = _v3.a.a;
				return $elm$core$Maybe$Just(
					A3(
						$author$project$DomainModel$GPXSource,
						$ianmackenzie$elm_geometry$Direction2d$fromAngle(
							$ianmackenzie$elm_units$Angle$degrees(lon)),
						$ianmackenzie$elm_units$Angle$degrees(lat),
						$ianmackenzie$elm_units$Length$meters(alt)));
			} else {
				var _v4 = _v0.a;
				var lat = _v4.a.a;
				var _v5 = _v0.b;
				var lon = _v5.a.a;
				return $elm$core$Maybe$Just(
					A3(
						$author$project$DomainModel$GPXSource,
						$ianmackenzie$elm_geometry$Direction2d$fromAngle(
							$ianmackenzie$elm_units$Angle$degrees(lon)),
						$ianmackenzie$elm_units$Angle$degrees(lat),
						$ianmackenzie$elm_units$Length$meters(0)));
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	return A2(
		$elm$core$List$filterMap,
		$elm$core$Basics$identity,
		A2($elm$core$List$map, earthVector, trkpts));
};
var $author$project$GpxParser$parseTrackName = function (xml) {
	var _v0 = A2(
		$elm$regex$Regex$find,
		$author$project$GpxParser$asRegex('<name>(.*)<\\/name>'),
		xml);
	if (!_v0.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var x = _v0.a;
		var _v1 = x.submatches;
		if (!_v1.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var n = _v1.a;
			return n;
		}
	}
};
var $author$project$Main$TimeToUpdateMemory = {$: 'TimeToUpdateMemory'};
var $author$project$DomainModel$gpxPointFromIndex = F2(
	function (index, treeNode) {
		gpxPointFromIndex:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				var info = treeNode.a;
				return (index <= 0) ? info.sourceData.a : info.sourceData.b;
			} else {
				var info = treeNode.a;
				if (_Utils_cmp(
					index,
					$author$project$DomainModel$skipCount(info.left)) < 0) {
					var $temp$index = index,
						$temp$treeNode = info.left;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue gpxPointFromIndex;
				} else {
					var $temp$index = index - $author$project$DomainModel$skipCount(info.left),
						$temp$treeNode = info.right;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue gpxPointFromIndex;
				}
			}
		}
	});
var $ianmackenzie$elm_units$Angle$inRadians = function (_v0) {
	var numRadians = _v0.a;
	return numRadians;
};
var $ianmackenzie$elm_units$Angle$inDegrees = function (angle) {
	return 180 * ($ianmackenzie$elm_units$Angle$inRadians(angle) / $elm$core$Basics$pi);
};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $elm$core$Basics$atan2 = _Basics_atan2;
var $ianmackenzie$elm_geometry$Direction2d$toAngle = function (_v0) {
	var d = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(
		A2($elm$core$Basics$atan2, d.y, d.x));
};
var $author$project$MapPortController$addMarkersToMap = function (track) {
	var encodePos = function (_v1) {
		var longitude = _v1.longitude;
		var latitude = _v1.latitude;
		var altitude = _v1.altitude;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'lon',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(
							$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude)))),
					_Utils_Tuple2(
					'lat',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(latitude)))
				]));
	};
	return $author$project$MapPortController$mapCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('Mark')),
					_Utils_Tuple2(
					'orange',
					encodePos(
						A2($author$project$DomainModel$gpxPointFromIndex, track.currentPosition, track.trackTree))),
					function () {
					var _v0 = track.markerPosition;
					if (_v0.$ === 'Just') {
						var mark = _v0.a;
						return _Utils_Tuple2(
							'purple',
							encodePos(
								A2($author$project$DomainModel$gpxPointFromIndex, mark, track.trackTree)));
					} else {
						return _Utils_Tuple2('ignore', $elm$json$Json$Encode$null);
					}
				}(),
					_Utils_Tuple2('previews', $elm$json$Json$Encode$null)
				])));
};
var $elm$core$Basics$ge = _Utils_ge;
var $ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return _Utils_cmp(x, y) > -1;
	});
var $ianmackenzie$elm_units$Quantity$lessThanOrEqualTo = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return _Utils_cmp(x, y) < 1;
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$maxX = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.maxX;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$maxY = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.maxY;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$maxZ = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.maxZ;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$minX = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.minX;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$minY = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.minY;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$minZ = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.minZ;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$intersects = F2(
	function (other, boundingBox) {
		return A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$maxX(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$minX(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$minX(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxX(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$maxY(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$minY(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$minY(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxY(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$maxZ(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$minZ(boundingBox)) && A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$minZ(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxZ(boundingBox))))));
	});
var $author$project$DomainModel$lngLatPair = function (_v0) {
	var longitude = _v0.a;
	var latitude = _v0.b;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$json$Json$Encode$float,
		_List_fromArray(
			[
				$ianmackenzie$elm_units$Angle$inDegrees(longitude),
				$ianmackenzie$elm_units$Angle$inDegrees(latitude)
			]));
};
var $author$project$SceneBuilderMap$mapLocation = function (point) {
	var _v0 = point;
	var longitude = _v0.longitude;
	var latitude = _v0.latitude;
	var altitude = _v0.altitude;
	return _Utils_Tuple3(
		$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude),
		latitude,
		altitude);
};
var $author$project$DomainModel$sourceData = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).sourceData;
};
var $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d = function (a) {
	return {$: 'BoundingBox3d', a: a};
};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $ianmackenzie$elm_units$Quantity$abs = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(
		$elm$core$Basics$abs(value));
};
var $ianmackenzie$elm_geometry$Point3d$coordinates = function (_v0) {
	var p = _v0.a;
	return _Utils_Tuple3(
		$ianmackenzie$elm_units$Quantity$Quantity(p.x),
		$ianmackenzie$elm_units$Quantity$Quantity(p.y),
		$ianmackenzie$elm_units$Quantity$Quantity(p.z));
};
var $ianmackenzie$elm_units$Quantity$half = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(0.5 * value);
};
var $ianmackenzie$elm_units$Quantity$minus = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(x - y);
	});
var $ianmackenzie$elm_units$Quantity$plus = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(x + y);
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$withDimensions = F2(
	function (_v0, givenCenterPoint) {
		var givenLength = _v0.a;
		var givenWidth = _v0.b;
		var givenHeight = _v0.c;
		var halfWidth = $ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$abs(givenWidth));
		var halfLength = $ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$abs(givenLength));
		var halfHeight = $ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$abs(givenHeight));
		var _v1 = $ianmackenzie$elm_geometry$Point3d$coordinates(givenCenterPoint);
		var x0 = _v1.a;
		var y0 = _v1.b;
		var z0 = _v1.c;
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
			{
				maxX: A2($ianmackenzie$elm_units$Quantity$plus, halfLength, x0),
				maxY: A2($ianmackenzie$elm_units$Quantity$plus, halfWidth, y0),
				maxZ: A2($ianmackenzie$elm_units$Quantity$plus, halfHeight, z0),
				minX: A2($ianmackenzie$elm_units$Quantity$minus, halfLength, x0),
				minY: A2($ianmackenzie$elm_units$Quantity$minus, halfWidth, y0),
				minZ: A2($ianmackenzie$elm_units$Quantity$minus, halfHeight, z0)
			});
	});
var $author$project$SceneBuilderMap$renderMapJson = function (track) {
	var renderFirstPoint = function (treeNode) {
		return $author$project$DomainModel$lngLatPair(
			$author$project$SceneBuilderMap$mapLocation(
				$author$project$DomainModel$sourceData(treeNode).a));
	};
	var makeVisibleSegment = function (node) {
		return $author$project$DomainModel$lngLatPair(
			$author$project$SceneBuilderMap$mapLocation(
				$author$project$DomainModel$sourceData(node).b));
	};
	var renderTree = F3(
		function (depth, someNode, accum) {
			if (someNode.$ === 'Leaf') {
				var leafNode = someNode.a;
				return A2(
					$elm$core$List$cons,
					makeVisibleSegment(someNode),
					accum);
			} else {
				var notLeaf = someNode.a;
				return (depth <= 0) ? A2(
					$elm$core$List$cons,
					makeVisibleSegment(someNode),
					accum) : A3(
					renderTree,
					depth - 1,
					notLeaf.left,
					A3(renderTree, depth - 1, notLeaf.right, accum));
			}
		});
	var renderTreeSelectively = F4(
		function (box, depth, someNode, accum) {
			if (someNode.$ === 'Leaf') {
				var leafNode = someNode.a;
				return A2(
					$elm$core$List$cons,
					makeVisibleSegment(someNode),
					accum);
			} else {
				var notLeaf = someNode.a;
				return A2($ianmackenzie$elm_geometry$BoundingBox3d$intersects, box, notLeaf.nodeContent.boundingBox) ? A4(
					renderTreeSelectively,
					box,
					depth - 1,
					notLeaf.left,
					A4(renderTreeSelectively, box, depth - 1, notLeaf.right, accum)) : A3(
					renderTree,
					depth - 1,
					notLeaf.left,
					A3(renderTree, depth - 1, notLeaf.right, accum));
			}
		});
	var current = $author$project$DomainModel$startPoint(
		A2($author$project$DomainModel$leafFromIndex, track.currentPosition, track.trackTree));
	var boxSide = $ianmackenzie$elm_units$Length$kilometers(4);
	var detailBox = A2(
		$ianmackenzie$elm_geometry$BoundingBox3d$withDimensions,
		_Utils_Tuple3(boxSide, boxSide, boxSide),
		current);
	var coordinates = A2(
		$elm$core$List$cons,
		renderFirstPoint(track.trackTree),
		A4(renderTreeSelectively, detailBox, track.renderDepth, track.trackTree, _List_Nil));
	var geometry = $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('LineString')),
				_Utils_Tuple2(
				'coordinates',
				A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, coordinates))
			]));
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('Feature')),
				_Utils_Tuple2(
				'properties',
				$elm$json$Json$Encode$object(_List_Nil)),
				_Utils_Tuple2('geometry', geometry)
			]));
};
var $author$project$DomainModel$earthPointFromIndex = F2(
	function (index, treeNode) {
		earthPointFromIndex:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				var info = treeNode.a;
				return (index <= 0) ? info.startPoint : info.endPoint;
			} else {
				var info = treeNode.a;
				if (_Utils_cmp(
					index,
					$author$project$DomainModel$skipCount(info.left)) < 0) {
					var $temp$index = index,
						$temp$treeNode = info.left;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue earthPointFromIndex;
				} else {
					var $temp$index = index - $author$project$DomainModel$skipCount(info.left),
						$temp$treeNode = info.right;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue earthPointFromIndex;
				}
			}
		}
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$unsafeOffsetBy = F2(
	function (amount, boundingBox) {
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
			{
				maxX: A2(
					$ianmackenzie$elm_units$Quantity$plus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$maxX(boundingBox)),
				maxY: A2(
					$ianmackenzie$elm_units$Quantity$plus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$maxY(boundingBox)),
				maxZ: A2(
					$ianmackenzie$elm_units$Quantity$plus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$maxZ(boundingBox)),
				minX: A2(
					$ianmackenzie$elm_units$Quantity$minus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$minX(boundingBox)),
				minY: A2(
					$ianmackenzie$elm_units$Quantity$minus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$minY(boundingBox)),
				minZ: A2(
					$ianmackenzie$elm_units$Quantity$minus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$minZ(boundingBox))
			});
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$expandBy = F2(
	function (amount, boundingBox) {
		return A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$unsafeOffsetBy,
			$ianmackenzie$elm_units$Quantity$abs(amount),
			boundingBox);
	});
var $author$project$DomainModel$getLastLeaf = function (someNode) {
	getLastLeaf:
	while (true) {
		if (someNode.$ === 'Leaf') {
			var leaf = someNode.a;
			return leaf;
		} else {
			var node = someNode.a;
			var $temp$someNode = node.right;
			someNode = $temp$someNode;
			continue getLastLeaf;
		}
	}
};
var $author$project$SceneBuilderMap$latLonPair = function (_v0) {
	var lon = _v0.a;
	var lat = _v0.b;
	var ele = _v0.c;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$json$Json$Encode$float,
		_List_fromArray(
			[
				$ianmackenzie$elm_units$Angle$inDegrees(lon),
				$ianmackenzie$elm_units$Angle$inDegrees(lat)
			]));
};
var $ianmackenzie$elm_geometry$Point3d$xCoordinate = function (_v0) {
	var p = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(p.x);
};
var $ianmackenzie$elm_geometry$Point3d$yCoordinate = function (_v0) {
	var p = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(p.y);
};
var $ianmackenzie$elm_geometry$Point3d$zCoordinate = function (_v0) {
	var p = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(p.z);
};
var $ianmackenzie$elm_geometry$BoundingBox3d$singleton = function (point) {
	return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
		{
			maxX: $ianmackenzie$elm_geometry$Point3d$xCoordinate(point),
			maxY: $ianmackenzie$elm_geometry$Point3d$yCoordinate(point),
			maxZ: $ianmackenzie$elm_geometry$Point3d$zCoordinate(point),
			minX: $ianmackenzie$elm_geometry$Point3d$xCoordinate(point),
			minY: $ianmackenzie$elm_geometry$Point3d$yCoordinate(point),
			minZ: $ianmackenzie$elm_geometry$Point3d$zCoordinate(point)
		});
};
var $author$project$DomainModel$traverseTreeBetweenLimitsToDepth = F7(
	function (startingAt, endingAt, depthFunction, currentDepth, thisNode, foldFn, accum) {
		var nodeData = $author$project$DomainModel$asRecord(thisNode);
		var start = _Utils_Tuple2(nodeData.startPoint, nodeData.sourceData.a);
		var end = _Utils_Tuple2(nodeData.endPoint, nodeData.sourceData.b);
		if (_Utils_cmp(
			startingAt,
			$author$project$DomainModel$skipCount(thisNode)) > -1) {
			return accum;
		} else {
			if (endingAt <= 0) {
				return accum;
			} else {
				if (thisNode.$ === 'Leaf') {
					var leafNode = thisNode.a;
					return A2(foldFn, leafNode, accum);
				} else {
					var node = thisNode.a;
					var maximumDepth = A2(
						$elm$core$Maybe$withDefault,
						999,
						depthFunction(node.nodeContent));
					return (_Utils_cmp(currentDepth, maximumDepth) > -1) ? A2(foldFn, node.nodeContent, accum) : A7(
						$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
						startingAt - $author$project$DomainModel$skipCount(node.left),
						endingAt - $author$project$DomainModel$skipCount(node.left),
						depthFunction,
						currentDepth + 1,
						node.right,
						foldFn,
						A7($author$project$DomainModel$traverseTreeBetweenLimitsToDepth, startingAt, endingAt, depthFunction, currentDepth + 1, node.left, foldFn, accum));
				}
			}
		}
	});
var $author$project$SceneBuilderMap$trackPointsToJSON = function (track) {
	var point = function (lonLat) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('Point')),
					_Utils_Tuple2(
					'coordinates',
					$author$project$SceneBuilderMap$latLonPair(lonLat))
				]));
	};
	var makeFeature = function (tp) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('Feature')),
					_Utils_Tuple2(
					'geometry',
					point(tp))
				]));
	};
	var missingLastPoint = makeFeature(
		$author$project$SceneBuilderMap$mapLocation(
			$author$project$DomainModel$getLastLeaf(track.trackTree).sourceData.b));
	var fullRenderBoxSize = $ianmackenzie$elm_units$Length$kilometers(4);
	var fullRenderBox = A2(
		$ianmackenzie$elm_geometry$BoundingBox3d$expandBy,
		fullRenderBoxSize,
		$ianmackenzie$elm_geometry$BoundingBox3d$singleton(
			A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree)));
	var foldFn = F2(
		function (road, output) {
			var _v0 = $author$project$SceneBuilderMap$mapLocation(road.sourceData.a);
			var lon = _v0.a;
			var lat = _v0.b;
			var alt = _v0.c;
			return A2(
				$elm$core$List$cons,
				makeFeature(
					_Utils_Tuple3(lon, lat, alt)),
				output);
		});
	var depthFn = function (road) {
		return A2($ianmackenzie$elm_geometry$BoundingBox3d$intersects, fullRenderBox, road.boundingBox) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(10);
	};
	var features = A2(
		$elm$core$List$cons,
		missingLastPoint,
		A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(track.trackTree),
			depthFn,
			0,
			track.trackTree,
			foldFn,
			_List_Nil));
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('FeatureCollection')),
				_Utils_Tuple2(
				'features',
				A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, features))
			]));
};
var $author$project$MapPortController$addTrackToMap = function (track) {
	var _v0 = A2($author$project$DomainModel$gpxPointFromIndex, track.currentPosition, track.trackTree);
	var longitude = _v0.longitude;
	var latitude = _v0.latitude;
	var altitude = _v0.altitude;
	return $author$project$MapPortController$mapCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('Track')),
					_Utils_Tuple2(
					'token',
					$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey)),
					_Utils_Tuple2(
					'lon',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(
							$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude)))),
					_Utils_Tuple2(
					'lat',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(latitude))),
					_Utils_Tuple2(
					'zoom',
					$elm$json$Json$Encode$float(10.0)),
					_Utils_Tuple2(
					'data',
					$author$project$SceneBuilderMap$renderMapJson(track)),
					_Utils_Tuple2(
					'points',
					$author$project$SceneBuilderMap$trackPointsToJSON(track))
				])));
};
var $author$project$MapPortController$centreMapOnCurrent = function (track) {
	var _v0 = A2($author$project$DomainModel$gpxPointFromIndex, track.currentPosition, track.trackTree);
	var longitude = _v0.longitude;
	var latitude = _v0.latitude;
	var altitude = _v0.altitude;
	return $author$project$MapPortController$mapCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('Centre')),
					_Utils_Tuple2(
					'token',
					$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey)),
					_Utils_Tuple2(
					'lon',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(
							$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude)))),
					_Utils_Tuple2(
					'lat',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(latitude)))
				])));
};
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$fromList = _String_fromList;
var $elm$core$Basics$modBy = _Basics_modBy;
var $rtfeldman$elm_hex$Hex$unsafeToDigit = function (num) {
	unsafeToDigit:
	while (true) {
		switch (num) {
			case 0:
				return _Utils_chr('0');
			case 1:
				return _Utils_chr('1');
			case 2:
				return _Utils_chr('2');
			case 3:
				return _Utils_chr('3');
			case 4:
				return _Utils_chr('4');
			case 5:
				return _Utils_chr('5');
			case 6:
				return _Utils_chr('6');
			case 7:
				return _Utils_chr('7');
			case 8:
				return _Utils_chr('8');
			case 9:
				return _Utils_chr('9');
			case 10:
				return _Utils_chr('a');
			case 11:
				return _Utils_chr('b');
			case 12:
				return _Utils_chr('c');
			case 13:
				return _Utils_chr('d');
			case 14:
				return _Utils_chr('e');
			case 15:
				return _Utils_chr('f');
			default:
				var $temp$num = num;
				num = $temp$num;
				continue unsafeToDigit;
		}
	}
};
var $rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (num < 16) {
				return A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(num),
					digits);
			} else {
				var $temp$digits = A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(
						A2($elm$core$Basics$modBy, 16, num)),
					digits),
					$temp$num = (num / 16) | 0;
				digits = $temp$digits;
				num = $temp$num;
				continue unsafePositiveToDigits;
			}
		}
	});
var $rtfeldman$elm_hex$Hex$toString = function (num) {
	return $elm$core$String$fromList(
		(num < 0) ? A2(
			$elm$core$List$cons,
			_Utils_chr('-'),
			A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, -num)) : A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, num));
};
var $author$project$UtilsForViews$colourHexString = function (colour) {
	var leadingZeroes = function (str) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				2 - $elm$core$String$length(str),
				'0'),
			str);
	};
	var _v0 = $mdgriffith$elm_ui$Element$toRgb(colour);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	var _v1 = _Utils_Tuple3(
		$elm$core$Basics$floor(red * 255),
		$elm$core$Basics$floor(green * 255),
		$elm$core$Basics$floor(blue * 255));
	var redInt = _v1.a;
	var greenInt = _v1.b;
	var blueInt = _v1.c;
	return '#' + (leadingZeroes(
		$rtfeldman$elm_hex$Hex$toString(redInt)) + (leadingZeroes(
		$rtfeldman$elm_hex$Hex$toString(greenInt)) + leadingZeroes(
		$rtfeldman$elm_hex$Hex$toString(blueInt))));
};
var $author$project$MapPortController$hidePreview = function (tag) {
	return $author$project$MapPortController$mapCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('HidePreview')),
					_Utils_Tuple2(
					'token',
					$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey)),
					_Utils_Tuple2(
					'label',
					$elm$json$Json$Encode$string(tag))
				])));
};
var $author$project$MapPortController$refreshMap = $author$project$MapPortController$mapCommands(
	$elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'Cmd',
				$elm$json$Json$Encode$string('Repaint')),
				_Utils_Tuple2(
				'token',
				$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey))
			])));
var $author$project$SceneBuilderMap$lineToJSON = function (points) {
	var coordinates = A2(
		$elm$core$List$map,
		function (_v0) {
			var longitude = _v0.longitude;
			var latitude = _v0.latitude;
			var altitude = _v0.altitude;
			return $author$project$DomainModel$lngLatPair(
				_Utils_Tuple3(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude),
					latitude,
					altitude));
		},
		points);
	var geometry = $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('LineString')),
				_Utils_Tuple2(
				'coordinates',
				A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, coordinates))
			]));
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('Feature')),
				_Utils_Tuple2(
				'properties',
				$elm$json$Json$Encode$object(_List_Nil)),
				_Utils_Tuple2('geometry', geometry)
			]));
};
var $author$project$SceneBuilderMap$pointsToJSON = function (points) {
	var coordinates = function (pt) {
		return $author$project$DomainModel$lngLatPair(
			_Utils_Tuple3(
				$ianmackenzie$elm_geometry$Direction2d$toAngle(pt.longitude),
				pt.latitude,
				$ianmackenzie$elm_units$Quantity$zero));
	};
	var point = function (tp) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('Point')),
					_Utils_Tuple2(
					'coordinates',
					coordinates(tp))
				]));
	};
	var makeFeature = function (tp) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('Feature')),
					_Utils_Tuple2(
					'geometry',
					point(tp))
				]));
	};
	var features = A2($elm$core$List$map, makeFeature, points);
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('FeatureCollection')),
				_Utils_Tuple2(
				'features',
				A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, features))
			]));
};
var $author$project$SceneBuilderMap$renderPreview = function (_v0) {
	var tag = _v0.tag;
	var shape = _v0.shape;
	var colour = _v0.colour;
	var points = _v0.points;
	switch (shape.$) {
		case 'PreviewCircle':
			return $author$project$SceneBuilderMap$pointsToJSON(
				A2($elm$core$List$map, $elm$core$Tuple$second, points));
		case 'PreviewLine':
			return $author$project$SceneBuilderMap$lineToJSON(
				A2($elm$core$List$map, $elm$core$Tuple$second, points));
		default:
			return $elm$json$Json$Encode$null;
	}
};
var $author$project$MapPortController$showPreview = F4(
	function (tag, shape, colour, geoJson) {
		return $author$project$MapPortController$mapCommands(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Cmd',
						$elm$json$Json$Encode$string('ShowPreview')),
						_Utils_Tuple2(
						'token',
						$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey)),
						_Utils_Tuple2(
						'label',
						$elm$json$Json$Encode$string(tag)),
						_Utils_Tuple2(
						'shape',
						$elm$json$Json$Encode$string(shape)),
						_Utils_Tuple2(
						'colour',
						$elm$json$Json$Encode$string(colour)),
						_Utils_Tuple2('data', geoJson)
					])));
	});
var $author$project$LocalStorage$storageSetItem = F2(
	function (key, value) {
		return $author$project$LocalStorage$storageCommands(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Cmd',
						$elm$json$Json$Encode$string('storage.set')),
						_Utils_Tuple2(
						'key',
						$elm$json$Json$Encode$string(key)),
						_Utils_Tuple2('value', value)
					])));
	});
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$MapPortController$toggleDragging = F2(
	function (isDragging, track) {
		return $author$project$MapPortController$mapCommands(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Cmd',
						$elm$json$Json$Encode$string('Drag')),
						_Utils_Tuple2(
						'Enable',
						$elm$json$Json$Encode$bool(isDragging)),
						_Utils_Tuple2(
						'points',
						$author$project$SceneBuilderMap$trackPointsToJSON(track))
					])));
	});
var $author$project$Main$performActionCommands = F2(
	function (actions, model) {
		var showPreviewOnMap = function (tag) {
			var _v6 = A2($elm$core$Dict$get, tag, model.previews);
			if (_v6.$ === 'Just') {
				var useThisData = _v6.a;
				var _v7 = useThisData.shape;
				switch (_v7.$) {
					case 'PreviewCircle':
						return A4(
							$author$project$MapPortController$showPreview,
							useThisData.tag,
							'circle',
							$author$project$UtilsForViews$colourHexString(useThisData.colour),
							$author$project$SceneBuilderMap$renderPreview(useThisData));
					case 'PreviewLine':
						return A4(
							$author$project$MapPortController$showPreview,
							useThisData.tag,
							'line',
							$author$project$UtilsForViews$colourHexString(useThisData.colour),
							$author$project$SceneBuilderMap$renderPreview(useThisData));
					default:
						return $elm$core$Platform$Cmd$none;
				}
			} else {
				return $elm$core$Platform$Cmd$none;
			}
		};
		var performAction = function (action) {
			var _v0 = _Utils_Tuple2(action, model.track);
			_v0$12:
			while (true) {
				switch (_v0.a.$) {
					case 'SetCurrent':
						if (_v0.b.$ === 'Just') {
							var position = _v0.a.a;
							var track = _v0.b.a;
							return $author$project$MapPortController$addMarkersToMap(track);
						} else {
							break _v0$12;
						}
					case 'SetCurrentFromMapClick':
						if (_v0.b.$ === 'Just') {
							var position = _v0.a.a;
							var track = _v0.b.a;
							return $elm$core$Platform$Cmd$none;
						} else {
							break _v0$12;
						}
					case 'MapCenterOnCurrent':
						if (_v0.b.$ === 'Just') {
							var _v1 = _v0.a;
							var track = _v0.b.a;
							return $author$project$MapPortController$centreMapOnCurrent(track);
						} else {
							break _v0$12;
						}
					case 'MapRefresh':
						if (_v0.b.$ === 'Just') {
							var _v2 = _v0.a;
							var track = _v0.b.a;
							return $author$project$MapPortController$refreshMap;
						} else {
							break _v0$12;
						}
					case 'MakeMapPointsDraggable':
						if (_v0.b.$ === 'Just') {
							var flag = _v0.a.a;
							var track = _v0.b.a;
							return A2($author$project$MapPortController$toggleDragging, flag, track);
						} else {
							break _v0$12;
						}
					case 'ShowPreview':
						if (_v0.b.$ === 'Just') {
							var previewData = _v0.a.a;
							var track = _v0.b.a;
							return showPreviewOnMap(previewData.tag);
						} else {
							break _v0$12;
						}
					case 'HidePreview':
						if (_v0.b.$ === 'Just') {
							var tag = _v0.a.a;
							var track = _v0.b.a;
							return $author$project$MapPortController$hidePreview(tag);
						} else {
							break _v0$12;
						}
					case 'DelayMessage':
						if (_v0.b.$ === 'Just') {
							var _v3 = _v0.a;
							var _int = _v3.a;
							var msg = _v3.b;
							var track = _v0.b.a;
							return A2($andrewMacmurray$elm_delay$Delay$after, _int, msg);
						} else {
							break _v0$12;
						}
					case 'TrackHasChanged':
						if (_v0.b.$ === 'Just') {
							var _v4 = _v0.a;
							var track = _v0.b.a;
							return $elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										$author$project$MapPortController$addTrackToMap(track),
										$author$project$MapPortController$addMarkersToMap(track),
										$elm$core$Platform$Cmd$batch(
										A2(
											$elm$core$List$map,
											showPreviewOnMap,
											$elm$core$Dict$keys(model.previews)))
									]));
						} else {
							break _v0$12;
						}
					case 'SetMarker':
						if (_v0.b.$ === 'Just') {
							var maybeMarker = _v0.a.a;
							var track = _v0.b.a;
							return $author$project$MapPortController$addMarkersToMap(track);
						} else {
							break _v0$12;
						}
					case 'StoreLocally':
						var _v5 = _v0.a;
						var key = _v5.a;
						var value = _v5.b;
						return A2($author$project$LocalStorage$storageSetItem, key, value);
					case 'HeapStatusUpdate':
						return A2($andrewMacmurray$elm_delay$Delay$after, 5000, $author$project$Main$TimeToUpdateMemory);
					default:
						break _v0$12;
				}
			}
			return $elm$core$Platform$Cmd$none;
		};
		return $elm$core$Platform$Cmd$batch(
			A2($elm$core$List$map, performAction, actions));
	});
var $author$project$TrackLoaded$addToUndoStack = F5(
	function (action, fromStart, fromEnd, oldPoints, oldTrack) {
		var undoEntry = {action: action, currentPosition: oldTrack.currentPosition, fromEnd: fromEnd, fromStart: fromStart, markerPosition: oldTrack.markerPosition, originalPoints: oldPoints};
		return _Utils_update(
			oldTrack,
			{
				redos: _List_Nil,
				undos: A2($elm$core$List$cons, undoEntry, oldTrack.undos)
			});
	});
var $ianmackenzie$elm_units$Quantity$divideBy = F2(
	function (divisor, _v0) {
		var value = _v0.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(value / divisor);
	});
var $author$project$TrackLoaded$getRangeFromMarkers = function (track) {
	var theLength = $author$project$DomainModel$skipCount(track.trackTree);
	var _v0 = track.markerPosition;
	if (_v0.$ === 'Just') {
		var purple = _v0.a;
		return _Utils_Tuple2(
			A2($elm$core$Basics$min, track.currentPosition, purple),
			A2($elm$core$Basics$min, theLength - track.currentPosition, theLength - purple));
	} else {
		return _Utils_Tuple2(track.currentPosition, theLength - track.currentPosition);
	}
};
var $ianmackenzie$elm_units$Angle$cos = function (_v0) {
	var angle = _v0.a;
	return $elm$core$Basics$cos(angle);
};
var $ianmackenzie$elm_units$Length$inMeters = function (_v0) {
	var numMeters = _v0.a;
	return numMeters;
};
var $author$project$Spherical$metresPerDegree = 78846.81;
var $ianmackenzie$elm_geometry$Point3d$toTuple = F2(
	function (fromQuantity, point) {
		return _Utils_Tuple3(
			fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$xCoordinate(point)),
			fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$yCoordinate(point)),
			fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$zCoordinate(point)));
	});
var $author$project$DomainModel$gpxFromPointWithReference = F2(
	function (reference, point) {
		var _v0 = A2($ianmackenzie$elm_geometry$Point3d$toTuple, $ianmackenzie$elm_units$Length$inMeters, point);
		var x = _v0.a;
		var y = _v0.b;
		var z = _v0.c;
		var latitude = $ianmackenzie$elm_units$Angle$degrees(
			(y / $author$project$Spherical$metresPerDegree) + $ianmackenzie$elm_units$Angle$inDegrees(reference.latitude));
		var longitude = $ianmackenzie$elm_units$Angle$degrees(
			((x / $ianmackenzie$elm_units$Angle$cos(latitude)) / $author$project$Spherical$metresPerDegree) + $ianmackenzie$elm_units$Angle$inDegrees(
				$ianmackenzie$elm_geometry$Direction2d$toAngle(reference.longitude)));
		var altitude = z;
		return A3(
			$author$project$DomainModel$GPXSource,
			$ianmackenzie$elm_geometry$Direction2d$fromAngle(longitude),
			latitude,
			$ianmackenzie$elm_units$Length$meters(altitude));
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Point3d = function (a) {
	return {$: 'Point3d', a: a};
};
var $ianmackenzie$elm_geometry$Point3d$interpolateFrom = F3(
	function (_v0, _v1, t) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		return (t <= 0.5) ? $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p1.x + (t * (p2.x - p1.x)), y: p1.y + (t * (p2.y - p1.y)), z: p1.z + (t * (p2.z - p1.z))}) : $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p2.x + ((1 - t) * (p1.x - p2.x)), y: p2.y + ((1 - t) * (p1.y - p2.y)), z: p2.z + ((1 - t) * (p1.z - p2.z))});
	});
var $ianmackenzie$elm_units$Quantity$ratio = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return x / y;
	});
var $author$project$Tools$Interpolate$computeNewPoints = F3(
	function (excludeExisting, options, track) {
		var interpolateStartIndex = excludeExisting ? 1 : 0;
		var interpolateRoadSection = F2(
			function (road, _new) {
				var intervalsNeeded = $elm$core$Basics$ceiling(
					A2($ianmackenzie$elm_units$Quantity$ratio, road.trueLength, options.minimumSpacing));
				var spacingOnThisSegment = A2($ianmackenzie$elm_units$Quantity$divideBy, intervalsNeeded, road.trueLength);
				var fractionalIncrement = A2($ianmackenzie$elm_units$Quantity$ratio, spacingOnThisSegment, road.trueLength);
				var interpolatedPoints = A2(
					$elm$core$List$map,
					function (n) {
						return A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, road.startPoint, road.endPoint, fractionalIncrement * n);
					},
					A2($elm$core$List$range, interpolateStartIndex, intervalsNeeded - 1));
				return _Utils_ap(
					$elm$core$List$reverse(interpolatedPoints),
					_new);
			});
		var _v0 = function () {
			var _v1 = options.extent;
			if (_v1.$ === 'ExtentIsRange') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newPoints = $elm$core$List$reverse(
			A7(
				$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
				fromStart,
				$author$project$DomainModel$skipCount(track.trackTree) - fromEnd,
				$elm$core$Basics$always($elm$core$Maybe$Nothing),
				0,
				track.trackTree,
				interpolateRoadSection,
				_List_Nil));
		var previewPoints = A2(
			$elm$core$List$map,
			function (earth) {
				return _Utils_Tuple2(
					earth,
					A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, earth));
			},
			newPoints);
		return previewPoints;
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $author$project$DomainModel$traverseTreeBetween = F5(
	function (startingAt, endingAt, someNode, foldFn, accum) {
		return A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			startingAt,
			endingAt,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			someNode,
			foldFn,
			accum);
	});
var $author$project$DomainModel$extractPointsInRange = F3(
	function (fromStart, fromEnd, trackTree) {
		var myFoldFn = F2(
			function (road, accum) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(road.endPoint, road.sourceData.b),
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(road.startPoint, road.sourceData.a),
						A2($elm$core$List$drop, 1, accum)));
			});
		return $elm$core$List$reverse(
			A5(
				$author$project$DomainModel$traverseTreeBetween,
				fromStart,
				$author$project$DomainModel$skipCount(trackTree) - fromEnd,
				trackTree,
				myFoldFn,
				_List_Nil));
	});
var $author$project$DomainModel$foldOverRouteRL = F3(
	function (foldFn, treeNode, accum) {
		if (treeNode.$ === 'Leaf') {
			var leaf = treeNode.a;
			return A2(foldFn, leaf, accum);
		} else {
			var node = treeNode.a;
			return A3(
				$author$project$DomainModel$foldOverRouteRL,
				foldFn,
				node.left,
				A3($author$project$DomainModel$foldOverRouteRL, foldFn, node.right, accum));
		}
	});
var $author$project$DomainModel$getAllGPXPointsInNaturalOrder = function (treeNode) {
	var internalFoldFn = F2(
		function (road, accum) {
			return A2($elm$core$List$cons, road.sourceData.b, accum);
		});
	var endPoints = A3($author$project$DomainModel$foldOverRouteRL, internalFoldFn, treeNode, _List_Nil);
	return A2(
		$elm$core$List$cons,
		A2($author$project$DomainModel$gpxPointFromIndex, 0, treeNode),
		endPoints);
};
var $author$project$DomainModel$Node = function (a) {
	return {$: 'Node', a: a};
};
var $ianmackenzie$elm_geometry$Direction2d$angleFrom = F2(
	function (_v0, _v1) {
		var d1 = _v0.a;
		var d2 = _v1.a;
		var relativeY = (d1.x * d2.y) - (d1.y * d2.x);
		var relativeX = (d1.x * d2.x) + (d1.y * d2.y);
		return $ianmackenzie$elm_units$Quantity$Quantity(
			A2($elm$core$Basics$atan2, relativeY, relativeX));
	});
var $author$project$DomainModel$boundingBox = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).boundingBox;
};
var $ianmackenzie$elm_units$Quantity$interpolateFrom = F3(
	function (_v0, _v1, parameter) {
		var start = _v0.a;
		var end = _v1.a;
		return (parameter <= 0.5) ? $ianmackenzie$elm_units$Quantity$Quantity(start + (parameter * (end - start))) : $ianmackenzie$elm_units$Quantity$Quantity(end + ((1 - parameter) * (start - end)));
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$midX = function (_v0) {
	var boundingBox = _v0.a;
	return A3($ianmackenzie$elm_units$Quantity$interpolateFrom, boundingBox.minX, boundingBox.maxX, 0.5);
};
var $ianmackenzie$elm_geometry$BoundingBox3d$midY = function (_v0) {
	var boundingBox = _v0.a;
	return A3($ianmackenzie$elm_units$Quantity$interpolateFrom, boundingBox.minY, boundingBox.maxY, 0.5);
};
var $ianmackenzie$elm_geometry$BoundingBox3d$midZ = function (_v0) {
	var boundingBox = _v0.a;
	return A3($ianmackenzie$elm_units$Quantity$interpolateFrom, boundingBox.minZ, boundingBox.maxZ, 0.5);
};
var $ianmackenzie$elm_geometry$Point3d$xyz = F3(
	function (_v0, _v1, _v2) {
		var x = _v0.a;
		var y = _v1.a;
		var z = _v2.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: x, y: y, z: z});
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$centerPoint = function (boundingBox) {
	return A3(
		$ianmackenzie$elm_geometry$Point3d$xyz,
		$ianmackenzie$elm_geometry$BoundingBox3d$midX(boundingBox),
		$ianmackenzie$elm_geometry$BoundingBox3d$midY(boundingBox),
		$ianmackenzie$elm_geometry$BoundingBox3d$midZ(boundingBox));
};
var $ianmackenzie$elm_geometry$BoundingBox3d$dimensions = function (boundingBox) {
	return _Utils_Tuple3(
		A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$BoundingBox3d$minX(boundingBox),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxX(boundingBox)),
		A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$BoundingBox3d$minY(boundingBox),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxY(boundingBox)),
		A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$BoundingBox3d$minZ(boundingBox),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxZ(boundingBox)));
};
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $ianmackenzie$elm_units$Quantity$sqrt = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(
		$elm$core$Basics$sqrt(value));
};
var $ianmackenzie$elm_units$Quantity$squared = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(value * value);
};
var $ianmackenzie$elm_units$Quantity$sum = function (quantities) {
	return A3($elm$core$List$foldl, $ianmackenzie$elm_units$Quantity$plus, $ianmackenzie$elm_units$Quantity$zero, quantities);
};
var $ianmackenzie$elm_geometry$Geometry$Types$Sphere3d = function (a) {
	return {$: 'Sphere3d', a: a};
};
var $ianmackenzie$elm_geometry$Sphere3d$withRadius = F2(
	function (givenRadius, givenCenterPoint) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Sphere3d(
			{
				centerPoint: givenCenterPoint,
				radius: $ianmackenzie$elm_units$Quantity$abs(givenRadius)
			});
	});
var $author$project$DomainModel$containingSphere = function (box) {
	var here = $ianmackenzie$elm_geometry$BoundingBox3d$centerPoint(box);
	var _v0 = $ianmackenzie$elm_geometry$BoundingBox3d$dimensions(box);
	var xs = _v0.a;
	var ys = _v0.b;
	var zs = _v0.c;
	var radius = $ianmackenzie$elm_units$Quantity$half(
		$ianmackenzie$elm_units$Quantity$sqrt(
			$ianmackenzie$elm_units$Quantity$sum(
				_List_fromArray(
					[
						$ianmackenzie$elm_units$Quantity$squared(xs),
						$ianmackenzie$elm_units$Quantity$squared(ys),
						$ianmackenzie$elm_units$Quantity$squared(zs)
					]))));
	return A2($ianmackenzie$elm_geometry$Sphere3d$withRadius, radius, here);
};
var $author$project$DomainModel$eastwardTurn = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).eastwardExtent;
};
var $author$project$DomainModel$endPoint = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).endPoint;
};
var $ianmackenzie$elm_units$Quantity$max = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(
			A2($elm$core$Basics$max, x, y));
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $ianmackenzie$elm_units$Quantity$maximum = function (quantities) {
	if (!quantities.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var first = quantities.a;
		var rest = quantities.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $ianmackenzie$elm_units$Quantity$max, first, rest));
	}
};
var $author$project$DomainModel$medianLongitude = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).medianLongitude;
};
var $ianmackenzie$elm_units$Quantity$min = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(
			A2($elm$core$Basics$min, x, y));
	});
var $ianmackenzie$elm_geometry$Direction2d$rotateBy = F2(
	function (_v0, _v1) {
		var angle = _v0.a;
		var d = _v1.a;
		var s = $elm$core$Basics$sin(angle);
		var c = $elm$core$Basics$cos(angle);
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
			{x: (c * d.x) - (s * d.y), y: (s * d.x) + (c * d.y)});
	});
var $author$project$DomainModel$trueLength = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).trueLength;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$extrema = function (_v0) {
	var boundingBoxExtrema = _v0.a;
	return boundingBoxExtrema;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$union = F2(
	function (firstBox, secondBox) {
		var b2 = $ianmackenzie$elm_geometry$BoundingBox3d$extrema(secondBox);
		var b1 = $ianmackenzie$elm_geometry$BoundingBox3d$extrema(firstBox);
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
			{
				maxX: A2($ianmackenzie$elm_units$Quantity$max, b1.maxX, b2.maxX),
				maxY: A2($ianmackenzie$elm_units$Quantity$max, b1.maxY, b2.maxY),
				maxZ: A2($ianmackenzie$elm_units$Quantity$max, b1.maxZ, b2.maxZ),
				minX: A2($ianmackenzie$elm_units$Quantity$min, b1.minX, b2.minX),
				minY: A2($ianmackenzie$elm_units$Quantity$min, b1.minY, b2.minY),
				minZ: A2($ianmackenzie$elm_units$Quantity$min, b1.minZ, b2.minZ)
			});
	});
var $author$project$DomainModel$westwardTurn = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).westwardExtent;
};
var $author$project$DomainModel$combineInfo = F2(
	function (info1, info2) {
		var sharedMedian = A2(
			$ianmackenzie$elm_geometry$Direction2d$rotateBy,
			$ianmackenzie$elm_units$Quantity$half(
				A2(
					$ianmackenzie$elm_geometry$Direction2d$angleFrom,
					$author$project$DomainModel$medianLongitude(info1),
					$author$project$DomainModel$medianLongitude(info2))),
			$author$project$DomainModel$medianLongitude(info1));
		var box = A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$union,
			$author$project$DomainModel$boundingBox(info1),
			$author$project$DomainModel$boundingBox(info2));
		return {
			altitudeGained: A2(
				$ianmackenzie$elm_units$Quantity$plus,
				$author$project$DomainModel$asRecord(info1).altitudeGained,
				$author$project$DomainModel$asRecord(info2).altitudeGained),
			altitudeLost: A2(
				$ianmackenzie$elm_units$Quantity$plus,
				$author$project$DomainModel$asRecord(info1).altitudeLost,
				$author$project$DomainModel$asRecord(info2).altitudeLost),
			boundingBox: box,
			directionAtEnd: $author$project$DomainModel$asRecord(info2).directionAtEnd,
			directionAtStart: $author$project$DomainModel$asRecord(info1).directionAtStart,
			directionChangeMaximumAbs: A2(
				$elm$core$Maybe$withDefault,
				$ianmackenzie$elm_units$Quantity$zero,
				$ianmackenzie$elm_units$Quantity$maximum(
					_List_fromArray(
						[
							$author$project$DomainModel$asRecord(info1).directionChangeMaximumAbs,
							$author$project$DomainModel$asRecord(info2).directionChangeMaximumAbs,
							$ianmackenzie$elm_units$Quantity$abs(
							A2(
								$ianmackenzie$elm_geometry$Direction2d$angleFrom,
								$author$project$DomainModel$asRecord(info1).directionAtEnd,
								$author$project$DomainModel$asRecord(info2).directionAtStart))
						]))),
			distanceClimbing: A2(
				$ianmackenzie$elm_units$Quantity$plus,
				$author$project$DomainModel$asRecord(info1).distanceClimbing,
				$author$project$DomainModel$asRecord(info2).distanceClimbing),
			distanceDescending: A2(
				$ianmackenzie$elm_units$Quantity$plus,
				$author$project$DomainModel$asRecord(info1).distanceDescending,
				$author$project$DomainModel$asRecord(info2).distanceDescending),
			eastwardExtent: A2(
				$ianmackenzie$elm_units$Quantity$max,
				A2(
					$ianmackenzie$elm_geometry$Direction2d$angleFrom,
					sharedMedian,
					A2(
						$ianmackenzie$elm_geometry$Direction2d$rotateBy,
						$author$project$DomainModel$eastwardTurn(info1),
						$author$project$DomainModel$medianLongitude(info1))),
				A2(
					$ianmackenzie$elm_geometry$Direction2d$angleFrom,
					sharedMedian,
					A2(
						$ianmackenzie$elm_geometry$Direction2d$rotateBy,
						$author$project$DomainModel$eastwardTurn(info2),
						$author$project$DomainModel$medianLongitude(info2)))),
			endPoint: $author$project$DomainModel$endPoint(info2),
			gradientAtEnd: $author$project$DomainModel$asRecord(info2).gradientAtEnd,
			gradientAtStart: $author$project$DomainModel$asRecord(info1).gradientAtStart,
			gradientChangeMaximumAbs: A2(
				$elm$core$Maybe$withDefault,
				0.0,
				$elm$core$List$maximum(
					_List_fromArray(
						[
							$author$project$DomainModel$asRecord(info1).gradientChangeMaximumAbs,
							$author$project$DomainModel$asRecord(info2).gradientChangeMaximumAbs,
							$elm$core$Basics$abs(
							$author$project$DomainModel$asRecord(info1).gradientAtEnd - $author$project$DomainModel$asRecord(info2).gradientAtStart)
						]))),
			medianLongitude: sharedMedian,
			skipCount: $author$project$DomainModel$skipCount(info1) + $author$project$DomainModel$skipCount(info2),
			sourceData: _Utils_Tuple2(
				$author$project$DomainModel$sourceData(info1).a,
				$author$project$DomainModel$sourceData(info2).b),
			sphere: $author$project$DomainModel$containingSphere(box),
			startPoint: $author$project$DomainModel$startPoint(info1),
			steepestClimb: A2(
				$elm$core$Basics$max,
				$author$project$DomainModel$asRecord(info1).steepestClimb,
				$author$project$DomainModel$asRecord(info2).steepestClimb),
			trueLength: A2(
				$ianmackenzie$elm_units$Quantity$plus,
				$author$project$DomainModel$trueLength(info1),
				$author$project$DomainModel$trueLength(info2)),
			westwardExtent: A2(
				$ianmackenzie$elm_units$Quantity$min,
				A2(
					$ianmackenzie$elm_geometry$Direction2d$angleFrom,
					sharedMedian,
					A2(
						$ianmackenzie$elm_geometry$Direction2d$rotateBy,
						$author$project$DomainModel$westwardTurn(info1),
						$author$project$DomainModel$medianLongitude(info1))),
				A2(
					$ianmackenzie$elm_geometry$Direction2d$angleFrom,
					sharedMedian,
					A2(
						$ianmackenzie$elm_geometry$Direction2d$rotateBy,
						$author$project$DomainModel$westwardTurn(info2),
						$author$project$DomainModel$medianLongitude(info2))))
		};
	});
var $author$project$DomainModel$joiningNode = F2(
	function (left, right) {
		return $author$project$DomainModel$Node(
			{
				left: left,
				nodeContent: A2($author$project$DomainModel$combineInfo, left, right),
				right: right
			});
	});
var $author$project$DomainModel$safeJoin = F2(
	function (left, right) {
		var _v0 = _Utils_Tuple2(left, right);
		if (_v0.a.$ === 'Just') {
			if (_v0.b.$ === 'Just') {
				var leftTree = _v0.a.a;
				var rightTree = _v0.b.a;
				return $elm$core$Maybe$Just(
					A2($author$project$DomainModel$joiningNode, leftTree, rightTree));
			} else {
				var leftTree = _v0.a.a;
				var _v1 = _v0.b;
				return left;
			}
		} else {
			if (_v0.b.$ === 'Just') {
				var _v2 = _v0.a;
				var rightTree = _v0.b.a;
				return right;
			} else {
				var _v3 = _v0.a;
				var _v4 = _v0.b;
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $author$project$DomainModel$takeFromLeft = F2(
	function (leavesFromLeft, treeNode) {
		if (leavesFromLeft <= 0) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (_Utils_cmp(
				leavesFromLeft,
				$author$project$DomainModel$skipCount(treeNode)) > -1) {
				return $elm$core$Maybe$Just(treeNode);
			} else {
				if (treeNode.$ === 'Leaf') {
					var roadSection = treeNode.a;
					return $elm$core$Maybe$Nothing;
				} else {
					var record = treeNode.a;
					return A2(
						$author$project$DomainModel$safeJoin,
						A2($author$project$DomainModel$takeFromLeft, leavesFromLeft, record.left),
						A2(
							$author$project$DomainModel$takeFromLeft,
							leavesFromLeft - $author$project$DomainModel$skipCount(record.left),
							record.right));
				}
			}
		}
	});
var $author$project$DomainModel$takePointsFromLeft = F2(
	function (numPoints, tree) {
		if (!numPoints) {
			return _List_Nil;
		} else {
			if (numPoints === 1) {
				return _List_fromArray(
					[
						A2($author$project$DomainModel$gpxPointFromIndex, 0, tree)
					]);
			} else {
				var leftLeaves = A2($author$project$DomainModel$takeFromLeft, numPoints - 1, tree);
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Maybe$map, $author$project$DomainModel$getAllGPXPointsInNaturalOrder, leftLeaves));
			}
		}
	});
var $author$project$DomainModel$takeFromRight = F2(
	function (leavesFromRight, treeNode) {
		if (leavesFromRight <= 0) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (_Utils_cmp(
				leavesFromRight,
				$author$project$DomainModel$skipCount(treeNode)) > -1) {
				return $elm$core$Maybe$Just(treeNode);
			} else {
				if (treeNode.$ === 'Leaf') {
					var roadSection = treeNode.a;
					return $elm$core$Maybe$Nothing;
				} else {
					var record = treeNode.a;
					return A2(
						$author$project$DomainModel$safeJoin,
						A2(
							$author$project$DomainModel$takeFromRight,
							leavesFromRight - $author$project$DomainModel$skipCount(record.right),
							record.left),
						A2($author$project$DomainModel$takeFromRight, leavesFromRight, record.right));
				}
			}
		}
	});
var $author$project$DomainModel$takePointsFromRight = F2(
	function (numPoints, tree) {
		if (!numPoints) {
			return _List_Nil;
		} else {
			if (numPoints === 1) {
				return _List_fromArray(
					[
						$author$project$DomainModel$getLastLeaf(tree).sourceData.b
					]);
			} else {
				var rightLeaves = A2($author$project$DomainModel$takeFromRight, numPoints - 1, tree);
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Maybe$map, $author$project$DomainModel$getAllGPXPointsInNaturalOrder, rightLeaves));
			}
		}
	});
var $author$project$DomainModel$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $author$project$Spherical$findBearingToTarget = F2(
	function (_v0, _v1) {
		var lat1 = _v0.a;
		var lon1 = _v0.b;
		var lat2 = _v1.a;
		var lon2 = _v1.b;
		var y = $elm$core$Basics$sin(lon2 - lon1) * $elm$core$Basics$cos(lat2);
		var x = ($elm$core$Basics$cos(lat1) * $elm$core$Basics$sin(lat2)) - (($elm$core$Basics$sin(lat1) * $elm$core$Basics$cos(lat2)) * $elm$core$Basics$cos(lon2 - lon1));
		return A2($elm$core$Basics$atan2, y, x);
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$from = F2(
	function (firstPoint, secondPoint) {
		var z2 = $ianmackenzie$elm_geometry$Point3d$zCoordinate(secondPoint);
		var z1 = $ianmackenzie$elm_geometry$Point3d$zCoordinate(firstPoint);
		var y2 = $ianmackenzie$elm_geometry$Point3d$yCoordinate(secondPoint);
		var y1 = $ianmackenzie$elm_geometry$Point3d$yCoordinate(firstPoint);
		var x2 = $ianmackenzie$elm_geometry$Point3d$xCoordinate(secondPoint);
		var x1 = $ianmackenzie$elm_geometry$Point3d$xCoordinate(firstPoint);
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
			{
				maxX: A2($ianmackenzie$elm_units$Quantity$max, x1, x2),
				maxY: A2($ianmackenzie$elm_units$Quantity$max, y1, y2),
				maxZ: A2($ianmackenzie$elm_units$Quantity$max, z1, z2),
				minX: A2($ianmackenzie$elm_units$Quantity$min, x1, x2),
				minY: A2($ianmackenzie$elm_units$Quantity$min, y1, y2),
				minZ: A2($ianmackenzie$elm_units$Quantity$min, z1, z2)
			});
	});
var $ianmackenzie$elm_units$Quantity$greaterThanZero = function (_v0) {
	var x = _v0.a;
	return x > 0;
};
var $ianmackenzie$elm_units$Quantity$lessThanZero = function (_v0) {
	var x = _v0.a;
	return x < 0;
};
var $ianmackenzie$elm_units$Quantity$negate = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(-value);
};
var $author$project$Spherical$meanRadius = 6371000;
var $author$project$Spherical$range = F2(
	function (lonLat1, lonLat2) {
		var _v0 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Angle$inRadians(lonLat2.b),
			$ianmackenzie$elm_units$Angle$inRadians(lonLat2.a));
		var lat2 = _v0.a;
		var lon2 = _v0.b;
		var _v1 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Angle$inRadians(lonLat1.b),
			$ianmackenzie$elm_units$Angle$inRadians(lonLat1.a));
		var lat1 = _v1.a;
		var lon1 = _v1.b;
		var y = lat2 - lat1;
		var x = (lon2 - lon1) * $elm$core$Basics$cos((lat1 + lat2) / 2);
		return $author$project$Spherical$meanRadius * $elm$core$Basics$sqrt((x * x) + (y * y));
	});
var $author$project$DomainModel$makeRoadSectionKnowingLocalCoords = F2(
	function (_v0, _v1) {
		var earth1 = _v0.a;
		var local1 = _v0.b;
		var earth2 = _v1.a;
		var local2 = _v1.b;
		var range = $ianmackenzie$elm_units$Length$meters(
			A2(
				$author$project$Spherical$range,
				_Utils_Tuple2(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(earth1.longitude),
					earth1.latitude),
				_Utils_Tuple2(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(earth2.longitude),
					earth2.latitude)));
		var medianLon = A2(
			$ianmackenzie$elm_geometry$Direction2d$rotateBy,
			$ianmackenzie$elm_units$Quantity$half(
				A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, earth1.longitude, earth2.longitude)),
			earth1.longitude);
		var box = A2($ianmackenzie$elm_geometry$BoundingBox3d$from, local1, local2);
		var bearing = A2(
			$author$project$Spherical$findBearingToTarget,
			_Utils_Tuple2(
				$ianmackenzie$elm_units$Angle$inRadians(earth1.latitude),
				$ianmackenzie$elm_units$Angle$inRadians(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(earth1.longitude))),
			_Utils_Tuple2(
				$ianmackenzie$elm_units$Angle$inRadians(earth2.latitude),
				$ianmackenzie$elm_units$Angle$inRadians(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(earth2.longitude))));
		var direction = $ianmackenzie$elm_geometry$Direction2d$fromAngle(
			$ianmackenzie$elm_units$Angle$radians(($elm$core$Basics$pi / 2) - bearing));
		var altitudeChange = A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(local1),
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(local2));
		var gradient = ($ianmackenzie$elm_units$Quantity$greaterThanZero(
			$ianmackenzie$elm_units$Quantity$abs(range)) && $ianmackenzie$elm_units$Quantity$greaterThanZero(
			$ianmackenzie$elm_units$Quantity$abs(altitudeChange))) ? ((100.0 * $ianmackenzie$elm_units$Length$inMeters(altitudeChange)) / $ianmackenzie$elm_units$Length$inMeters(range)) : 0.0;
		return {
			altitudeGained: A2($ianmackenzie$elm_units$Quantity$max, $ianmackenzie$elm_units$Quantity$zero, altitudeChange),
			altitudeLost: A2(
				$ianmackenzie$elm_units$Quantity$max,
				$ianmackenzie$elm_units$Quantity$zero,
				$ianmackenzie$elm_units$Quantity$negate(altitudeChange)),
			boundingBox: box,
			directionAtEnd: direction,
			directionAtStart: direction,
			directionChangeMaximumAbs: $ianmackenzie$elm_units$Angle$degrees(0),
			distanceClimbing: $ianmackenzie$elm_units$Quantity$greaterThanZero(altitudeChange) ? range : $ianmackenzie$elm_units$Quantity$zero,
			distanceDescending: $ianmackenzie$elm_units$Quantity$lessThanZero(altitudeChange) ? range : $ianmackenzie$elm_units$Quantity$zero,
			eastwardExtent: A2(
				$ianmackenzie$elm_units$Quantity$max,
				$ianmackenzie$elm_units$Quantity$zero,
				A2(
					$ianmackenzie$elm_units$Quantity$max,
					A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, medianLon, earth1.longitude),
					A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, medianLon, earth2.longitude))),
			endPoint: local2,
			gradientAtEnd: gradient,
			gradientAtStart: gradient,
			gradientChangeMaximumAbs: $elm$core$Basics$abs(gradient),
			medianLongitude: medianLon,
			skipCount: 1,
			sourceData: _Utils_Tuple2(earth1, earth2),
			sphere: $author$project$DomainModel$containingSphere(box),
			startPoint: local1,
			steepestClimb: A2($elm$core$Basics$max, 0.0, gradient),
			trueLength: range,
			westwardExtent: A2(
				$ianmackenzie$elm_units$Quantity$min,
				$ianmackenzie$elm_units$Quantity$zero,
				A2(
					$ianmackenzie$elm_units$Quantity$min,
					A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, medianLon, earth1.longitude),
					A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, medianLon, earth2.longitude)))
		};
	});
var $author$project$DomainModel$pointFromGpxWithReference = F2(
	function (reference, gpx) {
		return A3(
			$ianmackenzie$elm_geometry$Point3d$xyz,
			$ianmackenzie$elm_units$Length$meters(
				$ianmackenzie$elm_units$Angle$cos(gpx.latitude) * ($author$project$Spherical$metresPerDegree * $ianmackenzie$elm_units$Angle$inDegrees(
					A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, reference.longitude, gpx.longitude)))),
			$ianmackenzie$elm_units$Length$meters(
				$author$project$Spherical$metresPerDegree * $ianmackenzie$elm_units$Angle$inDegrees(
					A2($ianmackenzie$elm_units$Quantity$minus, reference.latitude, gpx.latitude))),
			gpx.altitude);
	});
var $author$project$DomainModel$makeRoadSection = F3(
	function (reference, earth1, earth2) {
		var _v0 = _Utils_Tuple2(
			A2($author$project$DomainModel$pointFromGpxWithReference, reference, earth1),
			A2($author$project$DomainModel$pointFromGpxWithReference, reference, earth2));
		var local1 = _v0.a;
		var local2 = _v0.b;
		return A2(
			$author$project$DomainModel$makeRoadSectionKnowingLocalCoords,
			_Utils_Tuple2(earth1, local1),
			_Utils_Tuple2(earth2, local2));
	});
var $author$project$DomainModel$treeFromSourcesWithExistingReference = F2(
	function (referencePoint, track) {
		var treeBuilder = F2(
			function (n, pointStream) {
				var _v0 = _Utils_Tuple2(n < 2, pointStream);
				if (_v0.a) {
					if (_v0.b.b && _v0.b.b.b) {
						var _v1 = _v0.b;
						var v1 = _v1.a;
						var _v2 = _v1.b;
						var v2 = _v2.a;
						var vvvv = _v2.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(
								$author$project$DomainModel$Leaf(
									A3($author$project$DomainModel$makeRoadSection, referencePoint, v1, v2))),
							A2($elm$core$List$cons, v2, vvvv));
					} else {
						var anythingElse = _v0.b;
						return _Utils_Tuple2($elm$core$Maybe$Nothing, anythingElse);
					}
				} else {
					var vvvv = _v0.b;
					var leftSize = (n / 2) | 0;
					var rightSize = n - leftSize;
					var _v3 = A2(treeBuilder, leftSize, vvvv);
					var left = _v3.a;
					var remainingAfterLeft = _v3.b;
					var _v4 = A2(treeBuilder, rightSize, remainingAfterLeft);
					var right = _v4.a;
					var remainingAfterRight = _v4.b;
					var _v5 = _Utils_Tuple2(left, right);
					if ((_v5.a.$ === 'Just') && (_v5.b.$ === 'Just')) {
						var leftSubtree = _v5.a.a;
						var rightSubtree = _v5.b.a;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(
								A2($author$project$DomainModel$joiningNode, leftSubtree, rightSubtree)),
							remainingAfterRight);
					} else {
						return _Utils_Tuple2($elm$core$Maybe$Nothing, remainingAfterRight);
					}
				}
			});
		var numberOfSegments = $elm$core$List$length(track) - 1;
		return A2(treeBuilder, numberOfSegments, track).a;
	});
var $author$project$DomainModel$replaceRange = F5(
	function (fromStart, fromEnd, withReferencePoint, newPoints, currentTree) {
		var rightBit = A2($author$project$DomainModel$takePointsFromRight, fromEnd, currentTree);
		var leftBit = A2($author$project$DomainModel$takePointsFromLeft, fromStart, currentTree);
		return A2(
			$author$project$DomainModel$treeFromSourcesWithExistingReference,
			withReferencePoint,
			_Utils_ap(
				leftBit,
				_Utils_ap(newPoints, rightBit)));
	});
var $author$project$Tools$Interpolate$apply = F2(
	function (options, track) {
		var newCourse = A2(
			$elm$core$List$map,
			$elm$core$Tuple$second,
			A3($author$project$Tools$Interpolate$computeNewPoints, false, options, track));
		var _v0 = function () {
			var _v1 = options.extent;
			if (_v1.$ === 'ExtentIsRange') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5($author$project$DomainModel$replaceRange, fromStart, fromEnd + 1, track.referenceLonLat, newCourse, track.trackTree);
		var oldPoints = A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree);
		return _Utils_Tuple2(
			newTree,
			A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints));
	});
var $author$project$Tools$LimitGradients$Clamped = F2(
	function (a, b) {
		return {$: 'Clamped', a: a, b: b};
	});
var $author$project$Tools$LimitGradients$NotClamped = F2(
	function (a, b) {
		return {$: 'NotClamped', a: a, b: b};
	});
var $ianmackenzie$elm_units$Length$centimeters = function (numCentimeters) {
	return $ianmackenzie$elm_units$Length$meters(0.01 * numCentimeters);
};
var $ianmackenzie$elm_units$Length$centimeter = $ianmackenzie$elm_units$Length$centimeters(1);
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $author$project$DomainModel$distanceFromIndex = F2(
	function (index, treeNode) {
		distanceFromIndex:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				var info = treeNode.a;
				return (index <= 0) ? $ianmackenzie$elm_units$Length$meters(0) : info.trueLength;
			} else {
				var info = treeNode.a;
				if (_Utils_cmp(
					index,
					$author$project$DomainModel$skipCount(info.left)) < 1) {
					var $temp$index = index,
						$temp$treeNode = info.left;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue distanceFromIndex;
				} else {
					return A2(
						$ianmackenzie$elm_units$Quantity$plus,
						$author$project$DomainModel$trueLength(info.left),
						A2(
							$author$project$DomainModel$distanceFromIndex,
							index - $author$project$DomainModel$skipCount(info.left),
							info.right));
				}
			}
		}
	});
var $author$project$Tools$LimitGradients$emptySlopeStuff = {roads: _List_Nil, totalClamped: $ianmackenzie$elm_units$Quantity$zero, totalOffered: $ianmackenzie$elm_units$Quantity$zero};
var $ianmackenzie$elm_units$Quantity$equalWithin = F3(
	function (_v0, _v1, _v2) {
		var tolerance = _v0.a;
		var x = _v1.a;
		var y = _v2.a;
		return _Utils_cmp(
			$elm$core$Basics$abs(x - y),
			tolerance) < 1;
	});
var $ianmackenzie$elm_units$Quantity$multiplyBy = F2(
	function (scale, _v0) {
		var value = _v0.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(scale * value);
	});
var $author$project$Tools$LimitGradients$computeNewPoints = F2(
	function (options, track) {
		var adjustAltitude = F2(
			function (alt, pt) {
				return A3(
					$ianmackenzie$elm_geometry$Point3d$xyz,
					$ianmackenzie$elm_geometry$Point3d$xCoordinate(pt),
					$ianmackenzie$elm_geometry$Point3d$yCoordinate(pt),
					alt);
			});
		var _v0 = function () {
			var _v1 = options.extent;
			if (_v1.$ === 'ExtentIsRange') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var endIndex = $author$project$DomainModel$skipCount(track.trackTree) - fromEnd;
		var _v2 = _Utils_Tuple2(
			A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree),
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(
				A2($author$project$DomainModel$earthPointFromIndex, fromStart, track.trackTree)));
		var startDistance = _v2.a;
		var startAltitude = _v2.b;
		var _v3 = _Utils_Tuple2(
			A2($author$project$DomainModel$distanceFromIndex, endIndex, track.trackTree),
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(
				A2($author$project$DomainModel$earthPointFromIndex, endIndex, track.trackTree)));
		var endDistance = _v3.a;
		var endAltitude = _v3.b;
		var averageSlope = (A3($ianmackenzie$elm_units$Quantity$equalWithin, $ianmackenzie$elm_units$Length$centimeter, startAltitude, endAltitude) || A3($ianmackenzie$elm_units$Quantity$equalWithin, $ianmackenzie$elm_units$Length$centimeter, startDistance, endDistance)) ? 0.0 : A2(
			$ianmackenzie$elm_units$Quantity$ratio,
			A2($ianmackenzie$elm_units$Quantity$minus, startAltitude, endAltitude),
			A2($ianmackenzie$elm_units$Quantity$minus, startDistance, endDistance));
		var slopeDiscoveryFn = F2(
			function (road, slopeStuff) {
				var clampedSlope = 0.01 * A3($elm$core$Basics$clamp, 0 - options.maximumDescent, options.maximumAscent, road.gradientAtStart);
				var altitudeIfAverageSlope = A2($ianmackenzie$elm_units$Quantity$multiplyBy, averageSlope, road.trueLength);
				var altitudeChange = A2(
					$ianmackenzie$elm_units$Quantity$minus,
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(road.startPoint),
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(road.endPoint));
				var altitudeGap = A2(
					$ianmackenzie$elm_units$Quantity$minus,
					A2($ianmackenzie$elm_units$Quantity$multiplyBy, clampedSlope, road.trueLength),
					altitudeChange);
				var availableToOffer = A2($ianmackenzie$elm_units$Quantity$minus, altitudeChange, altitudeIfAverageSlope);
				var thisSectionSummary = ((_Utils_cmp(road.gradientAtStart, options.maximumAscent) < 1) && (_Utils_cmp(road.gradientAtStart, 0 - options.maximumDescent) > -1)) ? A2($author$project$Tools$LimitGradients$NotClamped, road, availableToOffer) : A2($author$project$Tools$LimitGradients$Clamped, road, clampedSlope);
				return {
					roads: A2($elm$core$List$cons, thisSectionSummary, slopeStuff.roads),
					totalClamped: A2($ianmackenzie$elm_units$Quantity$plus, slopeStuff.totalClamped, altitudeGap),
					totalOffered: A2($ianmackenzie$elm_units$Quantity$plus, slopeStuff.totalOffered, availableToOffer)
				};
			});
		var slopeInfo = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			fromStart,
			$author$project$DomainModel$skipCount(track.trackTree) - fromEnd,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			track.trackTree,
			slopeDiscoveryFn,
			$author$project$Tools$LimitGradients$emptySlopeStuff);
		var proRataToAllocate = (A3($ianmackenzie$elm_units$Quantity$equalWithin, $ianmackenzie$elm_units$Length$centimeter, $ianmackenzie$elm_units$Quantity$zero, slopeInfo.totalClamped) || A3($ianmackenzie$elm_units$Quantity$equalWithin, $ianmackenzie$elm_units$Length$centimeter, $ianmackenzie$elm_units$Quantity$zero, slopeInfo.totalOffered)) ? 0.0 : A2($ianmackenzie$elm_units$Quantity$ratio, slopeInfo.totalOffered, slopeInfo.totalClamped);
		var allocateProRata = F2(
			function (section, _v7) {
				var altitude = _v7.a;
				var outputs = _v7.b;
				var _v5 = function () {
					if (section.$ === 'Clamped') {
						var roadSection = section.a;
						var slope = section.b;
						var baseGPX = roadSection.sourceData.a;
						var altitudeChange = A2($ianmackenzie$elm_units$Quantity$multiplyBy, slope, roadSection.trueLength);
						var newStartAltitude = A2($ianmackenzie$elm_units$Quantity$minus, altitudeChange, altitude);
						var newStartPoint = A2(adjustAltitude, newStartAltitude, roadSection.startPoint);
						return _Utils_Tuple2(
							newStartPoint,
							_Utils_update(
								baseGPX,
								{altitude: newStartAltitude}));
					} else {
						var roadSection = section.a;
						var offered = section.b;
						var baseGPX = roadSection.sourceData.a;
						var altitudeChange = A2(
							$ianmackenzie$elm_units$Quantity$plus,
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, proRataToAllocate, offered),
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, roadSection.gradientAtStart / 100.0, roadSection.trueLength));
						var newStartAltitude = A2($ianmackenzie$elm_units$Quantity$minus, altitudeChange, altitude);
						var newStartPoint = A2(adjustAltitude, newStartAltitude, roadSection.startPoint);
						return _Utils_Tuple2(
							newStartPoint,
							_Utils_update(
								baseGPX,
								{altitude: newStartAltitude}));
					}
				}();
				var earth = _v5.a;
				var gpx = _v5.b;
				return _Utils_Tuple2(
					gpx.altitude,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(earth, gpx),
						outputs));
			});
		var _v4 = A3(
			$elm$core$List$foldl,
			allocateProRata,
			_Utils_Tuple2(endAltitude, _List_Nil),
			slopeInfo.roads);
		var adjustedPoints = _v4.b;
		return adjustedPoints;
	});
var $author$project$Tools$LimitGradients$apply = F2(
	function (options, track) {
		var newCourse = A2(
			$elm$core$List$map,
			$elm$core$Tuple$second,
			A2($author$project$Tools$LimitGradients$computeNewPoints, options, track));
		var _v0 = function () {
			var _v1 = options.extent;
			if (_v1.$ === 'ExtentIsRange') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5($author$project$DomainModel$replaceRange, fromStart, fromEnd, track.referenceLonLat, newCourse, track.trackTree);
		var oldPoints = A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree);
		return _Utils_Tuple2(
			newTree,
			A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints));
	});
var $author$project$BezierSplines$SplineFoldState = F3(
	function (roadMinusOne, roadMinusTwo, newPoints) {
		return {newPoints: newPoints, roadMinusOne: roadMinusOne, roadMinusTwo: roadMinusTwo};
	});
var $ianmackenzie$elm_geometry$CubicSpline3d$firstControlPoint = function (_v0) {
	var spline = _v0.a;
	return spline.firstControlPoint;
};
var $ianmackenzie$elm_geometry$CubicSpline3d$fourthControlPoint = function (_v0) {
	var spline = _v0.a;
	return spline.fourthControlPoint;
};
var $ianmackenzie$elm_geometry$Geometry$Types$Vector3d = function (a) {
	return {$: 'Vector3d', a: a};
};
var $ianmackenzie$elm_geometry$Vector3d$from = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: p2.x - p1.x, y: p2.y - p1.y, z: p2.z - p1.z});
	});
var $ianmackenzie$elm_geometry$Vector3d$length = function (_v0) {
	var v = _v0.a;
	var largestComponent = A2(
		$elm$core$Basics$max,
		$elm$core$Basics$abs(v.x),
		A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(v.y),
			$elm$core$Basics$abs(v.z)));
	if (!largestComponent) {
		return $ianmackenzie$elm_units$Quantity$zero;
	} else {
		var scaledZ = v.z / largestComponent;
		var scaledY = v.y / largestComponent;
		var scaledX = v.x / largestComponent;
		var scaledLength = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
		return $ianmackenzie$elm_units$Quantity$Quantity(scaledLength * largestComponent);
	}
};
var $ianmackenzie$elm_geometry$Vector3d$minus = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: v1.x - v2.x, y: v1.y - v2.y, z: v1.z - v2.z});
	});
var $ianmackenzie$elm_geometry$CubicSpline3d$secondControlPoint = function (_v0) {
	var spline = _v0.a;
	return spline.secondControlPoint;
};
var $ianmackenzie$elm_geometry$CubicSpline3d$thirdControlPoint = function (_v0) {
	var spline = _v0.a;
	return spline.thirdControlPoint;
};
var $ianmackenzie$elm_geometry$CubicSpline3d$maxSecondDerivativeMagnitude = function (spline) {
	var p4 = $ianmackenzie$elm_geometry$CubicSpline3d$fourthControlPoint(spline);
	var p3 = $ianmackenzie$elm_geometry$CubicSpline3d$thirdControlPoint(spline);
	var u3 = A2($ianmackenzie$elm_geometry$Vector3d$from, p3, p4);
	var p2 = $ianmackenzie$elm_geometry$CubicSpline3d$secondControlPoint(spline);
	var u2 = A2($ianmackenzie$elm_geometry$Vector3d$from, p2, p3);
	var v2 = A2($ianmackenzie$elm_geometry$Vector3d$minus, u2, u3);
	var p1 = $ianmackenzie$elm_geometry$CubicSpline3d$firstControlPoint(spline);
	var u1 = A2($ianmackenzie$elm_geometry$Vector3d$from, p1, p2);
	var v1 = A2($ianmackenzie$elm_geometry$Vector3d$minus, u1, u2);
	return A2(
		$ianmackenzie$elm_units$Quantity$multiplyBy,
		6,
		A2(
			$ianmackenzie$elm_units$Quantity$max,
			$ianmackenzie$elm_geometry$Vector3d$length(v1),
			$ianmackenzie$elm_geometry$Vector3d$length(v2)));
};
var $ianmackenzie$elm_units$Quantity$greaterThan = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return _Utils_cmp(x, y) > 0;
	});
var $ianmackenzie$elm_geometry$Curve$numApproximationSegments = function (_v0) {
	var maxError = _v0.maxError;
	var maxSecondDerivativeMagnitude = _v0.maxSecondDerivativeMagnitude;
	if (A2($ianmackenzie$elm_units$Quantity$greaterThan, $ianmackenzie$elm_units$Quantity$zero, maxError)) {
		var computedNumSegments = $elm$core$Basics$sqrt(
			A2(
				$ianmackenzie$elm_units$Quantity$ratio,
				maxSecondDerivativeMagnitude,
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, 8, maxError)));
		return A2(
			$elm$core$Basics$max,
			$elm$core$Basics$ceiling(computedNumSegments),
			1);
	} else {
		return 0;
	}
};
var $ianmackenzie$elm_geometry$CubicSpline3d$numApproximationSegments = F2(
	function (maxError, spline) {
		return $ianmackenzie$elm_geometry$Curve$numApproximationSegments(
			{
				maxError: maxError,
				maxSecondDerivativeMagnitude: $ianmackenzie$elm_geometry$CubicSpline3d$maxSecondDerivativeMagnitude(spline)
			});
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Polyline3d = function (a) {
	return {$: 'Polyline3d', a: a};
};
var $ianmackenzie$elm_geometry$Polyline3d$fromVertices = function (givenVertices) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Polyline3d(givenVertices);
};
var $ianmackenzie$elm_geometry$CubicSpline3d$pointOn = F2(
	function (spline, parameterValue) {
		var p4 = $ianmackenzie$elm_geometry$CubicSpline3d$fourthControlPoint(spline);
		var p3 = $ianmackenzie$elm_geometry$CubicSpline3d$thirdControlPoint(spline);
		var q3 = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, p3, p4, parameterValue);
		var p2 = $ianmackenzie$elm_geometry$CubicSpline3d$secondControlPoint(spline);
		var q2 = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, p2, p3, parameterValue);
		var r2 = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, q2, q3, parameterValue);
		var p1 = $ianmackenzie$elm_geometry$CubicSpline3d$firstControlPoint(spline);
		var q1 = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, p1, p2, parameterValue);
		var r1 = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, q1, q2, parameterValue);
		return A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, r1, r2, parameterValue);
	});
var $ianmackenzie$elm_1d_parameter$Parameter1d$range = F5(
	function (startIndex, index, divisor, _function, accumulated) {
		range:
		while (true) {
			var newValue = _function(index / divisor);
			var newAccumulated = A2($elm$core$List$cons, newValue, accumulated);
			if (_Utils_eq(index, startIndex)) {
				return newAccumulated;
			} else {
				var $temp$startIndex = startIndex,
					$temp$index = index - 1,
					$temp$divisor = divisor,
					$temp$function = _function,
					$temp$accumulated = newAccumulated;
				startIndex = $temp$startIndex;
				index = $temp$index;
				divisor = $temp$divisor;
				_function = $temp$function;
				accumulated = $temp$accumulated;
				continue range;
			}
		}
	});
var $ianmackenzie$elm_1d_parameter$Parameter1d$steps = F2(
	function (n, _function) {
		return (n < 1) ? _List_Nil : A5($ianmackenzie$elm_1d_parameter$Parameter1d$range, 0, n, n, _function, _List_Nil);
	});
var $ianmackenzie$elm_geometry$CubicSpline3d$segments = F2(
	function (numSegments, spline) {
		return $ianmackenzie$elm_geometry$Polyline3d$fromVertices(
			A2(
				$ianmackenzie$elm_1d_parameter$Parameter1d$steps,
				numSegments,
				$ianmackenzie$elm_geometry$CubicSpline3d$pointOn(spline)));
	});
var $ianmackenzie$elm_geometry$CubicSpline3d$approximate = F2(
	function (maxError, spline) {
		return A2(
			$ianmackenzie$elm_geometry$CubicSpline3d$segments,
			A2($ianmackenzie$elm_geometry$CubicSpline3d$numApproximationSegments, maxError, spline),
			spline);
	});
var $ianmackenzie$elm_geometry$Geometry$Types$CubicSpline3d = function (a) {
	return {$: 'CubicSpline3d', a: a};
};
var $ianmackenzie$elm_geometry$CubicSpline3d$fromControlPoints = F4(
	function (p1, p2, p3, p4) {
		return $ianmackenzie$elm_geometry$Geometry$Types$CubicSpline3d(
			{firstControlPoint: p1, fourthControlPoint: p4, secondControlPoint: p2, thirdControlPoint: p3});
	});
var $ianmackenzie$elm_geometry$Point3d$midpoint = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p1.x + (0.5 * (p2.x - p1.x)), y: p1.y + (0.5 * (p2.y - p1.y)), z: p1.z + (0.5 * (p2.z - p1.z))});
	});
var $ianmackenzie$elm_geometry$Polyline3d$vertices = function (_v0) {
	var polylineVertices = _v0.a;
	return polylineVertices;
};
var $author$project$BezierSplines$bezierSplineApproximation = F6(
	function (isLoop, tension, tolerance, startIndx, endIndex, treeNode) {
		var midPoint = function (road) {
			return A2($ianmackenzie$elm_geometry$Point3d$midpoint, road.startPoint, road.endPoint);
		};
		var foldFn = F2(
			function (road, state) {
				var _v0 = state.roadMinusOne;
				if (_v0.$ === 'Nothing') {
					return _Utils_update(
						state,
						{
							roadMinusOne: $elm$core$Maybe$Just(road)
						});
				} else {
					var roadMinusOne = _v0.a;
					var _v1 = _Utils_Tuple2(
						_Utils_Tuple2(
							midPoint(roadMinusOne),
							roadMinusOne.endPoint),
						_Utils_Tuple2(
							road.startPoint,
							midPoint(road)));
					var _v2 = _v1.a;
					var b1 = _v2.a;
					var c1 = _v2.b;
					var _v3 = _v1.b;
					var a2 = _v3.a;
					var b2 = _v3.b;
					var spline = A4($ianmackenzie$elm_geometry$CubicSpline3d$fromControlPoints, b1, c1, a2, b2);
					var polylineFromSpline = A2(
						$ianmackenzie$elm_geometry$CubicSpline3d$approximate,
						$ianmackenzie$elm_units$Length$meters(0.2 * tolerance),
						spline);
					var vertices = $elm$core$List$reverse(
						A2(
							$elm$core$List$drop,
							1,
							$ianmackenzie$elm_geometry$Polyline3d$vertices(polylineFromSpline)));
					return _Utils_update(
						state,
						{
							newPoints: _Utils_ap(vertices, state.newPoints),
							roadMinusOne: $elm$core$Maybe$Just(road),
							roadMinusTwo: state.roadMinusOne
						});
				}
			});
		var foldOutput = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			startIndx,
			endIndex,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			treeNode,
			foldFn,
			A3($author$project$BezierSplines$SplineFoldState, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, _List_Nil));
		return $elm$core$List$reverse(foldOutput.newPoints);
	});
var $ianmackenzie$elm_geometry$Geometry$Types$LineSegment3d = function (a) {
	return {$: 'LineSegment3d', a: a};
};
var $ianmackenzie$elm_geometry$LineSegment3d$fromEndpoints = function (givenEndpoints) {
	return $ianmackenzie$elm_geometry$Geometry$Types$LineSegment3d(givenEndpoints);
};
var $ianmackenzie$elm_geometry$LineSegment3d$from = F2(
	function (givenStartPoint, givenEndPoint) {
		return $ianmackenzie$elm_geometry$LineSegment3d$fromEndpoints(
			_Utils_Tuple2(givenStartPoint, givenEndPoint));
	});
var $ianmackenzie$elm_geometry$Triangle3d$vertices = function (_v0) {
	var triangleVertices = _v0.a;
	return triangleVertices;
};
var $ianmackenzie$elm_geometry$Triangle3d$edges = function (triangle) {
	var _v0 = $ianmackenzie$elm_geometry$Triangle3d$vertices(triangle);
	var p1 = _v0.a;
	var p2 = _v0.b;
	var p3 = _v0.c;
	return _Utils_Tuple3(
		A2($ianmackenzie$elm_geometry$LineSegment3d$from, p1, p2),
		A2($ianmackenzie$elm_geometry$LineSegment3d$from, p2, p3),
		A2($ianmackenzie$elm_geometry$LineSegment3d$from, p3, p1));
};
var $ianmackenzie$elm_geometry$LineSegment3d$endPoint = function (_v0) {
	var _v1 = _v0.a;
	var end = _v1.b;
	return end;
};
var $ianmackenzie$elm_geometry$Geometry$Types$Triangle3d = function (a) {
	return {$: 'Triangle3d', a: a};
};
var $ianmackenzie$elm_geometry$Triangle3d$from = F3(
	function (p1, p2, p3) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Triangle3d(
			_Utils_Tuple3(p1, p2, p3));
	});
var $ianmackenzie$elm_geometry$LineSegment3d$endpoints = function (_v0) {
	var lineSegmentEndpoints = _v0.a;
	return lineSegmentEndpoints;
};
var $ianmackenzie$elm_geometry$LineSegment3d$vector = function (lineSegment) {
	var _v0 = $ianmackenzie$elm_geometry$LineSegment3d$endpoints(lineSegment);
	var p1 = _v0.a;
	var p2 = _v0.b;
	return A2($ianmackenzie$elm_geometry$Vector3d$from, p1, p2);
};
var $ianmackenzie$elm_geometry$LineSegment3d$length = function (lineSegment) {
	return $ianmackenzie$elm_geometry$Vector3d$length(
		$ianmackenzie$elm_geometry$LineSegment3d$vector(lineSegment));
};
var $ianmackenzie$elm_geometry$Vector3d$scaleBy = F2(
	function (k, _v0) {
		var v = _v0.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: k * v.x, y: k * v.y, z: k * v.z});
	});
var $ianmackenzie$elm_geometry$LineSegment3d$startPoint = function (_v0) {
	var _v1 = _v0.a;
	var start = _v1.a;
	return start;
};
var $ianmackenzie$elm_geometry$Point3d$translateBy = F2(
	function (_v0, _v1) {
		var v = _v0.a;
		var p = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p.x + v.x, y: p.y + v.y, z: p.z + v.z});
	});
var $author$project$BezierSplines$bezierSplinesThroughExistingPoints = F6(
	function (isLoop, tension, tolerance, startIndx, endIndex, treeNode) {
		var controlPointsFromTriangle = function (triangle) {
			var _v8 = $ianmackenzie$elm_geometry$Triangle3d$edges(triangle);
			var entryEdge = _v8.a;
			var exitEdge = _v8.b;
			var oppositeEdge = _v8.c;
			var controlPointVector = A2(
				$ianmackenzie$elm_geometry$Vector3d$from,
				$ianmackenzie$elm_geometry$LineSegment3d$startPoint(oppositeEdge),
				$ianmackenzie$elm_geometry$LineSegment3d$endPoint(oppositeEdge));
			var _v9 = _Utils_Tuple3(
				$ianmackenzie$elm_units$Length$inMeters(
					$ianmackenzie$elm_geometry$LineSegment3d$length(entryEdge)),
				$ianmackenzie$elm_units$Length$inMeters(
					$ianmackenzie$elm_geometry$LineSegment3d$length(oppositeEdge)),
				$ianmackenzie$elm_units$Length$inMeters(
					$ianmackenzie$elm_geometry$LineSegment3d$length(exitEdge)));
			var ab = _v9.a;
			var ac = _v9.b;
			var bc = _v9.c;
			var _v10 = _Utils_Tuple2((((-1.0) * tension) * ab) / (ab + bc), (tension * bc) / (ab + bc));
			var entryFactor = _v10.a;
			var exitFactor = _v10.b;
			var _v11 = _Utils_Tuple2(
				A2($ianmackenzie$elm_geometry$Vector3d$scaleBy, entryFactor, controlPointVector),
				A2($ianmackenzie$elm_geometry$Vector3d$scaleBy, exitFactor, controlPointVector));
			var entryScaleVector = _v11.a;
			var exitScalevector = _v11.b;
			var _v12 = $ianmackenzie$elm_geometry$Triangle3d$vertices(triangle);
			var b = _v12.b;
			var _v13 = _Utils_Tuple2(
				A2($ianmackenzie$elm_geometry$Point3d$translateBy, entryScaleVector, b),
				A2($ianmackenzie$elm_geometry$Point3d$translateBy, exitScalevector, b));
			var entryPoint = _v13.a;
			var exitPoint = _v13.b;
			return _Utils_Tuple3(entryPoint, b, exitPoint);
		};
		var foldFn = F2(
			function (road, state) {
				var _v0 = _Utils_Tuple2(state.roadMinusOne, state.roadMinusTwo);
				if (_v0.a.$ === 'Nothing') {
					if (_v0.b.$ === 'Nothing') {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return _Utils_update(
							state,
							{
								roadMinusOne: $elm$core$Maybe$Just(road)
							});
					} else {
						var _v4 = _v0.a;
						var cantHappen = _v0.b.a;
						return state;
					}
				} else {
					if (_v0.b.$ === 'Nothing') {
						var previousRoad = _v0.a.a;
						var _v3 = _v0.b;
						return _Utils_update(
							state,
							{
								roadMinusOne: $elm$core$Maybe$Just(road),
								roadMinusTwo: state.roadMinusOne
							});
					} else {
						var roadMinusOne = _v0.a.a;
						var roadMinusTwo = _v0.b.a;
						var triangle2 = A3($ianmackenzie$elm_geometry$Triangle3d$from, roadMinusOne.startPoint, roadMinusOne.endPoint, road.endPoint);
						var triangle1 = A3($ianmackenzie$elm_geometry$Triangle3d$from, roadMinusTwo.startPoint, roadMinusTwo.endPoint, roadMinusOne.endPoint);
						var _v5 = _Utils_Tuple2(
							controlPointsFromTriangle(triangle1),
							controlPointsFromTriangle(triangle2));
						var _v6 = _v5.a;
						var c1 = _v6.a;
						var b1 = _v6.b;
						var a1 = _v6.c;
						var _v7 = _v5.b;
						var c2 = _v7.a;
						var b2 = _v7.b;
						var a2 = _v7.c;
						var spline = A4($ianmackenzie$elm_geometry$CubicSpline3d$fromControlPoints, b1, c1, a2, b2);
						var polylineFromSpline = A2(
							$ianmackenzie$elm_geometry$CubicSpline3d$approximate,
							$ianmackenzie$elm_units$Length$meters(0.2 * tolerance),
							spline);
						var vertices = $elm$core$List$reverse(
							A2(
								$elm$core$List$drop,
								1,
								$ianmackenzie$elm_geometry$Polyline3d$vertices(polylineFromSpline)));
						return _Utils_update(
							state,
							{
								newPoints: _Utils_ap(vertices, state.newPoints),
								roadMinusOne: $elm$core$Maybe$Just(road),
								roadMinusTwo: state.roadMinusOne
							});
					}
				}
			});
		var foldOutput = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			startIndx,
			endIndex,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			treeNode,
			foldFn,
			A3($author$project$BezierSplines$SplineFoldState, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, _List_Nil));
		return $elm$core$List$reverse(foldOutput.newPoints);
	});
var $author$project$Tools$BezierSplines$computeNewPoints = F2(
	function (options, track) {
		var splineFunction = function () {
			var _v2 = options.bezierStyle;
			if (_v2.$ === 'ThroughExisting') {
				return $author$project$BezierSplines$bezierSplinesThroughExistingPoints;
			} else {
				return $author$project$BezierSplines$bezierSplineApproximation;
			}
		}();
		var _v0 = function () {
			var _v1 = options.extent;
			if (_v1.$ === 'ExtentIsRange') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var splineEarthPoints = A6(
			splineFunction,
			false,
			options.bezierTension,
			options.bezierTolerance,
			fromStart,
			$author$project$DomainModel$skipCount(track.trackTree) - fromEnd,
			track.trackTree);
		var previewPoints = A2(
			$elm$core$List$map,
			function (earth) {
				return _Utils_Tuple2(
					earth,
					A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, earth));
			},
			splineEarthPoints);
		return previewPoints;
	});
var $author$project$Tools$BezierSplines$applyUsingOptions = F2(
	function (options, track) {
		var _v0 = function () {
			var _v1 = options.extent;
			if (_v1.$ === 'ExtentIsRange') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5(
			$author$project$DomainModel$replaceRange,
			fromStart + 1,
			fromEnd + 1,
			track.referenceLonLat,
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$second,
				A2($author$project$Tools$BezierSplines$computeNewPoints, options, track)),
			track.trackTree);
		var oldPoints = A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree);
		return _Utils_Tuple3(
			newTree,
			A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints),
			_Utils_Tuple2(fromStart, fromEnd));
	});
var $author$project$Tools$BezierSplines$bezierApproximationFor1CQF = function (track) {
	var _v0 = A2($author$project$Tools$BezierSplines$applyUsingOptions, $author$project$Tools$BezierSplines$defaultOptions, track);
	var outputTree = _v0.a;
	var oldPoints = _v0.b;
	return A2($elm$core$Maybe$withDefault, track.trackTree, outputTree);
};
var $author$project$Tools$CentroidAverage$FoldState = F2(
	function (roadMinusOne, newPoints) {
		return {newPoints: newPoints, roadMinusOne: roadMinusOne};
	});
var $ianmackenzie$elm_geometry$Point3d$centroid3 = F3(
	function (_v0, _v1, _v2) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		var p3 = _v2.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: (p1.x + ((p2.x - p1.x) / 3)) + ((p3.x - p1.x) / 3), y: (p1.y + ((p2.y - p1.y) / 3)) + ((p3.y - p1.y) / 3), z: (p1.z + ((p2.z - p1.z) / 3)) + ((p3.z - p1.z) / 3)});
	});
var $ianmackenzie$elm_geometry$Triangle3d$centroid = function (triangle) {
	var _v0 = $ianmackenzie$elm_geometry$Triangle3d$vertices(triangle);
	var p1 = _v0.a;
	var p2 = _v0.b;
	var p3 = _v0.c;
	return A3($ianmackenzie$elm_geometry$Point3d$centroid3, p1, p2, p3);
};
var $ianmackenzie$elm_geometry$Vector3d$projectOnto = F2(
	function (_v0, _v1) {
		var plane = _v0.a;
		var v = _v1.a;
		var _v2 = plane.normalDirection;
		var n = _v2.a;
		var normalProjection = ((v.x * n.x) + (v.y * n.y)) + (v.z * n.z);
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: v.x - (normalProjection * n.x), y: v.y - (normalProjection * n.y), z: v.z - (normalProjection * n.z)});
	});
var $ianmackenzie$elm_geometry$Point3d$origin = $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
	{x: 0, y: 0, z: 0});
var $ianmackenzie$elm_geometry$Geometry$Types$Plane3d = function (a) {
	return {$: 'Plane3d', a: a};
};
var $ianmackenzie$elm_geometry$Plane3d$through = F2(
	function (givenPoint, givenNormalDirection) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Plane3d(
			{normalDirection: givenNormalDirection, originPoint: givenPoint});
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Direction3d = function (a) {
	return {$: 'Direction3d', a: a};
};
var $ianmackenzie$elm_geometry$Direction3d$unsafe = function (givenComponents) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(givenComponents);
};
var $ianmackenzie$elm_geometry$Direction3d$positiveZ = $ianmackenzie$elm_geometry$Direction3d$unsafe(
	{x: 0, y: 0, z: 1});
var $ianmackenzie$elm_geometry$Direction3d$z = $ianmackenzie$elm_geometry$Direction3d$positiveZ;
var $ianmackenzie$elm_geometry$Plane3d$xy = A2($ianmackenzie$elm_geometry$Plane3d$through, $ianmackenzie$elm_geometry$Point3d$origin, $ianmackenzie$elm_geometry$Direction3d$z);
var $ianmackenzie$elm_geometry$Vector3d$xyz = F3(
	function (_v0, _v1, _v2) {
		var x = _v0.a;
		var y = _v1.a;
		var z = _v2.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: x, y: y, z: z});
	});
var $ianmackenzie$elm_geometry$Vector3d$zComponent = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(v.z);
};
var $ianmackenzie$elm_geometry$Vector3d$zero = $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
	{x: 0, y: 0, z: 0});
var $author$project$Tools$CentroidAverage$centroidAverage = F5(
	function (isLoop, options, fromStart, fromEnd, treeNode) {
		var foldFn = F2(
			function (road, state) {
				var _v0 = state.roadMinusOne;
				if (_v0.$ === 'Nothing') {
					return _Utils_update(
						state,
						{
							roadMinusOne: $elm$core$Maybe$Just(road)
						});
				} else {
					var roadMinusOne = _v0.a;
					var originalPoint = road.startPoint;
					var triangle = A3($ianmackenzie$elm_geometry$Triangle3d$from, roadMinusOne.startPoint, originalPoint, road.endPoint);
					var centroid = $ianmackenzie$elm_geometry$Triangle3d$centroid(triangle);
					var newPoint = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, originalPoint, centroid, options.weighting);
					var shiftVector = A2($ianmackenzie$elm_geometry$Vector3d$from, originalPoint, newPoint);
					var shiftWithOptions = (options.applyToAltitude && options.applyToPosition) ? shiftVector : (options.applyToPosition ? A2($ianmackenzie$elm_geometry$Vector3d$projectOnto, $ianmackenzie$elm_geometry$Plane3d$xy, shiftVector) : (options.applyToAltitude ? A3(
						$ianmackenzie$elm_geometry$Vector3d$xyz,
						$ianmackenzie$elm_units$Quantity$zero,
						$ianmackenzie$elm_units$Quantity$zero,
						$ianmackenzie$elm_geometry$Vector3d$zComponent(shiftVector)) : $ianmackenzie$elm_geometry$Vector3d$zero));
					var adjustedPoint = A2($ianmackenzie$elm_geometry$Point3d$translateBy, shiftWithOptions, originalPoint);
					return _Utils_update(
						state,
						{
							newPoints: A2($elm$core$List$cons, adjustedPoint, state.newPoints),
							roadMinusOne: $elm$core$Maybe$Just(road)
						});
				}
			});
		var foldOutput = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			fromStart,
			$author$project$DomainModel$skipCount(treeNode) - fromEnd,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			treeNode,
			foldFn,
			A2($author$project$Tools$CentroidAverage$FoldState, $elm$core$Maybe$Nothing, _List_Nil));
		return $elm$core$List$reverse(foldOutput.newPoints);
	});
var $author$project$Tools$CentroidAverage$computeNewPoints = F2(
	function (options, track) {
		var _v0 = function () {
			var _v1 = options.extent;
			if (_v1.$ === 'ExtentRange') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var earthPoints = A5($author$project$Tools$CentroidAverage$centroidAverage, false, options, fromStart, fromEnd, track.trackTree);
		var previewPoints = A2(
			$elm$core$List$map,
			function (earth) {
				return _Utils_Tuple2(
					earth,
					A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, earth));
			},
			earthPoints);
		return previewPoints;
	});
var $author$project$Tools$CentroidAverage$applyUsingOptions = F2(
	function (options, track) {
		var _v0 = function () {
			var _v1 = options.extent;
			if (_v1.$ === 'ExtentRange') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5(
			$author$project$DomainModel$replaceRange,
			fromStart + 1,
			fromEnd + 1,
			track.referenceLonLat,
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$second,
				A2($author$project$Tools$CentroidAverage$computeNewPoints, options, track)),
			track.trackTree);
		var oldPoints = A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree);
		return _Utils_Tuple2(
			newTree,
			A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints));
	});
var $author$project$Tools$CentroidAverage$centroidAverageFor1CQF = function (track) {
	var _v0 = A2($author$project$Tools$CentroidAverage$applyUsingOptions, $author$project$Tools$CentroidAverage$defaultOptions, track);
	var outputTree = _v0.a;
	var oldPoints = _v0.b;
	return A2($elm$core$Maybe$withDefault, track.trackTree, outputTree);
};
var $JohnBugner$elm_loop$Loop$for = function () {
	var for_ = F4(
		function (i, n, f, v) {
			for_:
			while (true) {
				if (_Utils_cmp(i, n) < 0) {
					var $temp$i = i + 1,
						$temp$n = n,
						$temp$f = f,
						$temp$v = f(v);
					i = $temp$i;
					n = $temp$n;
					f = $temp$f;
					v = $temp$v;
					continue for_;
				} else {
					return v;
				}
			}
		});
	return for_(0);
}();
var $author$project$Tools$Interpolate$interpolateFor1CQF = function (track) {
	var _v0 = A2($author$project$Tools$Interpolate$apply, $author$project$Tools$Interpolate$defaultOptions, track);
	var outputTree = _v0.a;
	var oldPoints = _v0.b;
	return A2($elm$core$Maybe$withDefault, track.trackTree, outputTree);
};
var $author$project$DomainModel$foldOverRoute = F3(
	function (foldFn, treeNode, startValues) {
		return A5(
			$author$project$DomainModel$traverseTreeBetween,
			0,
			$author$project$DomainModel$skipCount(treeNode),
			treeNode,
			foldFn,
			startValues);
	});
var $author$project$DomainModel$getAllGPXPointsInDict = function (treeNode) {
	var internalFoldFn = F2(
		function (road, _v1) {
			var index = _v1.a;
			var dict = _v1.b;
			return _Utils_Tuple2(
				index + 1,
				A3($elm$core$Dict$insert, index, road.sourceData.b, dict));
		});
	var _v0 = A3(
		$author$project$DomainModel$foldOverRoute,
		internalFoldFn,
		treeNode,
		_Utils_Tuple2(
			1,
			A3(
				$elm$core$Dict$insert,
				0,
				A2($author$project$DomainModel$gpxPointFromIndex, 0, treeNode),
				$elm$core$Dict$empty)));
	var outputs = _v0.b;
	return outputs;
};
var $ianmackenzie$elm_geometry$Direction2d$positiveX = $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
	{x: 1, y: 0});
var $ianmackenzie$elm_geometry$Direction2d$x = $ianmackenzie$elm_geometry$Direction2d$positiveX;
var $author$project$DomainModel$treeFromSourcePoints = function (track) {
	var referencePoint = A2(
		$elm$core$Maybe$withDefault,
		A3($author$project$DomainModel$GPXSource, $ianmackenzie$elm_geometry$Direction2d$x, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero),
		$elm$core$List$head(track));
	return A2($author$project$DomainModel$treeFromSourcesWithExistingReference, referencePoint, track);
};
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $author$project$Tools$Simplify$apply = F2(
	function (options, track) {
		var originalCourse = $author$project$DomainModel$getAllGPXPointsInDict(track.trackTree);
		var oldPoints = $elm$core$Dict$values(originalCourse);
		var newCourse = A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, out) {
					return A2($elm$core$Dict$remove, k, out);
				}),
			originalCourse,
			options.pointsToRemove);
		var newTree = $author$project$DomainModel$treeFromSourcePoints(
			$elm$core$Dict$values(newCourse));
		return _Utils_Tuple2(newTree, oldPoints);
	});
var $ianmackenzie$elm_geometry$Vector3d$cross = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: (v1.y * v2.z) - (v1.z * v2.y), y: (v1.z * v2.x) - (v1.x * v2.z), z: (v1.x * v2.y) - (v1.y * v2.x)});
	});
var $ianmackenzie$elm_geometry$Triangle3d$area = function (triangle) {
	var _v0 = $ianmackenzie$elm_geometry$Triangle3d$vertices(triangle);
	var p1 = _v0.a;
	var p2 = _v0.b;
	var p3 = _v0.c;
	var firstVector = A2($ianmackenzie$elm_geometry$Vector3d$from, p1, p2);
	var secondVector = A2($ianmackenzie$elm_geometry$Vector3d$from, p1, p3);
	return A2(
		$ianmackenzie$elm_units$Quantity$multiplyBy,
		0.5,
		$ianmackenzie$elm_geometry$Vector3d$length(
			A2($ianmackenzie$elm_geometry$Vector3d$cross, secondVector, firstVector)));
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$List$sortWith = _List_sortWith;
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $author$project$Tools$Simplify$findSimplifications = F2(
	function (options, tree) {
		var foldFn = F2(
			function (road, _v5) {
				var index = _v5.a;
				var previousIfAny = _v5.b;
				var outputs = _v5.c;
				if (previousIfAny.$ === 'Nothing') {
					return _Utils_Tuple3(
						1,
						$elm$core$Maybe$Just(road),
						_List_Nil);
				} else {
					var previous = previousIfAny.a;
					return _Utils_Tuple3(
						index + 1,
						$elm$core$Maybe$Just(road),
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								index,
								$ianmackenzie$elm_geometry$Triangle3d$area(
									A3($ianmackenzie$elm_geometry$Triangle3d$from, previous.startPoint, road.startPoint, road.endPoint))),
							outputs));
				}
			});
		var _v0 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(tree),
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			tree,
			foldFn,
			_Utils_Tuple3(0, $elm$core$Maybe$Nothing, _List_Nil));
		var triangleInfo = _v0.c;
		var selectSmallestAreas = A2(
			$elm$core$List$take,
			($elm$core$List$length(triangleInfo) / 5) | 0,
			A2(
				$elm$core$List$sortWith,
				F2(
					function (_v2, _v3) {
						var idx1 = _v2.a;
						var area1 = _v2.b;
						var idx2 = _v3.a;
						var area2 = _v3.b;
						return A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, area2, area1) ? $elm$core$Basics$LT : $elm$core$Basics$GT;
					}),
				triangleInfo));
		var nonAdjacentEntries = A3(
			$elm$core$List$foldl,
			F2(
				function (_v1, outputs) {
					var idx = _v1.a;
					var area = _v1.b;
					return (A2($elm$core$Dict$member, idx + 1, outputs) || A2($elm$core$Dict$member, idx - 1, outputs)) ? outputs : A3($elm$core$Dict$insert, idx, idx, outputs);
				}),
			$elm$core$Dict$empty,
			selectSmallestAreas);
		return _Utils_update(
			options,
			{pointsToRemove: nonAdjacentEntries});
	});
var $author$project$Tools$Simplify$simplifyFor1CQF = function (track) {
	var options = A2($author$project$Tools$Simplify$findSimplifications, $author$project$Tools$Simplify$defaultOptions, track.trackTree);
	var _v0 = A2($author$project$Tools$Simplify$apply, options, track);
	var outputTree = _v0.a;
	var oldPoints = _v0.b;
	return A2($elm$core$Maybe$withDefault, track.trackTree, outputTree);
};
var $author$project$Tools$OneClickQuickFix$apply = function (originalTrack) {
	var trackWithNoMarkers = _Utils_update(
		originalTrack,
		{markerPosition: $elm$core$Maybe$Nothing});
	var smoothTrack = function (track) {
		return _Utils_update(
			track,
			{
				trackTree: $author$project$Tools$CentroidAverage$centroidAverageFor1CQF(track)
			});
	};
	var simplifyTrack = function (anyTrack) {
		simplifyTrack:
		while (true) {
			var treeWithOneRoundOfPointsRemoved = $author$project$Tools$Simplify$simplifyFor1CQF(anyTrack);
			var mnumberOfPointsRemoved = $author$project$DomainModel$skipCount(treeWithOneRoundOfPointsRemoved) - $author$project$DomainModel$skipCount(anyTrack.trackTree);
			var meanSpacing = A2(
				$ianmackenzie$elm_units$Quantity$divideBy,
				$author$project$DomainModel$skipCount(anyTrack.trackTree),
				$author$project$DomainModel$trueLength(anyTrack.trackTree));
			if (A2(
				$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
				$ianmackenzie$elm_units$Length$meters(25),
				meanSpacing) && (mnumberOfPointsRemoved > 0)) {
				var $temp$anyTrack = _Utils_update(
					anyTrack,
					{trackTree: treeWithOneRoundOfPointsRemoved});
				anyTrack = $temp$anyTrack;
				continue simplifyTrack;
			} else {
				return _Utils_update(
					anyTrack,
					{trackTree: treeWithOneRoundOfPointsRemoved});
			}
		}
	};
	var interpolateTrack = function (track) {
		return _Utils_update(
			track,
			{
				trackTree: $author$project$Tools$Interpolate$interpolateFor1CQF(track)
			});
	};
	var bezierApprox = function (track) {
		return _Utils_update(
			track,
			{
				trackTree: $author$project$Tools$BezierSplines$bezierApproximationFor1CQF(track)
			});
	};
	var finalTrack = A3(
		$JohnBugner$elm_loop$Loop$for,
		3,
		smoothTrack,
		bezierApprox(
			simplifyTrack(trackWithNoMarkers)));
	return _Utils_Tuple2(
		$elm$core$Maybe$Just(finalTrack.trackTree),
		$author$project$DomainModel$getAllGPXPointsInNaturalOrder(originalTrack.trackTree));
};
var $ianmackenzie$elm_geometry$Point3d$along = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var distance = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var _v3 = axis.direction;
		var d = _v3.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p0.x + (distance * d.x), y: p0.y + (distance * d.y), z: p0.z + (distance * d.z)});
	});
var $elm$core$Basics$acos = _Basics_acos;
var $ianmackenzie$elm_units$Angle$acos = function (x) {
	return $ianmackenzie$elm_units$Quantity$Quantity(
		$elm$core$Basics$acos(x));
};
var $ianmackenzie$elm_units$Quantity$twice = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(2 * value);
};
var $ianmackenzie$elm_geometry$Curve$arcApproximationSegments = function (_v0) {
	var maxError = _v0.maxError;
	var radius = _v0.radius;
	var sweptAngle = _v0.sweptAngle;
	if (_Utils_eq(sweptAngle, $ianmackenzie$elm_units$Quantity$zero)) {
		return 1;
	} else {
		if (A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, maxError)) {
			return 0;
		} else {
			if (A2(
				$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
				$ianmackenzie$elm_units$Quantity$twice(radius),
				maxError)) {
				return 1;
			} else {
				var maxSegmentAngle = $ianmackenzie$elm_units$Quantity$twice(
					$ianmackenzie$elm_units$Angle$acos(
						1 - A2($ianmackenzie$elm_units$Quantity$ratio, maxError, radius)));
				return $elm$core$Basics$ceiling(
					A2(
						$ianmackenzie$elm_units$Quantity$ratio,
						$ianmackenzie$elm_units$Quantity$abs(sweptAngle),
						maxSegmentAngle));
			}
		}
	}
};
var $ianmackenzie$elm_geometry$Quantity$Extra$lOverTheta = F2(
	function (_v0, _v1) {
		var l = _v0.a;
		var theta = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(l / theta);
	});
var $ianmackenzie$elm_geometry$Arc3d$radius = function (_v0) {
	var arc = _v0.a;
	return A2($ianmackenzie$elm_geometry$Quantity$Extra$lOverTheta, arc.signedLength, arc.sweptAngle);
};
var $ianmackenzie$elm_geometry$Arc3d$sweptAngle = function (_v0) {
	var properties = _v0.a;
	return properties.sweptAngle;
};
var $ianmackenzie$elm_geometry$Arc3d$numApproximationSegments = F2(
	function (maxError, arc) {
		return $ianmackenzie$elm_geometry$Curve$arcApproximationSegments(
			{
				maxError: maxError,
				radius: $ianmackenzie$elm_geometry$Arc3d$radius(arc),
				sweptAngle: $ianmackenzie$elm_geometry$Arc3d$sweptAngle(arc)
			});
	});
var $elm$core$Basics$tan = _Basics_tan;
var $ianmackenzie$elm_geometry$Arc3d$pointOn = F2(
	function (_v0, t) {
		var arc = _v0.a;
		var _v1 = arc.yDirection;
		var v = _v1.a;
		var _v2 = arc.xDirection;
		var u = _v2.a;
		var _v3 = arc.sweptAngle;
		var thetaMax = _v3.a;
		var _v4 = arc.signedLength;
		var sMax = _v4.a;
		var _v5 = arc.startPoint;
		var p = _v5.a;
		if (!thetaMax) {
			var s = t * sMax;
			return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
				{x: p.x + (s * u.x), y: p.y + (s * u.y), z: p.z + (s * u.z)});
		} else {
			var theta = t * thetaMax;
			var r = sMax / thetaMax;
			var x = r * $elm$core$Basics$sin(theta);
			var y = (_Utils_cmp(
				$elm$core$Basics$abs(theta),
				$elm$core$Basics$pi / 2) < 0) ? (x * $elm$core$Basics$tan(0.5 * theta)) : (r * (1 - $elm$core$Basics$cos(theta)));
			return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
				{x: (p.x + (x * u.x)) + (y * v.x), y: (p.y + (x * u.y)) + (y * v.y), z: (p.z + (x * u.z)) + (y * v.z)});
		}
	});
var $ianmackenzie$elm_geometry$Arc3d$segments = F2(
	function (numSegments, arc) {
		return $ianmackenzie$elm_geometry$Polyline3d$fromVertices(
			A2(
				$ianmackenzie$elm_1d_parameter$Parameter1d$steps,
				numSegments,
				$ianmackenzie$elm_geometry$Arc3d$pointOn(arc)));
	});
var $ianmackenzie$elm_geometry$Arc3d$approximate = F2(
	function (maxError, arc) {
		return A2(
			$ianmackenzie$elm_geometry$Arc3d$segments,
			A2($ianmackenzie$elm_geometry$Arc3d$numApproximationSegments, maxError, arc),
			arc);
	});
var $author$project$DomainModel$getFirstLeaf = function (someNode) {
	getFirstLeaf:
	while (true) {
		if (someNode.$ === 'Leaf') {
			var leaf = someNode.a;
			return leaf;
		} else {
			var node = someNode.a;
			var $temp$someNode = node.left;
			someNode = $temp$someNode;
			continue getFirstLeaf;
		}
	}
};
var $elm_community$list_extra$List$Extra$last = function (items) {
	last:
	while (true) {
		if (!items.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!items.b.b) {
				var x = items.a;
				return $elm$core$Maybe$Just(x);
			} else {
				var rest = items.b;
				var $temp$items = rest;
				items = $temp$items;
				continue last;
			}
		}
	}
};
var $author$project$Tools$Nudge$effectiveDirection = F2(
	function (index, track) {
		var thisLeaf = $author$project$DomainModel$asRecord(
			A2($author$project$DomainModel$leafFromIndex, index, track.trackTree));
		var precedingLeaf = $author$project$DomainModel$asRecord(
			A2($author$project$DomainModel$leafFromIndex, index - 1, track.trackTree));
		var deviation = A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, precedingLeaf.directionAtStart, thisLeaf.directionAtStart);
		var halfDeviation = $ianmackenzie$elm_units$Quantity$half(deviation);
		var bisectedAngle = A2($ianmackenzie$elm_geometry$Direction2d$rotateBy, halfDeviation, precedingLeaf.directionAtStart);
		return bisectedAngle;
	});
var $ianmackenzie$elm_geometry$Direction3d$on = F2(
	function (_v0, _v1) {
		var sketchPlane = _v0.a;
		var d = _v1.a;
		var _v2 = sketchPlane.yDirection;
		var j = _v2.a;
		var _v3 = sketchPlane.xDirection;
		var i = _v3.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
			{x: (d.x * i.x) + (d.y * j.x), y: (d.x * i.y) + (d.y * j.y), z: (d.x * i.z) + (d.y * j.z)});
	});
var $ianmackenzie$elm_geometry$Direction2d$rotateClockwise = function (_v0) {
	var d = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
		{x: d.y, y: -d.x});
};
var $ianmackenzie$elm_geometry$Vector3d$withLength = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var d = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: a * d.x, y: a * d.y, z: a * d.z});
	});
var $ianmackenzie$elm_geometry$Geometry$Types$SketchPlane3d = function (a) {
	return {$: 'SketchPlane3d', a: a};
};
var $ianmackenzie$elm_geometry$SketchPlane3d$unsafe = $ianmackenzie$elm_geometry$Geometry$Types$SketchPlane3d;
var $ianmackenzie$elm_geometry$Direction3d$positiveX = $ianmackenzie$elm_geometry$Direction3d$unsafe(
	{x: 1, y: 0, z: 0});
var $ianmackenzie$elm_geometry$Direction3d$x = $ianmackenzie$elm_geometry$Direction3d$positiveX;
var $ianmackenzie$elm_geometry$Direction3d$positiveY = $ianmackenzie$elm_geometry$Direction3d$unsafe(
	{x: 0, y: 1, z: 0});
var $ianmackenzie$elm_geometry$Direction3d$y = $ianmackenzie$elm_geometry$Direction3d$positiveY;
var $ianmackenzie$elm_geometry$SketchPlane3d$xy = $ianmackenzie$elm_geometry$SketchPlane3d$unsafe(
	{originPoint: $ianmackenzie$elm_geometry$Point3d$origin, xDirection: $ianmackenzie$elm_geometry$Direction3d$x, yDirection: $ianmackenzie$elm_geometry$Direction3d$y});
var $author$project$Tools$Nudge$nudgeTrackPoint = F4(
	function (options, fade, index, track) {
		if (!fade) {
			return A2($author$project$DomainModel$earthPointFromIndex, index, track.trackTree);
		} else {
			var verticalVector = A2(
				$ianmackenzie$elm_geometry$Vector3d$scaleBy,
				fade,
				A3($ianmackenzie$elm_geometry$Vector3d$xyz, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, options.vertical));
			var horizontalDirection = A2(
				$ianmackenzie$elm_geometry$Direction3d$on,
				$ianmackenzie$elm_geometry$SketchPlane3d$xy,
				$ianmackenzie$elm_geometry$Direction2d$rotateClockwise(
					A2($author$project$Tools$Nudge$effectiveDirection, index, track)));
			var horizontalVector = A2(
				$ianmackenzie$elm_geometry$Vector3d$scaleBy,
				fade,
				A2($ianmackenzie$elm_geometry$Vector3d$withLength, options.horizontal, horizontalDirection));
			var current = A2($author$project$DomainModel$earthPointFromIndex, index, track.trackTree);
			var newXYZ = A2(
				$ianmackenzie$elm_geometry$Point3d$translateBy,
				verticalVector,
				A2($ianmackenzie$elm_geometry$Point3d$translateBy, horizontalVector, current));
			return newXYZ;
		}
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Arc3d = function (a) {
	return {$: 'Arc3d', a: a};
};
var $ianmackenzie$elm_geometry$Point3d$on = F2(
	function (_v0, _v1) {
		var sketchPlane = _v0.a;
		var p = _v1.a;
		var _v2 = sketchPlane.originPoint;
		var p0 = _v2.a;
		var _v3 = sketchPlane.yDirection;
		var j = _v3.a;
		var _v4 = sketchPlane.xDirection;
		var i = _v4.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: (p0.x + (p.x * i.x)) + (p.y * j.x), y: (p0.y + (p.x * i.y)) + (p.y * j.y), z: (p0.z + (p.x * i.z)) + (p.y * j.z)});
	});
var $ianmackenzie$elm_geometry$Direction2d$perpendicularTo = function (_v0) {
	var d = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
		{x: -d.y, y: d.x});
};
var $ianmackenzie$elm_geometry$Arc3d$on = F2(
	function (sketchPlane, _v0) {
		var arc2d = _v0.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Arc3d(
			{
				signedLength: arc2d.signedLength,
				startPoint: A2($ianmackenzie$elm_geometry$Point3d$on, sketchPlane, arc2d.startPoint),
				sweptAngle: arc2d.sweptAngle,
				xDirection: A2($ianmackenzie$elm_geometry$Direction3d$on, sketchPlane, arc2d.xDirection),
				yDirection: A2(
					$ianmackenzie$elm_geometry$Direction3d$on,
					sketchPlane,
					$ianmackenzie$elm_geometry$Direction2d$perpendicularTo(arc2d.xDirection))
			});
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Point2d = function (a) {
	return {$: 'Point2d', a: a};
};
var $ianmackenzie$elm_geometry$Point3d$projectInto = F2(
	function (_v0, _v1) {
		var sketchPlane = _v0.a;
		var p = _v1.a;
		var _v2 = sketchPlane.originPoint;
		var p0 = _v2.a;
		var deltaX = p.x - p0.x;
		var deltaY = p.y - p0.y;
		var deltaZ = p.z - p0.z;
		var _v3 = sketchPlane.yDirection;
		var j = _v3.a;
		var _v4 = sketchPlane.xDirection;
		var i = _v4.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: ((deltaX * i.x) + (deltaY * i.y)) + (deltaZ * i.z), y: ((deltaX * j.x) + (deltaY * j.y)) + (deltaZ * j.z)});
	});
var $ianmackenzie$elm_geometry$Point2d$circumenterHelp = F6(
	function (_v0, _v1, _v2, a, b, c) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		var p3 = _v2.a;
		var bc = b * c;
		if (!bc) {
			return $elm$core$Maybe$Nothing;
		} else {
			var cy = p1.y - p3.y;
			var cx = p1.x - p3.x;
			var by = p3.y - p2.y;
			var bx = p3.x - p2.x;
			var sinA = ((bx * cy) - (by * cx)) / bc;
			if (!sinA) {
				return $elm$core$Maybe$Nothing;
			} else {
				var cosA = ((bx * cx) + (by * cy)) / bc;
				var scale = cosA / (2 * sinA);
				var ay = p2.y - p1.y;
				var ax = p2.x - p1.x;
				return $elm$core$Maybe$Just(
					$ianmackenzie$elm_geometry$Geometry$Types$Point2d(
						{x: (p1.x + (0.5 * ax)) + (scale * ay), y: (p1.y + (0.5 * ay)) - (scale * ax)}));
			}
		}
	});
var $ianmackenzie$elm_geometry$Point2d$distanceFrom = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		var deltaY = p2.y - p1.y;
		var deltaX = p2.x - p1.x;
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(deltaX),
			$elm$core$Basics$abs(deltaY));
		if (!largestComponent) {
			return $ianmackenzie$elm_units$Quantity$zero;
		} else {
			var scaledY = deltaY / largestComponent;
			var scaledX = deltaX / largestComponent;
			var scaledLength = $elm$core$Basics$sqrt((scaledX * scaledX) + (scaledY * scaledY));
			return $ianmackenzie$elm_units$Quantity$Quantity(scaledLength * largestComponent);
		}
	});
var $ianmackenzie$elm_geometry$Point2d$circumcenter = F3(
	function (p1, p2, p3) {
		var _v0 = A2($ianmackenzie$elm_geometry$Point2d$distanceFrom, p3, p1);
		var c = _v0.a;
		var _v1 = A2($ianmackenzie$elm_geometry$Point2d$distanceFrom, p2, p3);
		var b = _v1.a;
		var _v2 = A2($ianmackenzie$elm_geometry$Point2d$distanceFrom, p1, p2);
		var a = _v2.a;
		return (_Utils_cmp(a, b) > -1) ? ((_Utils_cmp(a, c) > -1) ? A6($ianmackenzie$elm_geometry$Point2d$circumenterHelp, p1, p2, p3, a, b, c) : A6($ianmackenzie$elm_geometry$Point2d$circumenterHelp, p3, p1, p2, c, a, b)) : ((_Utils_cmp(b, c) > -1) ? A6($ianmackenzie$elm_geometry$Point2d$circumenterHelp, p2, p3, p1, b, c, a) : A6($ianmackenzie$elm_geometry$Point2d$circumenterHelp, p3, p1, p2, c, a, b));
	});
var $ianmackenzie$elm_geometry$Vector2d$direction = function (_v0) {
	var v = _v0.a;
	var largestComponent = A2(
		$elm$core$Basics$max,
		$elm$core$Basics$abs(v.x),
		$elm$core$Basics$abs(v.y));
	if (!largestComponent) {
		return $elm$core$Maybe$Nothing;
	} else {
		var scaledY = v.y / largestComponent;
		var scaledX = v.x / largestComponent;
		var scaledLength = $elm$core$Basics$sqrt((scaledX * scaledX) + (scaledY * scaledY));
		return $elm$core$Maybe$Just(
			$ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
				{x: scaledX / scaledLength, y: scaledY / scaledLength}));
	}
};
var $ianmackenzie$elm_geometry$Vector2d$from = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: p2.x - p1.x, y: p2.y - p1.y});
	});
var $elm$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					return $elm$core$Maybe$Just(
						A3(func, a, b, c));
				}
			}
		}
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Arc2d = function (a) {
	return {$: 'Arc2d', a: a};
};
var $ianmackenzie$elm_geometry$Vector2d$length = function (_v0) {
	var v = _v0.a;
	var largestComponent = A2(
		$elm$core$Basics$max,
		$elm$core$Basics$abs(v.x),
		$elm$core$Basics$abs(v.y));
	if (!largestComponent) {
		return $ianmackenzie$elm_units$Quantity$zero;
	} else {
		var scaledY = v.y / largestComponent;
		var scaledX = v.x / largestComponent;
		var scaledLength = $elm$core$Basics$sqrt((scaledX * scaledX) + (scaledY * scaledY));
		return $ianmackenzie$elm_units$Quantity$Quantity(scaledLength * largestComponent);
	}
};
var $ianmackenzie$elm_geometry$Quantity$Extra$rTheta = F2(
	function (_v0, _v1) {
		var r = _v0.a;
		var theta = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(r * theta);
	});
var $ianmackenzie$elm_geometry$Arc2d$sweptAround = F3(
	function (givenCenterPoint, givenSweptAngle, givenStartPoint) {
		var displacement = A2($ianmackenzie$elm_geometry$Vector2d$from, givenStartPoint, givenCenterPoint);
		var _v0 = $ianmackenzie$elm_geometry$Vector2d$direction(displacement);
		if (_v0.$ === 'Just') {
			var yDirection = _v0.a;
			var computedRadius = $ianmackenzie$elm_geometry$Vector2d$length(displacement);
			return $ianmackenzie$elm_geometry$Geometry$Types$Arc2d(
				{
					signedLength: A2($ianmackenzie$elm_geometry$Quantity$Extra$rTheta, computedRadius, givenSweptAngle),
					startPoint: givenStartPoint,
					sweptAngle: givenSweptAngle,
					xDirection: $ianmackenzie$elm_geometry$Direction2d$rotateClockwise(yDirection)
				});
		} else {
			return $ianmackenzie$elm_geometry$Geometry$Types$Arc2d(
				{signedLength: $ianmackenzie$elm_units$Quantity$zero, startPoint: givenStartPoint, sweptAngle: givenSweptAngle, xDirection: $ianmackenzie$elm_geometry$Direction2d$x});
		}
	});
var $ianmackenzie$elm_geometry$Arc2d$twoPi = $ianmackenzie$elm_units$Angle$radians(2 * $elm$core$Basics$pi);
var $ianmackenzie$elm_geometry$Arc2d$throughPoints = F3(
	function (firstPoint, secondPoint, thirdPoint) {
		return A2(
			$elm$core$Maybe$andThen,
			function (computedCenterPoint) {
				var thirdVector = A2($ianmackenzie$elm_geometry$Vector2d$from, computedCenterPoint, thirdPoint);
				var secondVector = A2($ianmackenzie$elm_geometry$Vector2d$from, computedCenterPoint, secondPoint);
				var firstVector = A2($ianmackenzie$elm_geometry$Vector2d$from, computedCenterPoint, firstPoint);
				return A4(
					$elm$core$Maybe$map3,
					F3(
						function (firstDirection, secondDirection, thirdDirection) {
							var partial = A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, firstDirection, secondDirection);
							var full = A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, firstDirection, thirdDirection);
							var computedSweptAngle = (A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, partial) && A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, partial, full)) ? full : ((A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, partial) && A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, partial, full)) ? full : (A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, full) ? A2($ianmackenzie$elm_units$Quantity$minus, $ianmackenzie$elm_geometry$Arc2d$twoPi, full) : A2($ianmackenzie$elm_units$Quantity$plus, $ianmackenzie$elm_geometry$Arc2d$twoPi, full)));
							return A3($ianmackenzie$elm_geometry$Arc2d$sweptAround, computedCenterPoint, computedSweptAngle, firstPoint);
						}),
					$ianmackenzie$elm_geometry$Vector2d$direction(firstVector),
					$ianmackenzie$elm_geometry$Vector2d$direction(secondVector),
					$ianmackenzie$elm_geometry$Vector2d$direction(thirdVector));
			},
			A3($ianmackenzie$elm_geometry$Point2d$circumcenter, firstPoint, secondPoint, thirdPoint));
	});
var $ianmackenzie$elm_geometry$Vector3d$direction = function (_v0) {
	var v = _v0.a;
	var largestComponent = A2(
		$elm$core$Basics$max,
		$elm$core$Basics$abs(v.x),
		A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(v.y),
			$elm$core$Basics$abs(v.z)));
	if (!largestComponent) {
		return $elm$core$Maybe$Nothing;
	} else {
		var scaledZ = v.z / largestComponent;
		var scaledY = v.y / largestComponent;
		var scaledX = v.x / largestComponent;
		var scaledLength = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
		return $elm$core$Maybe$Just(
			$ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
				{x: scaledX / scaledLength, y: scaledY / scaledLength, z: scaledZ / scaledLength}));
	}
};
var $ianmackenzie$elm_geometry$Direction3d$from = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		var deltaZ = p2.z - p1.z;
		var deltaY = p2.y - p1.y;
		var deltaX = p2.x - p1.x;
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(deltaX),
			A2(
				$elm$core$Basics$max,
				$elm$core$Basics$abs(deltaY),
				$elm$core$Basics$abs(deltaZ)));
		if (!largestComponent) {
			return $elm$core$Maybe$Nothing;
		} else {
			var scaledZ = deltaZ / largestComponent;
			var scaledY = deltaY / largestComponent;
			var scaledX = deltaX / largestComponent;
			var scaledLength = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
			return $elm$core$Maybe$Just(
				$ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
					{x: scaledX / scaledLength, y: scaledY / scaledLength, z: scaledZ / scaledLength}));
		}
	});
var $ianmackenzie$elm_geometry$Vector3d$projectionIn = F2(
	function (_v0, _v1) {
		var d = _v0.a;
		var v = _v1.a;
		var projectedLength = ((v.x * d.x) + (v.y * d.y)) + (v.z * d.z);
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: d.x * projectedLength, y: d.y * projectedLength, z: d.z * projectedLength});
	});
var $ianmackenzie$elm_geometry$SketchPlane3d$throughPoints = F3(
	function (firstPoint, secondPoint, thirdPoint) {
		return A2(
			$elm$core$Maybe$andThen,
			function (computedXDirection) {
				var secondCandidate = A2($ianmackenzie$elm_geometry$Vector3d$from, secondPoint, thirdPoint);
				var firstCandidate = A2($ianmackenzie$elm_geometry$Vector3d$from, firstPoint, thirdPoint);
				var chosenVector = A2(
					$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
					$ianmackenzie$elm_geometry$Vector3d$length(secondCandidate),
					$ianmackenzie$elm_geometry$Vector3d$length(firstCandidate)) ? firstCandidate : secondCandidate;
				var yVector = A2(
					$ianmackenzie$elm_geometry$Vector3d$minus,
					A2($ianmackenzie$elm_geometry$Vector3d$projectionIn, computedXDirection, chosenVector),
					chosenVector);
				return A2(
					$elm$core$Maybe$map,
					function (computedYDirection) {
						return $ianmackenzie$elm_geometry$SketchPlane3d$unsafe(
							{originPoint: firstPoint, xDirection: computedXDirection, yDirection: computedYDirection});
					},
					$ianmackenzie$elm_geometry$Vector3d$direction(yVector));
			},
			A2($ianmackenzie$elm_geometry$Direction3d$from, firstPoint, secondPoint));
	});
var $ianmackenzie$elm_geometry$Arc3d$throughPoints = F3(
	function (firstPoint, secondPoint, thirdPoint) {
		return A2(
			$elm$core$Maybe$andThen,
			function (sketchPlane) {
				return A2(
					$elm$core$Maybe$map,
					$ianmackenzie$elm_geometry$Arc3d$on(sketchPlane),
					A3(
						$ianmackenzie$elm_geometry$Arc2d$throughPoints,
						A2($ianmackenzie$elm_geometry$Point3d$projectInto, sketchPlane, firstPoint),
						A2($ianmackenzie$elm_geometry$Point3d$projectInto, sketchPlane, secondPoint),
						A2($ianmackenzie$elm_geometry$Point3d$projectInto, sketchPlane, thirdPoint)));
			},
			A3($ianmackenzie$elm_geometry$SketchPlane3d$throughPoints, firstPoint, secondPoint, thirdPoint));
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Axis3d = function (a) {
	return {$: 'Axis3d', a: a};
};
var $ianmackenzie$elm_geometry$Axis3d$through = F2(
	function (givenPoint, givenDirection) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Axis3d(
			{direction: givenDirection, originPoint: givenPoint});
	});
var $ianmackenzie$elm_geometry$Axis3d$throughPoints = F2(
	function (firstPoint, secondPoint) {
		var _v0 = A2($ianmackenzie$elm_geometry$Direction3d$from, firstPoint, secondPoint);
		if (_v0.$ === 'Just') {
			var axisDirection = _v0.a;
			return $elm$core$Maybe$Just(
				A2($ianmackenzie$elm_geometry$Axis3d$through, firstPoint, axisDirection));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Tools$OutAndBack$apply = F2(
	function (options, track) {
		var useNudgeTool = F2(
			function (nudgeOption, index) {
				return A4($author$project$Tools$Nudge$nudgeTrackPoint, nudgeOption, 1.0, index, track);
			});
		var oldPoints = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
		var noNudge = $author$project$Tools$Nudge$defaultOptions;
		var outwardLeg = function () {
			var nudge = _Utils_update(
				noNudge,
				{
					horizontal: $ianmackenzie$elm_units$Length$meters(options.offset)
				});
			return A2(
				$elm$core$List$map,
				useNudgeTool(nudge),
				A2(
					$elm$core$List$range,
					0,
					$author$project$DomainModel$skipCount(track.trackTree)));
		}();
		var outwardInGpx = A2(
			$elm$core$List$map,
			$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat),
			outwardLeg);
		var returnLeg = function () {
			var nudge = _Utils_update(
				noNudge,
				{
					horizontal: $ianmackenzie$elm_units$Quantity$negate(
						$ianmackenzie$elm_units$Length$meters(options.offset))
				});
			return $elm$core$List$reverse(
				A2(
					$elm$core$List$map,
					useNudgeTool(nudge),
					A2(
						$elm$core$List$range,
						0,
						$author$project$DomainModel$skipCount(track.trackTree))));
		}();
		var returnInGpx = A2(
			$elm$core$List$map,
			$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat),
			returnLeg);
		var homeLeaf = $author$project$DomainModel$getFirstLeaf(track.trackTree);
		var homeTurnMidpoint = function () {
			var leafAxis = A2($ianmackenzie$elm_geometry$Axis3d$throughPoints, homeLeaf.startPoint, homeLeaf.endPoint);
			if (leafAxis.$ === 'Just') {
				var axis = leafAxis.a;
				return A2(
					$ianmackenzie$elm_geometry$Point3d$along,
					axis,
					$ianmackenzie$elm_units$Quantity$negate(
						$ianmackenzie$elm_units$Length$meters(
							$elm$core$Basics$abs(options.offset))));
			} else {
				return homeLeaf.startPoint;
			}
		}();
		var homeTurn = function () {
			var firstOutwardPoint = $elm$core$List$head(outwardLeg);
			var finalInwardPoint = $elm_community$list_extra$List$Extra$last(returnLeg);
			var _v4 = _Utils_Tuple2(finalInwardPoint, firstOutwardPoint);
			if ((_v4.a.$ === 'Just') && (_v4.b.$ === 'Just')) {
				var inEarth = _v4.a.a;
				var outEarth = _v4.b.a;
				return A3($ianmackenzie$elm_geometry$Arc3d$throughPoints, inEarth, homeTurnMidpoint, outEarth);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var homeTurnInGpx = function () {
			if (homeTurn.$ === 'Just') {
				var arc = homeTurn.a;
				return A2(
					$elm$core$List$map,
					$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat),
					$ianmackenzie$elm_geometry$Polyline3d$vertices(
						A2(
							$ianmackenzie$elm_geometry$Arc3d$approximate,
							$ianmackenzie$elm_units$Length$meters(0.1),
							arc)));
			} else {
				return _List_Nil;
			}
		}();
		var awayLeaf = $author$project$DomainModel$getLastLeaf(track.trackTree);
		var awayTurnMidpoint = function () {
			var leafAxis = A2($ianmackenzie$elm_geometry$Axis3d$throughPoints, awayLeaf.endPoint, awayLeaf.startPoint);
			if (leafAxis.$ === 'Just') {
				var axis = leafAxis.a;
				return A2(
					$ianmackenzie$elm_geometry$Point3d$along,
					axis,
					$ianmackenzie$elm_units$Quantity$negate(
						$ianmackenzie$elm_units$Length$meters(
							$elm$core$Basics$abs(options.offset))));
			} else {
				return awayLeaf.endPoint;
			}
		}();
		var awayTurn = function () {
			var firstInwardPoint = $elm$core$List$head(returnLeg);
			var finalOutwardPoint = $elm_community$list_extra$List$Extra$last(outwardLeg);
			var _v1 = _Utils_Tuple2(finalOutwardPoint, firstInwardPoint);
			if ((_v1.a.$ === 'Just') && (_v1.b.$ === 'Just')) {
				var outEarth = _v1.a.a;
				var backEarth = _v1.b.a;
				return A3($ianmackenzie$elm_geometry$Arc3d$throughPoints, outEarth, awayTurnMidpoint, backEarth);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var awayTurnInGpx = function () {
			if (awayTurn.$ === 'Just') {
				var arc = awayTurn.a;
				return A2(
					$elm$core$List$map,
					$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat),
					$ianmackenzie$elm_geometry$Polyline3d$vertices(
						A2(
							$ianmackenzie$elm_geometry$Arc3d$approximate,
							$ianmackenzie$elm_units$Length$meters(0.1),
							arc)));
			} else {
				return _List_Nil;
			}
		}();
		var newCourse = _Utils_ap(
			outwardInGpx,
			_Utils_ap(
				awayTurnInGpx,
				_Utils_ap(returnInGpx, homeTurnInGpx)));
		var newTree = $author$project$DomainModel$treeFromSourcePoints(newCourse);
		return _Utils_Tuple2(newTree, oldPoints);
	});
var $author$project$Tools$BendSmoother$applyClassicBendSmoother = F2(
	function (options, track) {
		var gpxPoints = A2(
			$elm$core$List$map,
			$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat),
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.nodes;
					},
					options.smoothedBend)));
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5($author$project$DomainModel$replaceRange, fromStart + 1, fromEnd + 1, track.referenceLonLat, gpxPoints, track.trackTree);
		var oldPoints = A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree);
		return _Utils_Tuple2(
			newTree,
			A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints));
	});
var $author$project$DomainModel$getDualCoords = F2(
	function (tree, index) {
		return _Utils_Tuple2(
			A2($author$project$DomainModel$earthPointFromIndex, index, tree),
			A2($author$project$DomainModel$gpxPointFromIndex, index, tree));
	});
var $elm$core$Basics$pow = _Basics_pow;
var $author$project$Geometry101$distance = F2(
	function (p1, p2) {
		return $elm$core$Basics$sqrt(
			A2($elm$core$Basics$pow, p1.x - p2.x, 2.0) + A2($elm$core$Basics$pow, p1.y - p2.y, 2.0));
	});
var $ianmackenzie$elm_geometry$Point3d$distanceFrom = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		var deltaZ = p2.z - p1.z;
		var deltaY = p2.y - p1.y;
		var deltaX = p2.x - p1.x;
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(deltaX),
			A2(
				$elm$core$Basics$max,
				$elm$core$Basics$abs(deltaY),
				$elm$core$Basics$abs(deltaZ)));
		if (!largestComponent) {
			return $ianmackenzie$elm_units$Quantity$zero;
		} else {
			var scaledZ = deltaZ / largestComponent;
			var scaledY = deltaY / largestComponent;
			var scaledX = deltaX / largestComponent;
			var scaledLength = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
			return $ianmackenzie$elm_units$Quantity$Quantity(scaledLength * largestComponent);
		}
	});
var $ianmackenzie$elm_geometry$Point2d$xy = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: x, y: y});
	});
var $ianmackenzie$elm_geometry$Point2d$fromRecord = F2(
	function (toQuantity, _v0) {
		var x = _v0.x;
		var y = _v0.y;
		return A2(
			$ianmackenzie$elm_geometry$Point2d$xy,
			toQuantity(x),
			toQuantity(y));
	});
var $author$project$Geometry101$lineEquationFromTwoPoints = F2(
	function (p1, p2) {
		var c = (p1.x * p2.y) - (p2.x * p1.y);
		var b = p2.x - p1.x;
		var a = p1.y - p2.y;
		return {a: a, b: b, c: c};
	});
var $author$project$Geometry101$matrixInverse = function (m) {
	var determinant = (m.tl * m.br) - (m.tr * m.bl);
	return (_Utils_cmp(
		$elm$core$Basics$abs(determinant),
		A2($elm$core$Basics$pow, 10, -20)) < 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
		{bl: ((-1.0) * m.bl) / determinant, br: m.tl / determinant, tl: m.br / determinant, tr: ((-1.0) * m.tr) / determinant});
};
var $author$project$Geometry101$matrixMultiplyColumn = F2(
	function (m, c) {
		return {b: (m.bl * c.t) + (m.br * c.b), t: (m.tl * c.t) + (m.tr * c.b)};
	});
var $author$project$Geometry101$lineIntersection = F2(
	function (l1, l2) {
		var matrix = {bl: l2.a, br: l2.b, tl: l1.a, tr: l1.b};
		var inv = $author$project$Geometry101$matrixInverse(matrix);
		var column = {b: (-1.0) * l2.c, t: (-1.0) * l1.c};
		if (inv.$ === 'Just') {
			var inverse = inv.a;
			var col = A2($author$project$Geometry101$matrixMultiplyColumn, inverse, column);
			return $elm$core$Maybe$Just(
				{x: col.t, y: col.b});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Geometry101$linePerpendicularTo = F2(
	function (line, p) {
		var aybx = (line.a * p.y) - (line.b * p.x);
		return {a: line.b, b: (-1.0) * line.a, c: aybx};
	});
var $ianmackenzie$elm_geometry$Vector2d$scaleTo = F2(
	function (_v0, _v1) {
		var q = _v0.a;
		var v = _v1.a;
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(v.x),
			$elm$core$Basics$abs(v.y));
		if (!largestComponent) {
			return $ianmackenzie$elm_geometry$Vector2d$zero;
		} else {
			var scaledY = v.y / largestComponent;
			var scaledX = v.x / largestComponent;
			var scaledLength = $elm$core$Basics$sqrt((scaledX * scaledX) + (scaledY * scaledY));
			return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
				{x: (q * scaledX) / scaledLength, y: (q * scaledY) / scaledLength});
		}
	});
var $ianmackenzie$elm_geometry$Point2d$xCoordinate = function (_v0) {
	var p = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(p.x);
};
var $ianmackenzie$elm_geometry$Point2d$yCoordinate = function (_v0) {
	var p = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(p.y);
};
var $ianmackenzie$elm_geometry$Point2d$toRecord = F2(
	function (fromQuantity, point) {
		return {
			x: fromQuantity(
				$ianmackenzie$elm_geometry$Point2d$xCoordinate(point)),
			y: fromQuantity(
				$ianmackenzie$elm_geometry$Point2d$yCoordinate(point))
		};
	});
var $ianmackenzie$elm_geometry$Point2d$translateBy = F2(
	function (_v0, _v1) {
		var v = _v0.a;
		var p = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p.x + v.x, y: p.y + v.y});
	});
var $author$project$Tools$BendSmoother$arc3dFromThreePoints = F3(
	function (pa, pb, pc) {
		var trianglePlane = A3($ianmackenzie$elm_geometry$SketchPlane3d$throughPoints, pa, pb, pc);
		var _v0 = _Utils_Tuple2(
			A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, pa, pb),
			A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, pb, pc));
		var beforeLength = _v0.a;
		var afterLength = _v0.b;
		var amountToStealFromSecondSegment = A2(
			$ianmackenzie$elm_units$Quantity$min,
			$ianmackenzie$elm_units$Length$meters(4.0),
			$ianmackenzie$elm_units$Quantity$half(afterLength));
		var amountToStealFromFirstSegment = A2(
			$ianmackenzie$elm_units$Quantity$min,
			$ianmackenzie$elm_units$Length$meters(4.0),
			$ianmackenzie$elm_units$Quantity$half(beforeLength));
		var commonAmountToSteal = A2($ianmackenzie$elm_units$Quantity$min, amountToStealFromFirstSegment, amountToStealFromSecondSegment);
		var arcEnd = A3(
			$ianmackenzie$elm_geometry$Point3d$interpolateFrom,
			pb,
			pc,
			A2($ianmackenzie$elm_units$Quantity$ratio, commonAmountToSteal, afterLength));
		var arcStart = A3(
			$ianmackenzie$elm_geometry$Point3d$interpolateFrom,
			pb,
			pa,
			A2($ianmackenzie$elm_units$Quantity$ratio, commonAmountToSteal, beforeLength));
		if (trianglePlane.$ === 'Just') {
			var plane = trianglePlane.a;
			var _v2 = _Utils_Tuple3(
				A2($ianmackenzie$elm_geometry$Point3d$projectInto, plane, arcStart),
				A2($ianmackenzie$elm_geometry$Point3d$projectInto, plane, pb),
				A2($ianmackenzie$elm_geometry$Point3d$projectInto, plane, arcEnd));
			var planarA = _v2.a;
			var planarB = _v2.b;
			var planarC = _v2.c;
			var findArc = function (centre) {
				var radius = A2(
					$author$project$Geometry101$distance,
					centre,
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarA));
				var bisector = A2(
					$ianmackenzie$elm_geometry$Vector2d$from,
					A2($ianmackenzie$elm_geometry$Point2d$fromRecord, $ianmackenzie$elm_units$Length$meters, centre),
					planarB);
				var midArcPoint = A2(
					$ianmackenzie$elm_geometry$Point2d$translateBy,
					A2(
						$ianmackenzie$elm_geometry$Vector2d$scaleTo,
						$ianmackenzie$elm_units$Length$meters(radius),
						bisector),
					A2($ianmackenzie$elm_geometry$Point2d$fromRecord, $ianmackenzie$elm_units$Length$meters, centre));
				var midPoint3d = A2($ianmackenzie$elm_geometry$Point3d$on, plane, midArcPoint);
				return A3($ianmackenzie$elm_geometry$Arc3d$throughPoints, arcStart, midPoint3d, arcEnd);
			};
			var _v3 = _Utils_Tuple2(
				A2(
					$author$project$Geometry101$lineEquationFromTwoPoints,
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarA),
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarB)),
				A2(
					$author$project$Geometry101$lineEquationFromTwoPoints,
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarB),
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarC)));
			var r1Equation = _v3.a;
			var r2Equation = _v3.b;
			var _v4 = _Utils_Tuple2(
				A2(
					$author$project$Geometry101$linePerpendicularTo,
					r1Equation,
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarA)),
				A2(
					$author$project$Geometry101$linePerpendicularTo,
					r2Equation,
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarC)));
			var perpFromFirstTangentPoint = _v4.a;
			var perpFromSecondTangentPoint = _v4.b;
			var circleCenter = A2($author$project$Geometry101$lineIntersection, perpFromFirstTangentPoint, perpFromSecondTangentPoint);
			return A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Maybe$Nothing,
				A2($elm$core$Maybe$map, findArc, circleCenter));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Tools$BendSmoother$singlePoint3dArc = F2(
	function (track, index) {
		var _v0 = _Utils_Tuple3(
			A2($author$project$DomainModel$earthPointFromIndex, index - 1, track.trackTree),
			A2($author$project$DomainModel$earthPointFromIndex, index + 0, track.trackTree),
			A2($author$project$DomainModel$earthPointFromIndex, index + 1, track.trackTree));
		var pa = _v0.a;
		var pb = _v0.b;
		var pc = _v0.c;
		return A3($author$project$Tools$BendSmoother$arc3dFromThreePoints, pa, pb, pc);
	});
var $author$project$Tools$BendSmoother$softenSinglePoint = F3(
	function (numSegments, index, track) {
		var _v0 = A2($author$project$Tools$BendSmoother$singlePoint3dArc, track, index);
		if (_v0.$ === 'Just') {
			var arc = _v0.a;
			var oldPoints = _List_fromArray(
				[
					A2($author$project$DomainModel$getDualCoords, track.trackTree, index)
				]);
			var gpxPoints = A2(
				$elm$core$List$map,
				$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat),
				$ianmackenzie$elm_geometry$Polyline3d$vertices(
					A2($ianmackenzie$elm_geometry$Arc3d$segments, numSegments, arc)));
			var newTree = A5(
				$author$project$DomainModel$replaceRange,
				index,
				$author$project$DomainModel$skipCount(track.trackTree) - index,
				track.referenceLonLat,
				gpxPoints,
				track.trackTree);
			return _Utils_Tuple2(
				newTree,
				A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints));
		} else {
			return _Utils_Tuple2(
				$elm$core$Maybe$Just(track.trackTree),
				_List_Nil);
		}
	});
var $author$project$Tools$BendSmoother$applyUsingOptions = F2(
	function (options, track) {
		var _v0 = options.mode;
		if (_v0.$ === 'SmoothPoint') {
			return A3($author$project$Tools$BendSmoother$softenSinglePoint, options.segments, track.currentPosition, track);
		} else {
			return A2($author$project$Tools$BendSmoother$applyClassicBendSmoother, options, track);
		}
	});
var $author$project$Tools$CurveFormer$computeNewPoints = F2(
	function (options, track) {
		var earthPoints = options.newTrackPoints;
		var previewPoints = A2(
			$elm$core$List$map,
			function (earth) {
				return _Utils_Tuple2(
					earth,
					A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, earth));
			},
			earthPoints);
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		return previewPoints;
	});
var $author$project$Tools$CurveFormer$applyUsingOptions = F2(
	function (options, track) {
		var _v0 = options.fixedAttachmentPoints;
		if (_v0.$ === 'Just') {
			var _v1 = _v0.a;
			var entryPoint = _v1.a;
			var exitPoint = _v1.b;
			var _v2 = _Utils_Tuple2(
				entryPoint,
				$author$project$DomainModel$skipCount(track.trackTree) - exitPoint);
			var fromStart = _v2.a;
			var fromEnd = _v2.b;
			var newTree = A5(
				$author$project$DomainModel$replaceRange,
				fromStart + 1,
				fromEnd + 1,
				track.referenceLonLat,
				A2(
					$elm$core$List$map,
					$elm$core$Tuple$second,
					A2($author$project$Tools$CurveFormer$computeNewPoints, options, track)),
				track.trackTree);
			var oldPoints = A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree);
			return _Utils_Tuple3(
				newTree,
				A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints),
				_Utils_Tuple2(entryPoint, exitPoint));
		} else {
			return _Utils_Tuple3(
				$elm$core$Maybe$Just(track.trackTree),
				_List_Nil,
				_Utils_Tuple2(0, 0));
		}
	});
var $author$project$DomainModel$indexFromDistance = F2(
	function (distance, treeNode) {
		indexFromDistance:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				var info = treeNode.a;
				return A2(
					$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
					$ianmackenzie$elm_units$Quantity$half(info.trueLength),
					distance) ? 0 : 1;
			} else {
				var info = treeNode.a;
				if (A2(
					$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
					$author$project$DomainModel$trueLength(info.left),
					distance)) {
					var $temp$distance = distance,
						$temp$treeNode = info.left;
					distance = $temp$distance;
					treeNode = $temp$treeNode;
					continue indexFromDistance;
				} else {
					return $author$project$DomainModel$skipCount(info.left) + A2(
						$author$project$DomainModel$indexFromDistance,
						A2(
							$ianmackenzie$elm_units$Quantity$minus,
							$author$project$DomainModel$trueLength(info.left),
							distance),
						info.right);
				}
			}
		}
	});
var $author$project$Tools$Nudge$computeNudgedPoints = F2(
	function (settings, track) {
		var liesWithin = F2(
			function (_v4, given) {
				var lo = _v4.a;
				var hi = _v4.b;
				return A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, lo, given) && A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, hi, given);
			});
		var fader = F2(
			function (pointDistance, referenceDistance) {
				var _v3 = _Utils_Tuple2(
					$ianmackenzie$elm_units$Length$inMeters(pointDistance),
					$ianmackenzie$elm_units$Length$inMeters(referenceDistance));
				var place = _v3.a;
				var base = _v3.b;
				var x = $elm$core$Basics$abs(
					(place - base) / $ianmackenzie$elm_units$Length$inMeters(settings.fadeExtent));
				return 1.0 - x;
			});
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var _v1 = _Utils_Tuple2(
			fromStart,
			$author$project$DomainModel$skipCount(track.trackTree) - fromEnd);
		var fromNode = _v1.a;
		var toNode = _v1.b;
		var _v2 = _Utils_Tuple2(
			A2($author$project$DomainModel$distanceFromIndex, fromNode, track.trackTree),
			A2($author$project$DomainModel$distanceFromIndex, toNode, track.trackTree));
		var startDistance = _v2.a;
		var endDistance = _v2.b;
		var fadeOutEndDistance = A2($ianmackenzie$elm_units$Quantity$plus, settings.fadeExtent, endDistance);
		var endIncludingFade = A2($author$project$DomainModel$indexFromDistance, fadeOutEndDistance, track.trackTree);
		var fadeInStartDistance = A2($ianmackenzie$elm_units$Quantity$minus, settings.fadeExtent, startDistance);
		var startIncludingFade = A2($author$project$DomainModel$indexFromDistance, fadeInStartDistance, track.trackTree);
		var nudge = function (index) {
			var pointDistance = A2($author$project$DomainModel$distanceFromIndex, index, track.trackTree);
			var fade = A2(
				liesWithin,
				_Utils_Tuple2(startDistance, endDistance),
				pointDistance) ? 1.0 : (A2(
				liesWithin,
				_Utils_Tuple2(fadeInStartDistance, startDistance),
				pointDistance) ? A2(fader, pointDistance, startDistance) : (A2(
				liesWithin,
				_Utils_Tuple2(endDistance, fadeOutEndDistance),
				pointDistance) ? A2(fader, pointDistance, endDistance) : 0.0));
			return A4($author$project$Tools$Nudge$nudgeTrackPoint, settings, fade, index, track);
		};
		var newEarthPoints = A2(
			$elm$core$List$map,
			nudge,
			A2($elm$core$List$range, startIncludingFade, endIncludingFade));
		var previewPoints = A2(
			$elm$core$List$map,
			function (earth) {
				return _Utils_Tuple2(
					earth,
					A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, earth));
			},
			newEarthPoints);
		return _Utils_Tuple2(
			_Utils_Tuple2(startIncludingFade, endIncludingFade),
			previewPoints);
	});
var $author$project$Tools$Nudge$applyUsingOptions = F2(
	function (options, track) {
		var _v0 = A2($author$project$Tools$Nudge$computeNudgedPoints, options, track);
		var _v1 = _v0.a;
		var actualStart = _v1.a;
		var actualEnd = _v1.b;
		var newPoints = _v0.b;
		var oldPoints = A3(
			$author$project$DomainModel$extractPointsInRange,
			actualStart,
			$author$project$DomainModel$skipCount(track.trackTree) - actualEnd,
			track.trackTree);
		var newTree = A5(
			$author$project$DomainModel$replaceRange,
			actualStart,
			$author$project$DomainModel$skipCount(track.trackTree) - actualEnd,
			track.referenceLonLat,
			A2($elm$core$List$map, $elm$core$Tuple$second, newPoints),
			track.trackTree);
		return _Utils_Tuple3(
			newTree,
			A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints),
			_Utils_Tuple2(actualStart, actualEnd));
	});
var $author$project$ToolsController$ColourTriplet = F3(
	function (red, green, blue) {
		return {blue: blue, green: green, red: red};
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$json$Json$Decode$map3 = _Json_map3;
var $author$project$ToolsController$colourDecoder = A4(
	$elm$json$Json$Decode$map3,
	$author$project$ToolsController$ColourTriplet,
	A2($elm$json$Json$Decode$field, 'red', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'green', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'blue', $elm$json$Json$Decode$float));
var $mdgriffith$elm_ui$Element$fromRgb = function (clr) {
	return A4($mdgriffith$elm_ui$Internal$Model$Rgba, clr.red, clr.green, clr.blue, clr.alpha);
};
var $author$project$ToolsController$decodeColour = function (_v0) {
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	return $mdgriffith$elm_ui$Element$fromRgb(
		{alpha: 1.0, blue: blue, green: green, red: red});
};
var $author$project$Main$SplitDecode = F5(
	function (left, right, bottom, leftInternal, rightInternal) {
		return {bottom: bottom, left: left, leftInternal: leftInternal, right: right, rightInternal: rightInternal};
	});
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$json$Json$Decode$map5 = _Json_map5;
var $author$project$Main$decodeSplitValues = F2(
	function (values, model) {
		var decoder = A6(
			$elm$json$Json$Decode$map5,
			$author$project$Main$SplitDecode,
			A2($elm$json$Json$Decode$field, 'left', $elm$json$Json$Decode$int),
			A2($elm$json$Json$Decode$field, 'right', $elm$json$Json$Decode$int),
			A2($elm$json$Json$Decode$field, 'bottom', $elm$json$Json$Decode$int),
			A2($elm$json$Json$Decode$field, 'internalleft', $elm$json$Json$Decode$int),
			A2($elm$json$Json$Decode$field, 'internalright', $elm$json$Json$Decode$int));
		var decoded = A2($elm$json$Json$Decode$decodeValue, decoder, values);
		var _v0 = _Utils_Tuple2(model.windowSize.a | 0, model.windowSize.b | 0);
		var width = _v0.a;
		var height = _v0.b;
		if (decoded.$ === 'Ok') {
			var data = decoded.a;
			return $author$project$Main$adjustSpaceForContent(
				_Utils_update(
					model,
					{
						bottomDockTopEdge: A2(
							$author$project$SplitPane$SplitPane$configureSplitter,
							A2(
								$author$project$SplitPane$SplitPane$px,
								data.bottom,
								$elm$core$Maybe$Just(
									_Utils_Tuple2(((height * 2) / 3) | 0, height - 75))),
							$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Vertical)),
						leftDockInternal: A2(
							$author$project$SplitPane$SplitPane$configureSplitter,
							A2(
								$author$project$SplitPane$SplitPane$px,
								data.leftInternal,
								$elm$core$Maybe$Just(
									_Utils_Tuple2(50, height - 75))),
							$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Vertical)),
						leftDockRightEdge: A2(
							$author$project$SplitPane$SplitPane$configureSplitter,
							A2(
								$author$project$SplitPane$SplitPane$px,
								data.left,
								$elm$core$Maybe$Just(
									_Utils_Tuple2(20, (width / 3) | 0))),
							$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal)),
						rightDockInternal: A2(
							$author$project$SplitPane$SplitPane$configureSplitter,
							A2(
								$author$project$SplitPane$SplitPane$px,
								data.rightInternal,
								$elm$core$Maybe$Just(
									_Utils_Tuple2(50, height - 75))),
							$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Vertical)),
						rightDockLeftEdge: A2(
							$author$project$SplitPane$SplitPane$configureSplitter,
							A2(
								$author$project$SplitPane$SplitPane$px,
								data.right,
								$elm$core$Maybe$Just(
									_Utils_Tuple2(((2 * width) / 3) | 0, width - 20))),
							$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal))
					}));
		} else {
			return model;
		}
	});
var $author$project$Tools$DeletePoints$deletePointsBetween = F3(
	function (fromStart, fromEnd, track) {
		var oldPoints = A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree);
		var newTree = A5($author$project$DomainModel$replaceRange, fromStart + 1, fromEnd + 1, track.referenceLonLat, _List_Nil, track.trackTree);
		return _Utils_Tuple2(
			newTree,
			A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints));
	});
var $author$project$Tools$DeletePoints$deleteSinglePoint = F3(
	function (fromStart, fromEnd, track) {
		var oldPoints = _List_fromArray(
			[
				A2($author$project$DomainModel$gpxPointFromIndex, track.currentPosition, track.trackTree)
			]);
		var newTree = A5($author$project$DomainModel$replaceRange, fromStart, fromEnd, track.referenceLonLat, _List_Nil, track.trackTree);
		return _Utils_Tuple2(newTree, oldPoints);
	});
var $author$project$DomainModel$isLongitudeContained = F2(
	function (longitude, treeNode) {
		var turnFromMedianToGiven = A2(
			$ianmackenzie$elm_geometry$Direction2d$angleFrom,
			$author$project$DomainModel$medianLongitude(treeNode),
			longitude);
		return A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$author$project$DomainModel$westwardTurn(treeNode),
			turnFromMedianToGiven) && A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$author$project$DomainModel$eastwardTurn(treeNode),
			turnFromMedianToGiven);
	});
var $author$project$DomainModel$rotationAwayFrom = F2(
	function (longitude, treeNode) {
		var nodeWest = A2(
			$ianmackenzie$elm_geometry$Direction2d$rotateBy,
			$author$project$DomainModel$westwardTurn(treeNode),
			$author$project$DomainModel$medianLongitude(treeNode));
		var nodeEast = A2(
			$ianmackenzie$elm_geometry$Direction2d$rotateBy,
			$author$project$DomainModel$eastwardTurn(treeNode),
			$author$project$DomainModel$medianLongitude(treeNode));
		return A2(
			$ianmackenzie$elm_units$Quantity$min,
			$ianmackenzie$elm_units$Quantity$abs(
				A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, longitude, nodeEast)),
			$ianmackenzie$elm_units$Quantity$abs(
				A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, longitude, nodeWest)));
	});
var $author$project$DomainModel$bestAvailableDistanceGuess = F2(
	function (target, node) {
		return A2($author$project$DomainModel$isLongitudeContained, target.longitude, node) ? $ianmackenzie$elm_units$Quantity$zero : $ianmackenzie$elm_units$Length$meters(
			$ianmackenzie$elm_units$Angle$cos(target.latitude) * ($author$project$Spherical$metresPerDegree * $ianmackenzie$elm_units$Angle$inDegrees(
				A2($author$project$DomainModel$rotationAwayFrom, target.longitude, node))));
	});
var $author$project$DomainModel$gpxDistance = F2(
	function (p1, p2) {
		var lon = function (p) {
			return $ianmackenzie$elm_geometry$Direction2d$toAngle(p.longitude);
		};
		return $ianmackenzie$elm_units$Length$meters(
			A2(
				$author$project$Spherical$range,
				_Utils_Tuple2(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(p1.longitude),
					p1.latitude),
				_Utils_Tuple2(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(p2.longitude),
					p2.latitude)));
	});
var $ianmackenzie$elm_units$Quantity$lessThan = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return _Utils_cmp(x, y) < 0;
	});
var $author$project$DomainModel$nearestToLonLat = F3(
	function (click, current, treeNode) {
		var currentGpx = A2($author$project$DomainModel$gpxPointFromIndex, current, treeNode);
		var canDoBetter = F3(
			function (thisIndex, _v0, thisNode) {
				var bestIndex = _v0.a;
				var bestDistance = _v0.b;
				if (thisNode.$ === 'Leaf') {
					var leaf = thisNode.a;
					var _v2 = _Utils_Tuple2(
						A2($author$project$DomainModel$gpxDistance, leaf.sourceData.a, click),
						A2($author$project$DomainModel$gpxDistance, leaf.sourceData.b, click));
					var startDistance = _v2.a;
					var endDistance = _v2.b;
					var bestThisLeaf = A2($ianmackenzie$elm_units$Quantity$lessThan, endDistance, startDistance) ? _Utils_Tuple2(thisIndex, startDistance) : _Utils_Tuple2(thisIndex + 1, endDistance);
					return A2($ianmackenzie$elm_units$Quantity$lessThan, bestDistance, bestThisLeaf.b) ? $elm$core$Maybe$Just(bestThisLeaf) : $elm$core$Maybe$Nothing;
				} else {
					var node = thisNode.a;
					if (A2(
						$ianmackenzie$elm_units$Quantity$lessThan,
						bestDistance,
						A2($author$project$DomainModel$bestAvailableDistanceGuess, click, thisNode))) {
						var _v3 = A3(
							canDoBetter,
							thisIndex,
							_Utils_Tuple2(bestIndex, bestDistance),
							node.left);
						if (_v3.$ === 'Just') {
							var _v4 = _v3.a;
							var leftIndex = _v4.a;
							var leftDistance = _v4.b;
							var _v5 = A3(
								canDoBetter,
								thisIndex + $author$project$DomainModel$skipCount(node.left),
								_Utils_Tuple2(leftIndex, leftDistance),
								node.right);
							if (_v5.$ === 'Just') {
								var _v6 = _v5.a;
								var rightIndex = _v6.a;
								var rightDistance = _v6.b;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(rightIndex, rightDistance));
							} else {
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(leftIndex, leftDistance));
							}
						} else {
							var _v7 = A3(
								canDoBetter,
								thisIndex + $author$project$DomainModel$skipCount(node.left),
								_Utils_Tuple2(bestIndex, bestDistance),
								node.right);
							if (_v7.$ === 'Just') {
								var _v8 = _v7.a;
								var rightIndex = _v8.a;
								var rightDistance = _v8.b;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(rightIndex, rightDistance));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			});
		var _v9 = A3(
			canDoBetter,
			0,
			_Utils_Tuple2(
				current,
				A2($author$project$DomainModel$gpxDistance, currentGpx, click)),
			treeNode);
		if (_v9.$ === 'Just') {
			var _v10 = _v9.a;
			var bestIndex = _v10.a;
			var bestRange = _v10.b;
			return bestIndex;
		} else {
			return current;
		}
	});
var $elm_community$list_extra$List$Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $smucode$elm_flat_colors$FlatColors$SwedishPalette$freeSpeechBlue = A3($mdgriffith$elm_ui$Element$rgb255, 60, 64, 198);
var $author$project$ToolsController$getColour = F2(
	function (toolType, entries) {
		return A2(
			$elm$core$Maybe$withDefault,
			$smucode$elm_flat_colors$FlatColors$SwedishPalette$freeSpeechBlue,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.tabColour;
				},
				A2(
					$elm_community$list_extra$List$Extra$find,
					function (tab) {
						return _Utils_eq(tab.toolType, toolType);
					},
					entries)));
	});
var $author$project$Actions$HidePreview = function (a) {
	return {$: 'HidePreview', a: a};
};
var $author$project$Actions$PreviewCircle = {$: 'PreviewCircle'};
var $author$project$Actions$ShowPreview = function (a) {
	return {$: 'ShowPreview', a: a};
};
var $author$project$Tools$BendSmoother$computeNewPoints = F2(
	function (options, track) {
		var previewPoints = function (points) {
			return A2(
				$elm$core$List$map,
				function (earth) {
					return _Utils_Tuple2(
						earth,
						A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, earth));
				},
				points);
		};
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var _v1 = options.smoothedBend;
		if (_v1.$ === 'Just') {
			var bend = _v1.a;
			return previewPoints(bend.nodes);
		} else {
			return _List_Nil;
		}
	});
var $author$project$Tools$BendSmoother$previewActions = F3(
	function (newOptions, colour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: colour,
					points: A2($author$project$Tools$BendSmoother$computeNewPoints, newOptions, track),
					shape: $author$project$Actions$PreviewCircle,
					tag: 'bend'
				})
			]);
	});
var $ianmackenzie$elm_geometry$Direction2d$xComponent = function (_v0) {
	var d = _v0.a;
	return d.x;
};
var $ianmackenzie$elm_geometry$Direction2d$yComponent = function (_v0) {
	var d = _v0.a;
	return d.y;
};
var $ianmackenzie$elm_geometry$Arc2d$centerPoint = function (_v0) {
	var arc = _v0.a;
	var y0 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(arc.startPoint);
	var x0 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(arc.startPoint);
	var r = A2($ianmackenzie$elm_geometry$Quantity$Extra$lOverTheta, arc.signedLength, arc.sweptAngle);
	var dy = $ianmackenzie$elm_geometry$Direction2d$yComponent(arc.xDirection);
	var dx = $ianmackenzie$elm_geometry$Direction2d$xComponent(arc.xDirection);
	var cy = A2(
		$ianmackenzie$elm_units$Quantity$plus,
		A2($ianmackenzie$elm_units$Quantity$multiplyBy, dx, r),
		y0);
	var cx = A2(
		$ianmackenzie$elm_units$Quantity$minus,
		A2($ianmackenzie$elm_units$Quantity$multiplyBy, dy, r),
		x0);
	return A2($ianmackenzie$elm_geometry$Point2d$xy, cx, cy);
};
var $author$project$Geometry101$interpolateScalar = F3(
	function (fraction, a, b) {
		return (b * fraction) + (a * (1.0 - fraction));
	});
var $author$project$Geometry101$interpolateLine = F3(
	function (fraction, p1, p2) {
		return {
			x: A3($author$project$Geometry101$interpolateScalar, fraction, p1.x, p2.x),
			y: A3($author$project$Geometry101$interpolateScalar, fraction, p1.y, p2.y)
		};
	});
var $ianmackenzie$elm_geometry$Point2d$meters = F2(
	function (x, y) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: x, y: y});
	});
var $author$project$Geometry101$pointAlongRoad = F2(
	function (road, distanceFromStart) {
		var roadLength = A2($author$project$Geometry101$distance, road.startAt, road.endsAt);
		return A3($author$project$Geometry101$interpolateLine, distanceFromStart / roadLength, road.startAt, road.endsAt);
	});
var $author$project$Geometry101$pointsToGeometry = F2(
	function (p1, p2) {
		return {endsAt: p2, startAt: p1};
	});
var $ianmackenzie$elm_geometry$Point3d$toRecord = F2(
	function (fromQuantity, point) {
		return {
			x: fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$xCoordinate(point)),
			y: fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$yCoordinate(point)),
			z: fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$zCoordinate(point))
		};
	});
var $author$project$Tools$BendSmoother$toPlanarPoint = function (pt) {
	var _v0 = A2($ianmackenzie$elm_geometry$Point3d$toRecord, $ianmackenzie$elm_units$Length$inMeters, pt);
	var x = _v0.x;
	var y = _v0.y;
	var z = _v0.z;
	return {x: x, y: y};
};
var $author$project$Tools$BendSmoother$convergentRoadsArc = F3(
	function (p, r1, r2) {
		var _v0 = _Utils_Tuple2(
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.endPoint)),
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.endPoint)));
		var _v1 = _v0.a;
		var pa = _v1.a;
		var pb = _v1.b;
		var _v2 = _v0.b;
		var pc = _v2.a;
		var pd = _v2.b;
		var _v3 = _Utils_Tuple2(
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pa, pb),
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pc, pd));
		var r1Equation = _v3.a;
		var r2Equation = _v3.b;
		var _v4 = _Utils_Tuple2(
			A3($author$project$Geometry101$interpolateLine, 0.5, pa, pb),
			A3($author$project$Geometry101$interpolateLine, 0.5, pc, pd));
		var midAB = _v4.a;
		var midCD = _v4.b;
		var _v5 = (_Utils_cmp(
			A2($author$project$Geometry101$distance, p, midAB),
			A2($author$project$Geometry101$distance, p, midCD)) < 1) ? _Utils_Tuple2(
			midAB,
			A2(
				$author$project$Geometry101$pointAlongRoad,
				A2($author$project$Geometry101$pointsToGeometry, p, pd),
				A2($author$project$Geometry101$distance, p, midAB))) : _Utils_Tuple2(
			A2(
				$author$project$Geometry101$pointAlongRoad,
				A2($author$project$Geometry101$pointsToGeometry, p, pa),
				A2($author$project$Geometry101$distance, p, midCD)),
			midCD);
		var firstTangentPoint = _v5.a;
		var secondTangentPoint = _v5.b;
		var _v6 = _Utils_Tuple2(
			A2($author$project$Geometry101$linePerpendicularTo, r1Equation, firstTangentPoint),
			A2($author$project$Geometry101$linePerpendicularTo, r2Equation, secondTangentPoint));
		var perpFromFirstTangentPoint = _v6.a;
		var perpFromSecondTangentPoint = _v6.b;
		var circleCenter = A2($author$project$Geometry101$lineIntersection, perpFromFirstTangentPoint, perpFromSecondTangentPoint);
		var findArc = function (centre) {
			var radius = A2($author$project$Geometry101$distance, centre, firstTangentPoint);
			var bisectorAsRoad = {endsAt: p, startAt: centre};
			var midArcPoint = A2($author$project$Geometry101$pointAlongRoad, bisectorAsRoad, radius);
			return A3(
				$ianmackenzie$elm_geometry$Arc2d$throughPoints,
				A2($ianmackenzie$elm_geometry$Point2d$meters, firstTangentPoint.x, firstTangentPoint.y),
				A2($ianmackenzie$elm_geometry$Point2d$meters, midArcPoint.x, midArcPoint.y),
				A2($ianmackenzie$elm_geometry$Point2d$meters, secondTangentPoint.x, secondTangentPoint.y));
		};
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Maybe$Nothing,
			A2($elm$core$Maybe$map, findArc, circleCenter));
	});
var $author$project$Tools$BendSmoother$divergentRoadsArc = F3(
	function (p, r1, r2) {
		var _v0 = _Utils_Tuple2(
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.endPoint)),
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.endPoint)));
		var _v1 = _v0.a;
		var pa = _v1.a;
		var pb = _v1.b;
		var _v2 = _v0.b;
		var pc = _v2.a;
		var pd = _v2.b;
		var _v3 = _Utils_Tuple2(
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pa, pb),
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pc, pd));
		var r1Equation = _v3.a;
		var r2Equation = _v3.b;
		var _v4 = _Utils_Tuple2(
			A3($author$project$Geometry101$interpolateLine, 0.5, pa, pb),
			A3($author$project$Geometry101$interpolateLine, 0.5, pc, pd));
		var midAB = _v4.a;
		var midCD = _v4.b;
		var _v5 = (_Utils_cmp(
			A2($author$project$Geometry101$distance, p, midAB),
			A2($author$project$Geometry101$distance, p, midCD)) > -1) ? _Utils_Tuple2(
			midAB,
			A2(
				$author$project$Geometry101$pointAlongRoad,
				A2($author$project$Geometry101$pointsToGeometry, p, pc),
				A2($author$project$Geometry101$distance, p, midAB))) : _Utils_Tuple2(
			A2(
				$author$project$Geometry101$pointAlongRoad,
				A2($author$project$Geometry101$pointsToGeometry, p, pb),
				A2($author$project$Geometry101$distance, p, midCD)),
			midCD);
		var firstTangentPoint = _v5.a;
		var secondTangentPoint = _v5.b;
		var _v6 = _Utils_Tuple2(
			A2($author$project$Geometry101$linePerpendicularTo, r1Equation, firstTangentPoint),
			A2($author$project$Geometry101$linePerpendicularTo, r2Equation, secondTangentPoint));
		var perpFromFirstTangentPoint = _v6.a;
		var perpFromSecondTangentPoint = _v6.b;
		var circleCenter = A2($author$project$Geometry101$lineIntersection, perpFromFirstTangentPoint, perpFromSecondTangentPoint);
		var findArc = function (centre) {
			var radius = A2($author$project$Geometry101$distance, centre, firstTangentPoint);
			var bisectorAsRoad = {endsAt: centre, startAt: p};
			var midArcPoint = A2(
				$author$project$Geometry101$pointAlongRoad,
				bisectorAsRoad,
				radius + A2($author$project$Geometry101$distance, p, centre));
			return A3(
				$ianmackenzie$elm_geometry$Arc2d$throughPoints,
				A2($ianmackenzie$elm_geometry$Point2d$meters, firstTangentPoint.x, firstTangentPoint.y),
				A2($ianmackenzie$elm_geometry$Point2d$meters, midArcPoint.x, midArcPoint.y),
				A2($ianmackenzie$elm_geometry$Point2d$meters, secondTangentPoint.x, secondTangentPoint.y));
		};
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Maybe$Nothing,
			A2($elm$core$Maybe$map, findArc, circleCenter));
	});
var $author$project$Geometry101$findIntercept = F2(
	function (r1, r2) {
		var r2Line = A2($author$project$Geometry101$lineEquationFromTwoPoints, r2.startAt, r2.endsAt);
		var r1Line = A2($author$project$Geometry101$lineEquationFromTwoPoints, r1.startAt, r1.endsAt);
		return A2($author$project$Geometry101$lineIntersection, r1Line, r2Line);
	});
var $author$project$Geometry101$antiInterpolate = F3(
	function (p, pa, pb) {
		var bDist = A2($author$project$Geometry101$distance, p, pb);
		var ab = A2($author$project$Geometry101$distance, pa, pb);
		var aDist = A2($author$project$Geometry101$distance, p, pa);
		return (_Utils_cmp(aDist + bDist, ab) < 1) ? (aDist / ab) : ((_Utils_cmp(aDist, bDist) > 0) ? (aDist / ab) : ((_Utils_cmp(bDist, aDist) > 0) ? ((-1.0) * (aDist / ab)) : 0.0));
	});
var $author$project$Geometry101$isAfter = F2(
	function (r, p) {
		return A3($author$project$Geometry101$antiInterpolate, p, r.startAt, r.endsAt) > 1.0;
	});
var $author$project$Geometry101$isBefore = F2(
	function (r, p) {
		return A3($author$project$Geometry101$antiInterpolate, p, r.startAt, r.endsAt) < 0.0;
	});
var $ianmackenzie$elm_geometry$Quantity$Extra$aXbY = F4(
	function (a, _v0, b, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity((a * x) + (b * y));
	});
var $ianmackenzie$elm_units$Angle$sin = function (_v0) {
	var angle = _v0.a;
	return $elm$core$Basics$sin(angle);
};
var $ianmackenzie$elm_geometry$Quantity$Extra$rSinTheta = F2(
	function (r, theta) {
		return A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$ianmackenzie$elm_units$Angle$sin(theta),
			r);
	});
var $ianmackenzie$elm_units$Angle$tan = function (_v0) {
	var angle = _v0.a;
	return $elm$core$Basics$tan(angle);
};
var $ianmackenzie$elm_geometry$Arc2d$pointOn = F2(
	function (_v0, parameterValue) {
		var arc = _v0.a;
		var y0 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(arc.startPoint);
		var x0 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(arc.startPoint);
		var dy = $ianmackenzie$elm_geometry$Direction2d$yComponent(arc.xDirection);
		var dx = $ianmackenzie$elm_geometry$Direction2d$xComponent(arc.xDirection);
		var arcSweptAngle = arc.sweptAngle;
		var arcSignedLength = arc.signedLength;
		if (_Utils_eq(arcSweptAngle, $ianmackenzie$elm_units$Quantity$zero)) {
			var distance = A2($ianmackenzie$elm_units$Quantity$multiplyBy, parameterValue, arcSignedLength);
			var px = A2(
				$ianmackenzie$elm_units$Quantity$plus,
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, dx, distance),
				x0);
			var py = A2(
				$ianmackenzie$elm_units$Quantity$plus,
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, dy, distance),
				y0);
			return A2($ianmackenzie$elm_geometry$Point2d$xy, px, py);
		} else {
			var theta = A2($ianmackenzie$elm_units$Quantity$multiplyBy, parameterValue, arcSweptAngle);
			var arcRadius = A2($ianmackenzie$elm_geometry$Quantity$Extra$lOverTheta, arcSignedLength, arcSweptAngle);
			var x = A2($ianmackenzie$elm_geometry$Quantity$Extra$rSinTheta, arcRadius, theta);
			var y = A2(
				$ianmackenzie$elm_units$Quantity$lessThan,
				$ianmackenzie$elm_units$Angle$radians($elm$core$Basics$pi / 2),
				$ianmackenzie$elm_units$Quantity$abs(theta)) ? A2(
				$ianmackenzie$elm_units$Quantity$multiplyBy,
				$ianmackenzie$elm_units$Angle$tan(
					A2($ianmackenzie$elm_units$Quantity$multiplyBy, 0.5, theta)),
				x) : A2(
				$ianmackenzie$elm_units$Quantity$multiplyBy,
				1 - $ianmackenzie$elm_units$Angle$cos(theta),
				arcRadius);
			var px = A2(
				$ianmackenzie$elm_units$Quantity$plus,
				A4($ianmackenzie$elm_geometry$Quantity$Extra$aXbY, dx, x, -dy, y),
				x0);
			var py = A2(
				$ianmackenzie$elm_units$Quantity$plus,
				A4($ianmackenzie$elm_geometry$Quantity$Extra$aXbY, dy, x, dx, y),
				y0);
			return A2($ianmackenzie$elm_geometry$Point2d$xy, px, py);
		}
	});
var $ianmackenzie$elm_geometry$Arc2d$endPoint = function (arc) {
	return A2($ianmackenzie$elm_geometry$Arc2d$pointOn, arc, 1.0);
};
var $ianmackenzie$elm_geometry$Vector3d$fromMeters = function (givenComponents) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(givenComponents);
};
var $ianmackenzie$elm_geometry$Point3d$fromTuple = F2(
	function (toQuantity, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		var z = _v0.c;
		return A3(
			$ianmackenzie$elm_geometry$Point3d$xyz,
			toQuantity(x),
			toQuantity(y),
			toQuantity(z));
	});
var $ianmackenzie$elm_geometry$LineSegment2d$endpoints = function (_v0) {
	var endpoints_ = _v0.a;
	return endpoints_;
};
var $ianmackenzie$elm_geometry$LineSegment2d$vector = function (lineSegment) {
	var _v0 = $ianmackenzie$elm_geometry$LineSegment2d$endpoints(lineSegment);
	var p1 = _v0.a;
	var p2 = _v0.b;
	return A2($ianmackenzie$elm_geometry$Vector2d$from, p1, p2);
};
var $ianmackenzie$elm_geometry$LineSegment2d$length = function (givenSegment) {
	return $ianmackenzie$elm_geometry$Vector2d$length(
		$ianmackenzie$elm_geometry$LineSegment2d$vector(givenSegment));
};
var $ianmackenzie$elm_geometry$Arc2d$radius = function (_v0) {
	var arc = _v0.a;
	return A2($ianmackenzie$elm_geometry$Quantity$Extra$lOverTheta, arc.signedLength, arc.sweptAngle);
};
var $ianmackenzie$elm_geometry$Geometry$Types$Polyline2d = function (a) {
	return {$: 'Polyline2d', a: a};
};
var $ianmackenzie$elm_geometry$Polyline2d$fromVertices = function (givenVertices) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Polyline2d(givenVertices);
};
var $ianmackenzie$elm_geometry$Arc2d$segments = F2(
	function (numSegments, arc) {
		return $ianmackenzie$elm_geometry$Polyline2d$fromVertices(
			A2(
				$ianmackenzie$elm_1d_parameter$Parameter1d$steps,
				numSegments,
				$ianmackenzie$elm_geometry$Arc2d$pointOn(arc)));
	});
var $ianmackenzie$elm_geometry$Geometry$Types$LineSegment2d = function (a) {
	return {$: 'LineSegment2d', a: a};
};
var $ianmackenzie$elm_geometry$LineSegment2d$fromEndpoints = $ianmackenzie$elm_geometry$Geometry$Types$LineSegment2d;
var $ianmackenzie$elm_geometry$LineSegment2d$from = F2(
	function (startPoint_, endPoint_) {
		return $ianmackenzie$elm_geometry$LineSegment2d$fromEndpoints(
			_Utils_Tuple2(startPoint_, endPoint_));
	});
var $ianmackenzie$elm_geometry$Polyline2d$vertices = function (_v0) {
	var polylineVertices = _v0.a;
	return polylineVertices;
};
var $ianmackenzie$elm_geometry$Polyline2d$segments = function (polyline) {
	var _v0 = $ianmackenzie$elm_geometry$Polyline2d$vertices(polyline);
	if (!_v0.b) {
		return _List_Nil;
	} else {
		var all = _v0;
		var first = all.a;
		var rest = all.b;
		return A3($elm$core$List$map2, $ianmackenzie$elm_geometry$LineSegment2d$from, all, rest);
	}
};
var $ianmackenzie$elm_geometry$Arc2d$startPoint = function (_v0) {
	var properties = _v0.a;
	return properties.startPoint;
};
var $ianmackenzie$elm_geometry$LineSegment2d$startPoint = function (_v0) {
	var _v1 = _v0.a;
	var start = _v1.a;
	return start;
};
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $ianmackenzie$elm_geometry$Arc2d$sweptAngle = function (_v0) {
	var properties = _v0.a;
	return properties.sweptAngle;
};
var $ianmackenzie$elm_geometry$Point3d$fromMeters = function (givenCoordinates) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(givenCoordinates);
};
var $ianmackenzie$elm_geometry$Point2d$toMeters = function (_v0) {
	var pointCoordinates = _v0.a;
	return pointCoordinates;
};
var $author$project$Tools$BendSmoother$withElevation = F2(
	function (elevation, p2) {
		var _v0 = $ianmackenzie$elm_geometry$Point2d$toMeters(p2);
		var x = _v0.x;
		var y = _v0.y;
		return $ianmackenzie$elm_geometry$Point3d$fromMeters(
			{x: x, y: y, z: elevation});
	});
var $author$project$Tools$BendSmoother$makeSmoothBend = F4(
	function (trackPointSpacing, roadAB, roadCD, arc) {
		var trueArcLength = $elm$core$Basics$abs(
			$ianmackenzie$elm_units$Angle$inRadians(
				$ianmackenzie$elm_geometry$Arc2d$sweptAngle(arc))) * $ianmackenzie$elm_units$Length$inMeters(
			$ianmackenzie$elm_geometry$Arc2d$radius(arc));
		var numberPointsOnArc = $elm$core$Basics$ceiling(trueArcLength / trackPointSpacing);
		var segments = $ianmackenzie$elm_geometry$Polyline2d$segments(
			A2($ianmackenzie$elm_geometry$Arc2d$segments, numberPointsOnArc - 1, arc));
		var realArcLength = $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeL, $ianmackenzie$elm_units$Length$inMeters, $ianmackenzie$elm_geometry$LineSegment2d$length),
				segments));
		var _v0 = _Utils_Tuple2(
			A2(
				$ianmackenzie$elm_geometry$Point2d$toRecord,
				$ianmackenzie$elm_units$Length$inMeters,
				$ianmackenzie$elm_geometry$Arc2d$startPoint(arc)),
			A2(
				$ianmackenzie$elm_geometry$Point2d$toRecord,
				$ianmackenzie$elm_units$Length$inMeters,
				$ianmackenzie$elm_geometry$Arc2d$endPoint(arc)));
		var p1 = _v0.a;
		var p2 = _v0.b;
		var _v1 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$zCoordinate(roadAB.startPoint)),
			$ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$zCoordinate(roadCD.endPoint)));
		var elevationAtA = _v1.a;
		var elevationAtD = _v1.b;
		var _v2 = _Utils_Tuple2(
			A2(
				$ianmackenzie$elm_geometry$Point3d$fromTuple,
				$ianmackenzie$elm_units$Length$meters,
				_Utils_Tuple3(p1.x, p1.y, elevationAtA)),
			A2(
				$ianmackenzie$elm_geometry$Point3d$fromTuple,
				$ianmackenzie$elm_units$Length$meters,
				_Utils_Tuple3(p2.x, p2.y, elevationAtD)));
		var tang1 = _v2.a;
		var tang2 = _v2.b;
		var _v3 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Length$inMeters(
				A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, roadAB.startPoint, tang1)),
			$ianmackenzie$elm_units$Length$inMeters(
				A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, tang2, roadCD.endPoint)));
		var entryStraightLength = _v3.a;
		var exitStraightLength = _v3.b;
		var totalNewLength = (entryStraightLength + realArcLength) + exitStraightLength;
		var _v4 = _Utils_Tuple2(elevationAtA + ((entryStraightLength / totalNewLength) * (elevationAtD - elevationAtA)), elevationAtD + ((exitStraightLength / totalNewLength) * (elevationAtA - elevationAtD)));
		var tangent1Elevation = _v4.a;
		var tangent2Elevation = _v4.b;
		var _v5 = _Utils_Tuple2(
			A2(
				$ianmackenzie$elm_geometry$Point3d$translateBy,
				$ianmackenzie$elm_geometry$Vector3d$fromMeters(
					{x: 0, y: 0, z: tangent1Elevation - elevationAtA}),
				tang1),
			A2(
				$ianmackenzie$elm_geometry$Point3d$translateBy,
				$ianmackenzie$elm_geometry$Vector3d$fromMeters(
					{x: 0, y: 0, z: tangent2Elevation - elevationAtD}),
				tang2));
		var newEntryPoint = _v5.a;
		var newExitPoint = _v5.b;
		var eleIncrement = (tangent2Elevation - tangent1Elevation) / (numberPointsOnArc - 1);
		var elevate = F2(
			function (point2d, i) {
				return A2($author$project$Tools$BendSmoother$withElevation, tangent1Elevation + (i * eleIncrement), point2d);
			});
		var newArcPoints = A3(
			$elm$core$List$map2,
			elevate,
			A2(
				$elm$core$List$map,
				$ianmackenzie$elm_geometry$LineSegment2d$startPoint,
				A2($elm$core$List$drop, 1, segments)),
			A2($elm$core$List$range, 1, numberPointsOnArc - 1));
		var newEarthPoints = _Utils_ap(
			_List_fromArray(
				[roadAB.startPoint, newEntryPoint]),
			_Utils_ap(
				newArcPoints,
				_List_fromArray(
					[newExitPoint, roadCD.endPoint])));
		return A2(
			$elm$core$List$drop,
			1,
			A2(
				$elm$core$List$take,
				$elm$core$List$length(newEarthPoints) - 1,
				newEarthPoints));
	});
var $author$project$Tools$BendSmoother$parallelFindSemicircle = F2(
	function (r1, r2) {
		var _v0 = _Utils_Tuple2(
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.endPoint)),
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.endPoint)));
		var _v1 = _v0.a;
		var pa = _v1.a;
		var pb = _v1.b;
		var _v2 = _v0.b;
		var pc = _v2.a;
		var pd = _v2.b;
		var _v3 = _Utils_Tuple2(
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pa, pb),
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pc, pd));
		var r1Equation = _v3.a;
		var r2Equation = _v3.b;
		var _v4 = _Utils_Tuple2(
			A3($author$project$Geometry101$interpolateLine, 0.5, pc, pd),
			A3($author$project$Geometry101$interpolateLine, 0.5, pd, pa));
		var midCD = _v4.a;
		var midDA = _v4.b;
		var _v5 = _Utils_Tuple2(
			A3($author$project$Geometry101$interpolateLine, 0.5, pa, pb),
			A3($author$project$Geometry101$interpolateLine, 0.5, pb, pc));
		var midAB = _v5.a;
		var midBC = _v5.b;
		var middle = A3($author$project$Geometry101$interpolateLine, 0.5, midBC, midDA);
		var _v6 = _Utils_Tuple2(
			A2($author$project$Geometry101$linePerpendicularTo, r1Equation, middle),
			A2($author$project$Geometry101$linePerpendicularTo, r2Equation, middle));
		var radiusToFirstTangentPoint = _v6.a;
		var radiusToSecondTangentPoint = _v6.b;
		var _v7 = _Utils_Tuple2(
			A2($author$project$Geometry101$lineIntersection, r1Equation, radiusToFirstTangentPoint),
			A2($author$project$Geometry101$lineIntersection, r2Equation, radiusToSecondTangentPoint));
		var firstTangentPoint = _v7.a;
		var secondTangentPoint = _v7.b;
		var centreLine = {endsAt: midBC, startAt: middle};
		var _v8 = _Utils_Tuple2(firstTangentPoint, secondTangentPoint);
		if ((_v8.a.$ === 'Just') && (_v8.b.$ === 'Just')) {
			var t1 = _v8.a.a;
			var t2 = _v8.b.a;
			var radius = A2($author$project$Geometry101$distance, middle, t1);
			var midArcPoint = A2($author$project$Geometry101$pointAlongRoad, centreLine, radius);
			return ((radius > 0.0) && (radius < 1000.0)) ? A3(
				$ianmackenzie$elm_geometry$Arc2d$throughPoints,
				A2($ianmackenzie$elm_geometry$Point2d$meters, t1.x, t1.y),
				A2($ianmackenzie$elm_geometry$Point2d$meters, midArcPoint.x, midArcPoint.y),
				A2($ianmackenzie$elm_geometry$Point2d$meters, t2.x, t2.y)) : $elm$core$Maybe$Nothing;
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Tools$BendSmoother$roadToGeometry = function (road) {
	return {
		endsAt: {
			x: $ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$xCoordinate(road.endPoint)),
			y: $ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$yCoordinate(road.endPoint))
		},
		startAt: {
			x: $ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$xCoordinate(road.startPoint)),
			y: $ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$yCoordinate(road.startPoint))
		}
	};
};
var $author$project$Tools$BendSmoother$lookForSmoothBendOption = F4(
	function (trackPointSpacing, track, pointA, pointD) {
		var _v0 = _Utils_Tuple2(
			$author$project$DomainModel$asRecord(
				A2($author$project$DomainModel$leafFromIndex, pointA, track.trackTree)),
			$author$project$DomainModel$asRecord(
				A2($author$project$DomainModel$leafFromIndex, pointD - 1, track.trackTree)));
		var roadAB = _v0.a;
		var roadCD = _v0.b;
		var _v1 = _Utils_Tuple2(
			$author$project$Tools$BendSmoother$roadToGeometry(roadAB),
			$author$project$Tools$BendSmoother$roadToGeometry(roadCD));
		var roadIn = _v1.a;
		var roadOut = _v1.b;
		var arcFinderGeneral = function (p) {
			return (A2($author$project$Geometry101$isBefore, roadIn, p) && A2($author$project$Geometry101$isAfter, roadOut, p)) ? A3($author$project$Tools$BendSmoother$divergentRoadsArc, p, roadAB, roadCD) : ((A2($author$project$Geometry101$isAfter, roadIn, p) && A2($author$project$Geometry101$isBefore, roadOut, p)) ? A3($author$project$Tools$BendSmoother$convergentRoadsArc, p, roadAB, roadCD) : $elm$core$Maybe$Nothing);
		};
		var maybeArc = function () {
			var _v3 = A2($author$project$Geometry101$findIntercept, roadIn, roadOut);
			if (_v3.$ === 'Nothing') {
				return A2($author$project$Tools$BendSmoother$parallelFindSemicircle, roadAB, roadCD);
			} else {
				var p = _v3.a;
				return arcFinderGeneral(p);
			}
		}();
		if (maybeArc.$ === 'Just') {
			var arc = maybeArc.a;
			return $elm$core$Maybe$Just(
				{
					centre: $ianmackenzie$elm_geometry$Arc2d$centerPoint(arc),
					endIndex: pointD,
					nodes: A4($author$project$Tools$BendSmoother$makeSmoothBend, trackPointSpacing, roadAB, roadCD, arc),
					radius: $ianmackenzie$elm_units$Length$inMeters(
						$ianmackenzie$elm_geometry$Arc2d$radius(arc)),
					startIndex: pointA
				});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Tools$BendSmoother$tryBendSmoother = F2(
	function (track, options) {
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var _v1 = _Utils_Tuple2(
			fromStart,
			$author$project$DomainModel$skipCount(track.trackTree) - fromEnd);
		var startPoint = _v1.a;
		var endPoint = _v1.b;
		var updatedOptions = _Utils_update(
			options,
			{
				smoothedBend: (_Utils_cmp(endPoint, startPoint + 2) > -1) ? A4($author$project$Tools$BendSmoother$lookForSmoothBendOption, options.bendTrackPointSpacing, track, startPoint, endPoint) : $elm$core$Maybe$Nothing
			});
		return updatedOptions;
	});
var $author$project$Tools$BendSmoother$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var newOptions = A2($author$project$Tools$BendSmoother$tryBendSmoother, theTrack, options);
			return _Utils_Tuple2(
				newOptions,
				A3($author$project$Tools$BendSmoother$previewActions, newOptions, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('bend')
					]));
		}
	});
var $author$project$Tools$BezierSplines$actions = F3(
	function (newOptions, previewColour, track) {
		return _Utils_eq(newOptions.extent, $author$project$Tools$BezierOptions$ExtentIsRange) ? _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: previewColour,
					points: A2($author$project$Tools$BezierSplines$computeNewPoints, newOptions, track),
					shape: $author$project$Actions$PreviewCircle,
					tag: 'bezier'
				})
			]) : _List_fromArray(
			[
				$author$project$Actions$HidePreview('bezier')
			]);
	});
var $author$project$Tools$BezierSplines$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				options,
				A3($author$project$Tools$BezierSplines$actions, options, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('bezier')
					]));
		}
	});
var $author$project$Tools$CentroidAverage$actions = F3(
	function (newOptions, previewColour, track) {
		return _Utils_eq(newOptions.extent, $author$project$Tools$CentroidAverageOptions$ExtentRange) ? _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: previewColour,
					points: A2($author$project$Tools$CentroidAverage$computeNewPoints, newOptions, track),
					shape: $author$project$Actions$PreviewCircle,
					tag: 'centroid'
				})
			]) : _List_fromArray(
			[
				$author$project$Actions$HidePreview('centroid')
			]);
	});
var $author$project$Tools$CentroidAverage$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				options,
				A3($author$project$Tools$CentroidAverage$actions, options, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('centroid')
					]));
		}
	});
var $author$project$Actions$PreviewToolSupplied = function (a) {
	return {$: 'PreviewToolSupplied', a: a};
};
var $avh4$elm_color$Color$RgbaSpace = F4(
	function (a, b, c, d) {
		return {$: 'RgbaSpace', a: a, b: b, c: c, d: d};
	});
var $avh4$elm_color$Color$blue = A4($avh4$elm_color$Color$RgbaSpace, 52 / 255, 101 / 255, 164 / 255, 1.0);
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Constant = function (a) {
	return {$: 'Constant', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$UnlitMaterial = F2(
	function (a, b) {
		return {$: 'UnlitMaterial', a: a, b: b};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$UseMeshUvs = {$: 'UseMeshUvs'};
var $avh4$elm_color$Color$toRgba = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $elm_explorations$linear_algebra$Math$Vector3$vec3 = _MJS_v3;
var $ianmackenzie$elm_3d_scene$Scene3d$Material$toVec3 = function (givenColor) {
	var _v0 = $avh4$elm_color$Color$toRgba(givenColor);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	return A3($elm_explorations$linear_algebra$Math$Vector3$vec3, red, green, blue);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Material$color = function (givenColor) {
	return A2(
		$ianmackenzie$elm_3d_scene$Scene3d$Types$UnlitMaterial,
		$ianmackenzie$elm_3d_scene$Scene3d$Types$UseMeshUvs,
		$ianmackenzie$elm_3d_scene$Scene3d$Types$Constant(
			$ianmackenzie$elm_3d_scene$Scene3d$Material$toVec3(givenColor)));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity = function (a) {
	return {$: 'Entity', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$PointNode = F2(
	function (a, b) {
		return {$: 'PointNode', a: a, b: b};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantPointFragment = {
	src: '\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ',
	attributes: {},
	uniforms: {constantColor: 'constantColor', pointRadius: 'pointRadius', sceneProperties: 'sceneProperties'}
};
var $elm_explorations$webgl$WebGL$Mesh1 = F2(
	function (a, b) {
		return {$: 'Mesh1', a: a, b: b};
	});
var $elm_explorations$webgl$WebGL$points = $elm_explorations$webgl$WebGL$Mesh1(
	{elemSize: 1, indexSize: 0, mode: 0});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$dummyVertex = $elm_explorations$webgl$WebGL$points(
	_List_fromArray(
		[
			{dummyAttribute: 1}
		]));
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissivePointFragment = {
	src: '\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ',
	attributes: {},
	uniforms: {emissiveColor: 'emissiveColor', pointRadius: 'pointRadius', sceneProperties: 'sceneProperties'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyNode = {$: 'EmptyNode'};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty = $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity($ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyNode);
var $elm_explorations$webgl$WebGL$Internal$enableOption = F2(
	function (ctx, option) {
		switch (option.$) {
			case 'Alpha':
				return A2(_WebGL_enableAlpha, ctx, option);
			case 'Depth':
				return A2(_WebGL_enableDepth, ctx, option);
			case 'Stencil':
				return A2(_WebGL_enableStencil, ctx, option);
			case 'Antialias':
				return A2(_WebGL_enableAntialias, ctx, option);
			case 'ClearColor':
				return A2(_WebGL_enableClearColor, ctx, option);
			default:
				return A2(_WebGL_enablePreserveDrawingBuffer, ctx, option);
		}
	});
var $elm_explorations$webgl$WebGL$Internal$enableSetting = F2(
	function (cache, setting) {
		switch (setting.$) {
			case 'Blend':
				return A2(_WebGL_enableBlend, cache, setting);
			case 'DepthTest':
				return A2(_WebGL_enableDepthTest, cache, setting);
			case 'StencilTest':
				return A2(_WebGL_enableStencilTest, cache, setting);
			case 'Scissor':
				return A2(_WebGL_enableScissor, cache, setting);
			case 'ColorMask':
				return A2(_WebGL_enableColorMask, cache, setting);
			case 'CullFace':
				return A2(_WebGL_enableCullFace, cache, setting);
			case 'PolygonOffset':
				return A2(_WebGL_enablePolygonOffset, cache, setting);
			case 'SampleCoverage':
				return A2(_WebGL_enableSampleCoverage, cache, setting);
			default:
				return _WebGL_enableSampleAlphaToCoverage(cache);
		}
	});
var $elm_explorations$webgl$WebGL$entityWith = _WebGL_entity;
var $ianmackenzie$elm_units$Luminance$inNits = function (_v0) {
	var numNits = _v0.a;
	return numNits;
};
var $elm_explorations$linear_algebra$Math$Vector3$scale = _MJS_v3scale;
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$singlePointVertex = {
	src: '\n        precision highp float;\n        \n        attribute lowp float dummyAttribute;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 pointPosition;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(pointPosition, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling * dummyAttribute + 2.0;\n        }\n    ',
	attributes: {dummyAttribute: 'dummyAttribute'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', pointPosition: 'pointPosition', pointRadius: 'pointRadius', projectionMatrix: 'projectionMatrix', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_geometry$Point3d$unwrap = function (_v0) {
	var pointCoordinates = _v0.a;
	return pointCoordinates;
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds = function (boundingBox) {
	var _v0 = $ianmackenzie$elm_geometry$BoundingBox3d$dimensions(boundingBox);
	var xDimension = _v0.a.a;
	var yDimension = _v0.b.a;
	var zDimension = _v0.c.a;
	return {
		centerPoint: $ianmackenzie$elm_geometry$Point3d$unwrap(
			$ianmackenzie$elm_geometry$BoundingBox3d$centerPoint(boundingBox)),
		halfX: xDimension / 2,
		halfY: yDimension / 2,
		halfZ: zDimension / 2
	};
};
var $ianmackenzie$elm_units$Pixels$toFloat = function (_v0) {
	var numPixels = _v0.a;
	return numPixels;
};
var $elm_explorations$linear_algebra$Math$Vector3$fromRecord = _MJS_v3fromRecord;
var $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3 = function (point) {
	return $elm_explorations$linear_algebra$Math$Vector3$fromRecord(
		$ianmackenzie$elm_geometry$Point3d$unwrap(point));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$point = F3(
	function (givenRadius, givenMaterial, givenPoint) {
		var boundingBox = $ianmackenzie$elm_geometry$BoundingBox3d$singleton(givenPoint);
		var bounds = $ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox);
		switch (givenMaterial.$) {
			case 'UnlitMaterial':
				if (givenMaterial.b.$ === 'Constant') {
					var color = givenMaterial.b.a;
					return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
						A2(
							$ianmackenzie$elm_3d_scene$Scene3d$Types$PointNode,
							bounds,
							F8(
								function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
									return A5(
										$elm_explorations$webgl$WebGL$entityWith,
										settings,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$singlePointVertex,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantPointFragment,
										$ianmackenzie$elm_3d_scene$Scene3d$Entity$dummyVertex,
										{
											constantColor: color,
											modelMatrix: modelMatrix,
											modelScale: modelScale,
											pointPosition: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(givenPoint),
											pointRadius: $ianmackenzie$elm_units$Pixels$toFloat(givenRadius),
											projectionMatrix: projectionMatrix,
											sceneProperties: sceneProperties,
											viewMatrix: viewMatrix
										});
								})));
				} else {
					var data = givenMaterial.b.a.data;
					return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
				}
			case 'EmissiveMaterial':
				if (givenMaterial.b.$ === 'Constant') {
					var color = givenMaterial.b.a.a;
					var backlight = givenMaterial.c;
					return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
						A2(
							$ianmackenzie$elm_3d_scene$Scene3d$Types$PointNode,
							bounds,
							F8(
								function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
									return A5(
										$elm_explorations$webgl$WebGL$entityWith,
										settings,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$singlePointVertex,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissivePointFragment,
										$ianmackenzie$elm_3d_scene$Scene3d$Entity$dummyVertex,
										{
											emissiveColor: A2(
												$elm_explorations$linear_algebra$Math$Vector3$scale,
												$ianmackenzie$elm_units$Luminance$inNits(backlight),
												color),
											modelMatrix: modelMatrix,
											modelScale: modelScale,
											pointPosition: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(givenPoint),
											pointRadius: $ianmackenzie$elm_units$Pixels$toFloat(givenRadius),
											projectionMatrix: projectionMatrix,
											sceneProperties: sceneProperties,
											viewMatrix: viewMatrix
										});
								})));
				} else {
					return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
				}
			case 'LambertianMaterial':
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
			default:
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$point = F3(
	function (_v0, givenMaterial, givenPoint) {
		var radius = _v0.radius;
		return A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$point, radius, givenMaterial, givenPoint);
	});
var $author$project$Tools$CurveFormer$highlightPoints = F3(
	function (color, points, track) {
		var material = $ianmackenzie$elm_3d_scene$Scene3d$Material$color(color);
		var highlightPoint = function (index) {
			var xyz = A2($author$project$DomainModel$earthPointFromIndex, index, track.trackTree);
			return A3(
				$ianmackenzie$elm_3d_scene$Scene3d$point,
				{
					radius: $ianmackenzie$elm_units$Pixels$pixels(5)
				},
				material,
				xyz);
		};
		return A2($elm$core$List$map, highlightPoint, points);
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Circle3d = function (a) {
	return {$: 'Circle3d', a: a};
};
var $ianmackenzie$elm_geometry$Circle3d$withRadius = F3(
	function (givenRadius, givenAxialDirection, givenCenterPoint) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Circle3d(
			{
				axialDirection: givenAxialDirection,
				centerPoint: givenCenterPoint,
				radius: $ianmackenzie$elm_units$Quantity$abs(givenRadius)
			});
	});
var $ianmackenzie$elm_geometry$Vector2d$xComponent = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(v.x);
};
var $ianmackenzie$elm_geometry$Vector2d$yComponent = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(v.y);
};
var $author$project$Tools$CurveFormer$getCircle = F2(
	function (options, track) {
		var translation = A3(
			$ianmackenzie$elm_geometry$Vector3d$xyz,
			$ianmackenzie$elm_geometry$Vector2d$xComponent(options.vector),
			$ianmackenzie$elm_units$Quantity$negate(
				$ianmackenzie$elm_geometry$Vector2d$yComponent(options.vector)),
			$ianmackenzie$elm_units$Quantity$zero);
		var orange = A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree);
		var centre = function () {
			var _v0 = options.referencePoint;
			if (_v0.$ === 'Just') {
				var localReference = _v0.a;
				return A2($ianmackenzie$elm_geometry$Point3d$translateBy, translation, localReference);
			} else {
				return A2($ianmackenzie$elm_geometry$Point3d$translateBy, translation, orange);
			}
		}();
		return A3($ianmackenzie$elm_geometry$Circle3d$withRadius, options.pushRadius, $ianmackenzie$elm_geometry$Direction3d$positiveZ, centre);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode = F2(
	function (a, b) {
		return {$: 'MeshNode', a: a, b: b};
	});
var $ianmackenzie$elm_geometry$LineSegment3d$boundingBox = function (lineSegment) {
	var _v0 = $ianmackenzie$elm_geometry$LineSegment3d$endpoints(lineSegment);
	var p1 = _v0.a;
	var p2 = _v0.b;
	return A2($ianmackenzie$elm_geometry$BoundingBox3d$from, p1, p2);
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantFragment = {
	src: '\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ',
	attributes: {},
	uniforms: {constantColor: 'constantColor'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveFragment = {
	src: '\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {emissiveColor: 'emissiveColor', sceneProperties: 'sceneProperties'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lineSegmentVertex = {
	src: '\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ',
	attributes: {lineSegmentVertex: 'lineSegmentVertex'},
	uniforms: {lineSegmentEndPoint: 'lineSegmentEndPoint', lineSegmentStartPoint: 'lineSegmentStartPoint', modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $elm_explorations$webgl$WebGL$Mesh2 = F2(
	function (a, b) {
		return {$: 'Mesh2', a: a, b: b};
	});
var $elm_explorations$webgl$WebGL$lines = $elm_explorations$webgl$WebGL$Mesh2(
	{elemSize: 2, indexSize: 0, mode: 1});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$lineSegmentVertices = $elm_explorations$webgl$WebGL$lines(
	_List_fromArray(
		[
			_Utils_Tuple2(
			{lineSegmentVertex: 0},
			{lineSegmentVertex: 1})
		]));
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$lineSegment = F2(
	function (givenMaterial, givenLineSegment) {
		var boundingBox = $ianmackenzie$elm_geometry$LineSegment3d$boundingBox(givenLineSegment);
		var bounds = $ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox);
		var _v0 = $ianmackenzie$elm_geometry$LineSegment3d$endpoints(givenLineSegment);
		var p1 = _v0.a;
		var p2 = _v0.b;
		switch (givenMaterial.$) {
			case 'UnlitMaterial':
				if (givenMaterial.b.$ === 'Constant') {
					var color = givenMaterial.b.a;
					return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
						A2(
							$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
							bounds,
							F8(
								function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
									return A5(
										$elm_explorations$webgl$WebGL$entityWith,
										settings,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lineSegmentVertex,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantFragment,
										$ianmackenzie$elm_3d_scene$Scene3d$Entity$lineSegmentVertices,
										{
											constantColor: color,
											lineSegmentEndPoint: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p2),
											lineSegmentStartPoint: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p1),
											modelMatrix: modelMatrix,
											modelScale: modelScale,
											projectionMatrix: projectionMatrix,
											sceneProperties: sceneProperties,
											viewMatrix: viewMatrix
										});
								})));
				} else {
					var _v2 = givenMaterial.a;
					var data = givenMaterial.b.a.data;
					return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
				}
			case 'EmissiveMaterial':
				if (givenMaterial.b.$ === 'Constant') {
					var color = givenMaterial.b.a.a;
					var backlight = givenMaterial.c;
					return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
						A2(
							$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
							bounds,
							F8(
								function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
									return A5(
										$elm_explorations$webgl$WebGL$entityWith,
										settings,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lineSegmentVertex,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveFragment,
										$ianmackenzie$elm_3d_scene$Scene3d$Entity$lineSegmentVertices,
										{
											emissiveColor: A2(
												$elm_explorations$linear_algebra$Math$Vector3$scale,
												$ianmackenzie$elm_units$Luminance$inNits(backlight),
												color),
											lineSegmentEndPoint: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p2),
											lineSegmentStartPoint: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p1),
											modelMatrix: modelMatrix,
											modelScale: modelScale,
											projectionMatrix: projectionMatrix,
											sceneProperties: sceneProperties,
											viewMatrix: viewMatrix
										});
								})));
				} else {
					return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
				}
			case 'LambertianMaterial':
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
			default:
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$lineSegment = F2(
	function (givenMaterial, givenLineSegment) {
		return A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$lineSegment, givenMaterial, givenLineSegment);
	});
var $ianmackenzie$elm_geometry$Polyline3d$segments = function (polyline) {
	var _v0 = $ianmackenzie$elm_geometry$Polyline3d$vertices(polyline);
	if (!_v0.b) {
		return _List_Nil;
	} else {
		var all = _v0;
		var first = all.a;
		var rest = all.b;
		return A3($elm$core$List$map2, $ianmackenzie$elm_geometry$LineSegment3d$from, all, rest);
	}
};
var $ianmackenzie$elm_geometry$Circle3d$axialDirection = function (_v0) {
	var circle = _v0.a;
	return circle.axialDirection;
};
var $ianmackenzie$elm_geometry$Circle3d$axis = function (_v0) {
	var circle = _v0.a;
	return A2($ianmackenzie$elm_geometry$Axis3d$through, circle.centerPoint, circle.axialDirection);
};
var $ianmackenzie$elm_geometry$Circle3d$centerPoint = function (_v0) {
	var circle = _v0.a;
	return circle.centerPoint;
};
var $ianmackenzie$elm_geometry$Direction3d$perpendicularTo = function (_v0) {
	var d = _v0.a;
	var absZ = $elm$core$Basics$abs(d.z);
	var absY = $elm$core$Basics$abs(d.y);
	var absX = $elm$core$Basics$abs(d.x);
	if (_Utils_cmp(absX, absY) < 1) {
		if (_Utils_cmp(absX, absZ) < 1) {
			var scale = $elm$core$Basics$sqrt((d.z * d.z) + (d.y * d.y));
			return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
				{x: 0, y: (-d.z) / scale, z: d.y / scale});
		} else {
			var scale = $elm$core$Basics$sqrt((d.y * d.y) + (d.x * d.x));
			return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
				{x: (-d.y) / scale, y: d.x / scale, z: 0});
		}
	} else {
		if (_Utils_cmp(absY, absZ) < 1) {
			var scale = $elm$core$Basics$sqrt((d.z * d.z) + (d.x * d.x));
			return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
				{x: d.z / scale, y: 0, z: (-d.x) / scale});
		} else {
			var scale = $elm$core$Basics$sqrt((d.x * d.x) + (d.y * d.y));
			return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
				{x: (-d.y) / scale, y: d.x / scale, z: 0});
		}
	}
};
var $ianmackenzie$elm_geometry$Circle3d$radius = function (_v0) {
	var properties = _v0.a;
	return properties.radius;
};
var $ianmackenzie$elm_geometry$Axis3d$direction = function (_v0) {
	var axis = _v0.a;
	return axis.direction;
};
var $ianmackenzie$elm_geometry$Direction3d$perpendicularBasis = function (direction) {
	var xDirection = $ianmackenzie$elm_geometry$Direction3d$perpendicularTo(direction);
	var _v0 = xDirection;
	var dX = _v0.a;
	var _v1 = direction;
	var d = _v1.a;
	var yDirection = $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
		{x: (d.y * dX.z) - (d.z * dX.y), y: (d.z * dX.x) - (d.x * dX.z), z: (d.x * dX.y) - (d.y * dX.x)});
	return _Utils_Tuple2(xDirection, yDirection);
};
var $ianmackenzie$elm_geometry$Point3d$projectOntoAxis = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var p = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var _v3 = axis.direction;
		var d = _v3.a;
		var distance = (((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y)) + ((p.z - p0.z) * d.z);
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p0.x + (distance * d.x), y: p0.y + (distance * d.y), z: p0.z + (distance * d.z)});
	});
var $ianmackenzie$elm_geometry$Unsafe$Direction3d$unsafeCrossProduct = F2(
	function (_v0, _v1) {
		var d1 = _v0.a;
		var d2 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
			{x: (d1.y * d2.z) - (d1.z * d2.y), y: (d1.z * d2.x) - (d1.x * d2.z), z: (d1.x * d2.y) - (d1.y * d2.x)});
	});
var $ianmackenzie$elm_geometry$Arc3d$sweptAround = F3(
	function (givenAxis, givenSweptAngle, givenStartPoint) {
		var computedCenterPoint = A2($ianmackenzie$elm_geometry$Point3d$projectOntoAxis, givenAxis, givenStartPoint);
		var yVector = A2($ianmackenzie$elm_geometry$Vector3d$from, givenStartPoint, computedCenterPoint);
		var axisDirection = $ianmackenzie$elm_geometry$Axis3d$direction(givenAxis);
		var _v0 = $ianmackenzie$elm_geometry$Vector3d$direction(yVector);
		if (_v0.$ === 'Just') {
			var computedYDirection = _v0.a;
			var computedXDirection = A2($ianmackenzie$elm_geometry$Unsafe$Direction3d$unsafeCrossProduct, computedYDirection, axisDirection);
			var computedRadius = $ianmackenzie$elm_geometry$Vector3d$length(yVector);
			return $ianmackenzie$elm_geometry$Geometry$Types$Arc3d(
				{
					signedLength: A2($ianmackenzie$elm_geometry$Quantity$Extra$rTheta, computedRadius, givenSweptAngle),
					startPoint: givenStartPoint,
					sweptAngle: givenSweptAngle,
					xDirection: computedXDirection,
					yDirection: computedYDirection
				});
		} else {
			var _v1 = $ianmackenzie$elm_geometry$Direction3d$perpendicularBasis(axisDirection);
			var computedXDirection = _v1.a;
			var computedYDirection = _v1.b;
			return $ianmackenzie$elm_geometry$Geometry$Types$Arc3d(
				{signedLength: $ianmackenzie$elm_units$Quantity$zero, startPoint: givenStartPoint, sweptAngle: givenSweptAngle, xDirection: computedXDirection, yDirection: computedYDirection});
		}
	});
var $ianmackenzie$elm_geometry$Point3d$translateIn = F3(
	function (_v0, _v1, _v2) {
		var d = _v0.a;
		var distance = _v1.a;
		var p = _v2.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p.x + (distance * d.x), y: p.y + (distance * d.y), z: p.z + (distance * d.z)});
	});
var $ianmackenzie$elm_units$Angle$turns = function (numTurns) {
	return $ianmackenzie$elm_units$Angle$radians((2 * $elm$core$Basics$pi) * numTurns);
};
var $ianmackenzie$elm_geometry$Circle3d$toArc = function (circle) {
	var radialDirection = $ianmackenzie$elm_geometry$Direction3d$perpendicularTo(
		$ianmackenzie$elm_geometry$Circle3d$axialDirection(circle));
	var startPoint = A3(
		$ianmackenzie$elm_geometry$Point3d$translateIn,
		radialDirection,
		$ianmackenzie$elm_geometry$Circle3d$radius(circle),
		$ianmackenzie$elm_geometry$Circle3d$centerPoint(circle));
	return A3(
		$ianmackenzie$elm_geometry$Arc3d$sweptAround,
		$ianmackenzie$elm_geometry$Circle3d$axis(circle),
		$ianmackenzie$elm_units$Angle$turns(1),
		startPoint);
};
var $avh4$elm_color$Color$white = A4($avh4$elm_color$Color$RgbaSpace, 255 / 255, 255 / 255, 255 / 255, 1.0);
var $author$project$Tools$CurveFormer$showCircle = F2(
	function (options, track) {
		var circle = A2($author$project$Tools$CurveFormer$getCircle, options, track);
		var material = $ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$white);
		var drawSegment = function (segment) {
			return A2($ianmackenzie$elm_3d_scene$Scene3d$lineSegment, material, segment);
		};
		var arc = $ianmackenzie$elm_geometry$Circle3d$toArc(circle);
		var segments = $ianmackenzie$elm_geometry$Polyline3d$segments(
			A2($ianmackenzie$elm_geometry$Arc3d$segments, 20, arc));
		return A2($elm$core$List$map, drawSegment, segments);
	});
var $avh4$elm_color$Color$lightYellow = A4($avh4$elm_color$Color$RgbaSpace, 255 / 255, 233 / 255, 79 / 255, 1.0);
var $author$project$Tools$CurveFormer$showDisc = F2(
	function (options, track) {
		var material = $ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$lightYellow);
		var drawSegment = function (segment) {
			return A2($ianmackenzie$elm_3d_scene$Scene3d$lineSegment, material, segment);
		};
		var circle = A2($author$project$Tools$CurveFormer$getCircle, options, track);
		var direction = $ianmackenzie$elm_geometry$Circle3d$axialDirection(circle);
		var centre = $ianmackenzie$elm_geometry$Circle3d$centerPoint(circle);
		var outerCircle = A3($ianmackenzie$elm_geometry$Circle3d$withRadius, options.pullRadius, direction, centre);
		var arc = $ianmackenzie$elm_geometry$Circle3d$toArc(outerCircle);
		var segments = $ianmackenzie$elm_geometry$Polyline3d$segments(
			A2($ianmackenzie$elm_geometry$Arc3d$segments, 20, arc));
		return options.usePullRadius ? A2($elm$core$List$map, drawSegment, segments) : _List_Nil;
	});
var $author$project$Tools$CurveFormer$showToolTrackInteractions = F2(
	function (options, track) {
		return _Utils_ap(
			A2($author$project$Tools$CurveFormer$showCircle, options, track),
			_Utils_ap(
				A2($author$project$Tools$CurveFormer$showDisc, options, track),
				_Utils_ap(
					A3(
						$author$project$Tools$CurveFormer$highlightPoints,
						$avh4$elm_color$Color$white,
						$elm$core$Dict$keys(options.pointsWithinCircle),
						track),
					A3(
						$author$project$Tools$CurveFormer$highlightPoints,
						$avh4$elm_color$Color$blue,
						$elm$core$Dict$keys(options.pointsWithinDisc),
						track))));
	});
var $author$project$Tools$CurveFormer$previewActions = F3(
	function (newOptions, colour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: colour,
					points: A2($author$project$Tools$CurveFormer$computeNewPoints, newOptions, track),
					shape: $author$project$Actions$PreviewCircle,
					tag: 'formerOutcome'
				}),
				$author$project$Actions$ShowPreview(
				{
					colour: colour,
					points: _List_Nil,
					shape: $author$project$Actions$PreviewToolSupplied(
						A2($author$project$Tools$CurveFormer$showToolTrackInteractions, newOptions, track)),
					tag: 'formerTool'
				})
			]);
	});
var $author$project$Tools$CurveFormer$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				options,
				A3($author$project$Tools$CurveFormer$previewActions, options, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('formerOutcome'),
						$author$project$Actions$HidePreview('formerTool')
					]));
		}
	});
var $author$project$UtilsForViews$fullDepthRenderingBoxSize = $ianmackenzie$elm_units$Length$kilometers(4);
var $author$project$Tools$DeletePoints$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var fullRenderingZone = A2(
				$ianmackenzie$elm_geometry$BoundingBox3d$withDimensions,
				_Utils_Tuple3($author$project$UtilsForViews$fullDepthRenderingBoxSize, $author$project$UtilsForViews$fullDepthRenderingBoxSize, $author$project$UtilsForViews$fullDepthRenderingBoxSize),
				$author$project$DomainModel$startPoint(
					A2($author$project$DomainModel$leafFromIndex, theTrack.currentPosition, theTrack.trackTree)));
			var foldFn = F2(
				function (road, accum) {
					return A2(
						$elm$core$List$cons,
						_Utils_Tuple2(road.startPoint, road.sourceData.a),
						accum);
				});
			var depthFunction = function (road) {
				return A2($ianmackenzie$elm_geometry$BoundingBox3d$intersects, fullRenderingZone, road.boundingBox) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(10);
			};
			var _v1 = $author$project$TrackLoaded$getRangeFromMarkers(theTrack);
			var fromStart = _v1.a;
			var fromEnd = _v1.b;
			var previews = function () {
				var _v2 = theTrack.markerPosition;
				if (_v2.$ === 'Just') {
					return A2(
						$elm$core$List$drop,
						1,
						$elm$core$List$reverse(
							A7(
								$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
								fromStart,
								$author$project$DomainModel$skipCount(theTrack.trackTree) - fromEnd,
								depthFunction,
								0,
								theTrack.trackTree,
								foldFn,
								_List_Nil)));
				} else {
					return _List_fromArray(
						[
							A2($author$project$DomainModel$getDualCoords, theTrack.trackTree, fromStart)
						]);
				}
			}();
			return _Utils_Tuple2(
				_Utils_update(
					options,
					{
						singlePoint: _Utils_eq(theTrack.markerPosition, $elm$core$Maybe$Nothing)
					}),
				_List_fromArray(
					[
						$author$project$Actions$ShowPreview(
						{colour: colour, points: previews, shape: $author$project$Actions$PreviewCircle, tag: 'delete'})
					]));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('delete')
					]));
		}
	});
var $author$project$DomainModel$buildPreview = F2(
	function (indices, tree) {
		return A2(
			$elm$core$List$map,
			$author$project$DomainModel$getDualCoords(tree),
			indices);
	});
var $author$project$Tools$DirectionChanges$findBendsWithRadius = F2(
	function (tree, options) {
		var windowLength = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$ianmackenzie$elm_units$Angle$inRadians(options.threshold),
			options.radius);
		var consumeLength = F2(
			function (_v0, roads) {
				consumeLength:
				while (true) {
					var runningLength = _v0.a;
					var retainedRoads = _v0.b;
					if (A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, windowLength, runningLength)) {
						return $elm$core$List$reverse(retainedRoads);
					} else {
						if (!roads.b) {
							return $elm$core$List$reverse(retainedRoads);
						} else {
							var _v2 = roads.a;
							var n = _v2.a;
							var aRoad = _v2.b;
							var moreRoads = roads.b;
							var $temp$_v0 = _Utils_Tuple2(
								A2($ianmackenzie$elm_units$Quantity$plus, runningLength, aRoad.trueLength),
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(n, aRoad),
									retainedRoads)),
								$temp$roads = moreRoads;
							_v0 = $temp$_v0;
							roads = $temp$roads;
							continue consumeLength;
						}
					}
				}
			});
		var runningDirectionChange = F2(
			function (road, _v8) {
				var newIndex = _v8.a;
				var window = _v8.b;
				var outputs = _v8.c;
				var newWindow = A2(
					consumeLength,
					_Utils_Tuple2($ianmackenzie$elm_units$Quantity$zero, _List_Nil),
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(newIndex, road),
						window));
				var degreesTurned = function (sections) {
					if (!sections.b) {
						return 0;
					} else {
						if (!sections.b.b) {
							var onlyOne = sections.a;
							return 0;
						} else {
							var _v5 = sections.a;
							var first = _v5.b;
							var _v6 = sections.b;
							var _v7 = _v6.a;
							var n = _v7.a;
							var second = _v7.b;
							var more = _v6.b;
							return degreesTurned(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(n, second),
									more)) + $ianmackenzie$elm_units$Angle$inDegrees(
								A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, first.directionAtStart, second.directionAtStart));
						}
					}
				};
				var turnDuringWindow = degreesTurned(newWindow);
				return (_Utils_cmp(
					$elm$core$Basics$abs(turnDuringWindow),
					$ianmackenzie$elm_units$Angle$inDegrees(options.threshold)) > -1) ? _Utils_Tuple3(
					newIndex + 1,
					_List_Nil,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(
							newIndex,
							$ianmackenzie$elm_units$Angle$degrees(
								$elm$core$Basics$abs(turnDuringWindow))),
						outputs)) : _Utils_Tuple3(newIndex + 1, newWindow, outputs);
			});
		var _v3 = A3(
			$author$project$DomainModel$foldOverRoute,
			runningDirectionChange,
			tree,
			_Utils_Tuple3(0, _List_Nil, _List_Nil));
		var bendStarts = _v3.c;
		return $elm$core$List$reverse(bendStarts);
	});
var $author$project$Tools$DirectionChanges$findDirectionChanges = F2(
	function (options, tree) {
		var helper = F3(
			function (skip, treeNode, accum) {
				if (treeNode.$ === 'Leaf') {
					return accum;
				} else {
					var node = treeNode.a;
					var thisNodeAngle = $ianmackenzie$elm_units$Quantity$abs(
						A2(
							$ianmackenzie$elm_geometry$Direction2d$angleFrom,
							$author$project$DomainModel$asRecord(node.left).directionAtEnd,
							$author$project$DomainModel$asRecord(node.right).directionAtStart));
					var withThisNodeIfNeeded = function (acc) {
						return A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, options.threshold, thisNodeAngle) ? A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								skip + $author$project$DomainModel$skipCount(node.left),
								thisNodeAngle),
							acc) : acc;
					};
					return A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, options.threshold, node.nodeContent.directionChangeMaximumAbs) ? withThisNodeIfNeeded(
						A3(
							helper,
							skip,
							node.left,
							A3(
								helper,
								skip + $author$project$DomainModel$skipCount(node.left),
								node.right,
								accum))) : accum;
				}
			});
		var _v1 = options.mode;
		if (_v1.$ === 'DirectionChangeAbrupt') {
			return _Utils_update(
				options,
				{
					breaches: A3(helper, 0, tree, _List_Nil),
					currentBreach: 0
				});
		} else {
			return _Utils_update(
				options,
				{
					breaches: A2($author$project$Tools$DirectionChanges$findBendsWithRadius, tree, options),
					currentBreach: 0
				});
		}
	});
var $author$project$Tools$DirectionChanges$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var populatedOptions = A2($author$project$Tools$DirectionChanges$findDirectionChanges, options, theTrack.trackTree);
			return _Utils_Tuple2(
				populatedOptions,
				_List_fromArray(
					[
						$author$project$Actions$ShowPreview(
						{
							colour: colour,
							points: A2(
								$author$project$DomainModel$buildPreview,
								A2($elm$core$List$map, $elm$core$Tuple$first, populatedOptions.breaches),
								theTrack.trackTree),
							shape: $author$project$Actions$PreviewCircle,
							tag: 'kinks'
						})
					]));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('kinks')
					]));
		}
	});
var $author$project$Tools$GradientProblems$findAbruptDirectionChanges = F2(
	function (options, tree) {
		var foldFn = F2(
			function (road, _v2) {
				var index = _v2.a;
				var previousIfAny = _v2.b;
				var outputs = _v2.c;
				if (previousIfAny.$ === 'Nothing') {
					return _Utils_Tuple3(
						index + 1,
						$elm$core$Maybe$Just(road),
						outputs);
				} else {
					var previousRoad = previousIfAny.a;
					var change = $elm$core$Basics$abs(road.gradientAtStart - previousRoad.gradientAtStart);
					return (_Utils_cmp(change, options.threshold) > 0) ? _Utils_Tuple3(
						index + 1,
						$elm$core$Maybe$Just(road),
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(index, change),
							outputs)) : _Utils_Tuple3(
						index + 1,
						$elm$core$Maybe$Just(road),
						outputs);
				}
			});
		var _v0 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(tree),
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			tree,
			foldFn,
			_Utils_Tuple3(0, $elm$core$Maybe$Nothing, _List_Nil));
		var breaches = _v0.c;
		return _Utils_update(
			options,
			{
				breaches: $elm$core$List$reverse(breaches),
				currentBreach: 0
			});
	});
var $author$project$Tools$GradientProblems$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var populatedOptions = A2($author$project$Tools$GradientProblems$findAbruptDirectionChanges, options, theTrack.trackTree);
			return _Utils_Tuple2(
				populatedOptions,
				_List_fromArray(
					[
						$author$project$Actions$ShowPreview(
						{
							colour: colour,
							points: A2(
								$author$project$DomainModel$buildPreview,
								A2($elm$core$List$map, $elm$core$Tuple$first, populatedOptions.breaches),
								theTrack.trackTree),
							shape: $author$project$Actions$PreviewCircle,
							tag: 'ridge'
						})
					]));
		} else {
			return _Utils_Tuple2(
				_Utils_update(
					options,
					{breaches: _List_Nil}),
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('ridge')
					]));
		}
	});
var $author$project$Tools$Interpolate$actions = F3(
	function (newOptions, previewColour, track) {
		var _v0 = newOptions.extent;
		if (_v0.$ === 'ExtentIsRange') {
			return _List_fromArray(
				[
					$author$project$Actions$ShowPreview(
					{
						colour: previewColour,
						points: A3($author$project$Tools$Interpolate$computeNewPoints, true, newOptions, track),
						shape: $author$project$Actions$PreviewCircle,
						tag: 'interpolate'
					})
				]);
		} else {
			return _List_Nil;
		}
	});
var $author$project$Tools$Interpolate$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				options,
				A3($author$project$Tools$Interpolate$actions, options, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('interpolate')
					]));
		}
	});
var $author$project$Actions$RenderProfile = {$: 'RenderProfile'};
var $author$project$Tools$LimitGradients$actions = F3(
	function (newOptions, previewColour, track) {
		if (_Utils_eq(newOptions.extent, $author$project$Tools$LimitGradientOptions$ExtentIsRange)) {
			var _v0 = newOptions.previewData;
			if (_v0.$ === 'Just') {
				var previewTree = _v0.a;
				return _List_fromArray(
					[
						$author$project$Actions$ShowPreview(
						{
							colour: previewColour,
							points: A3($author$project$DomainModel$extractPointsInRange, 0, 0, previewTree),
							shape: $author$project$Actions$PreviewCircle,
							tag: 'limit'
						}),
						$author$project$Actions$RenderProfile
					]);
			} else {
				return _List_fromArray(
					[
						$author$project$Actions$HidePreview('limit')
					]);
			}
		} else {
			return _List_fromArray(
				[
					$author$project$Actions$HidePreview('limit')
				]);
		}
	});
var $author$project$Tools$LimitGradients$putPreviewInOptions = F2(
	function (track, options) {
		var adjustedPoints = A2($author$project$Tools$LimitGradients$computeNewPoints, options, track);
		return _Utils_update(
			options,
			{
				previewData: A2(
					$author$project$DomainModel$treeFromSourcesWithExistingReference,
					A2($author$project$DomainModel$gpxPointFromIndex, 0, track.trackTree),
					A2($elm$core$List$map, $elm$core$Tuple$second, adjustedPoints))
			});
	});
var $author$project$Tools$LimitGradients$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var newOptions = A2($author$project$Tools$LimitGradients$putPreviewInOptions, theTrack, options);
			return _Utils_Tuple2(
				newOptions,
				A3($author$project$Tools$LimitGradients$actions, newOptions, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('limit')
					]));
		}
	});
var $author$project$Tools$Nudge$previewActions = F3(
	function (newOptions, colour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: colour,
					points: A2($author$project$Tools$Nudge$computeNudgedPoints, newOptions, track).b,
					shape: $author$project$Actions$PreviewCircle,
					tag: 'nudge'
				})
			]);
	});
var $author$project$Tools$Nudge$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				options,
				A3($author$project$Tools$Nudge$previewActions, options, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('nudge')
					]));
		}
	});
var $author$project$Tools$Pointers$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				_Utils_update(
					options,
					{orange: theTrack.currentPosition, purple: theTrack.markerPosition}),
				_List_Nil);
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Tools$Simplify$actions = F3(
	function (colour, options, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: colour,
					points: A2(
						$author$project$DomainModel$buildPreview,
						$elm$core$Dict$keys(options.pointsToRemove),
						track.trackTree),
					shape: $author$project$Actions$PreviewCircle,
					tag: 'simplify'
				})
			]);
	});
var $author$project$Tools$Simplify$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var populatedOptions = A2($author$project$Tools$Simplify$findSimplifications, options, theTrack.trackTree);
			return _Utils_Tuple2(
				populatedOptions,
				A3($author$project$Tools$Simplify$actions, colour, populatedOptions, theTrack));
		} else {
			return _Utils_Tuple2(
				_Utils_update(
					options,
					{pointsToRemove: $elm$core$Dict$empty}),
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('simplify')
					]));
		}
	});
var $author$project$ToolsController$toolStateHasChanged = F4(
	function (toolType, newState, isTrack, options) {
		switch (toolType.$) {
			case 'ToolTrackInfo':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolAbruptDirectionChanges':
				var _v1 = A4(
					$author$project$Tools$DirectionChanges$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.directionChangeOptions,
					isTrack);
				var newToolOptions = _v1.a;
				var actions = _v1.b;
				var newOptions = _Utils_update(
					options,
					{directionChangeOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolDeletePoints':
				var _v2 = A4(
					$author$project$Tools$DeletePoints$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.deleteOptions,
					isTrack);
				var newToolOptions = _v2.a;
				var actions = _v2.b;
				var newOptions = _Utils_update(
					options,
					{deleteOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolPointers':
				var _v3 = A4(
					$author$project$Tools$Pointers$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.pointerOptions,
					isTrack);
				var newToolOptions = _v3.a;
				var actions = _v3.b;
				var newOptions = _Utils_update(
					options,
					{pointerOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolUndoRedo':
				return _Utils_Tuple2(options, _List_Nil);
			case 'ToolBezierSplines':
				var _v4 = A4(
					$author$project$Tools$BezierSplines$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.bezierSplineOptions,
					isTrack);
				var newToolOptions = _v4.a;
				var actions = _v4.b;
				var newOptions = _Utils_update(
					options,
					{bezierSplineOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolCentroidAverage':
				var _v5 = A4(
					$author$project$Tools$CentroidAverage$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.centroidAverageOptions,
					isTrack);
				var newToolOptions = _v5.a;
				var actions = _v5.b;
				var newOptions = _Utils_update(
					options,
					{centroidAverageOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolCurveFormer':
				var _v6 = A4(
					$author$project$Tools$CurveFormer$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.curveFormerOptions,
					isTrack);
				var newToolOptions = _v6.a;
				var actions = _v6.b;
				var newOptions = _Utils_update(
					options,
					{curveFormerOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolBendSmoother':
				var _v7 = A4(
					$author$project$Tools$BendSmoother$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.bendSmootherOptions,
					isTrack);
				var newToolOptions = _v7.a;
				var actions = _v7.b;
				var newOptions = _Utils_update(
					options,
					{bendSmootherOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolNudge':
				var _v8 = A4(
					$author$project$Tools$Nudge$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.nudgeOptions,
					isTrack);
				var newToolOptions = _v8.a;
				var actions = _v8.b;
				var newOptions = _Utils_update(
					options,
					{nudgeOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolGradientProblems':
				var _v9 = A4(
					$author$project$Tools$GradientProblems$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.gradientProblemOptions,
					isTrack);
				var newToolOptions = _v9.a;
				var actions = _v9.b;
				var newOptions = _Utils_update(
					options,
					{gradientProblemOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolDisplaySettings':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolOutAndBack':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolSimplify':
				var _v10 = A4(
					$author$project$Tools$Simplify$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.simplifySettings,
					isTrack);
				var newToolOptions = _v10.a;
				var actions = _v10.b;
				var newOptions = _Utils_update(
					options,
					{simplifySettings: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolInterpolate':
				var _v11 = A4(
					$author$project$Tools$Interpolate$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.interpolateSettings,
					isTrack);
				var newToolOptions = _v11.a;
				var actions = _v11.b;
				var newOptions = _Utils_update(
					options,
					{interpolateSettings: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			default:
				var _v12 = A4(
					$author$project$Tools$LimitGradients$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.limitGradientSettings,
					isTrack);
				var newToolOptions = _v12.a;
				var actions = _v12.b;
				var newOptions = _Utils_update(
					options,
					{limitGradientSettings: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
		}
	});
var $author$project$ToolsController$refreshOpenTools = F2(
	function (isTrack, options) {
		var refreshOpenTool = F2(
			function (entry, _v1) {
				var inputOptions = _v1.a;
				var collectingActions = _v1.b;
				if (_Utils_eq(entry.state, $author$project$ToolsController$Expanded)) {
					var _v0 = A4($author$project$ToolsController$toolStateHasChanged, entry.toolType, $author$project$ToolsController$Expanded, isTrack, inputOptions);
					var incrementalModel = _v0.a;
					var incrementalActions = _v0.b;
					return _Utils_Tuple2(
						incrementalModel,
						_Utils_ap(incrementalActions, collectingActions));
				} else {
					return _Utils_Tuple2(inputOptions, collectingActions);
				}
			});
		return A3(
			$elm$core$List$foldl,
			refreshOpenTool,
			_Utils_Tuple2(options, _List_Nil),
			options.tools);
	});
var $author$project$Tools$DisplaySettingsOptions$NoCurtain = {$: 'NoCurtain'};
var $avh4$elm_color$Color$black = A4($avh4$elm_color$Color$RgbaSpace, 0 / 255, 0 / 255, 0 / 255, 1.0);
var $smucode$elm_flat_colors$FlatColors$AussiePalette$blurple = A3($mdgriffith$elm_ui$Element$rgb255, 72, 52, 212);
var $ianmackenzie$elm_geometry$Vector3d$meters = F3(
	function (x, y, z) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: x, y: y, z: z});
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Group = function (a) {
	return {$: 'Group', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$collectNodes = F2(
	function (drawables, accumulated) {
		collectNodes:
		while (true) {
			if (!drawables.b) {
				return accumulated;
			} else {
				var node = drawables.a.a;
				var rest = drawables.b;
				var $temp$drawables = rest,
					$temp$accumulated = A2($elm$core$List$cons, node, accumulated);
				drawables = $temp$drawables;
				accumulated = $temp$accumulated;
				continue collectNodes;
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$group = function (drawables) {
	return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
		$ianmackenzie$elm_3d_scene$Scene3d$Types$Group(
			A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$collectNodes, drawables, _List_Nil)));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces = {$: 'KeepBackFaces'};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$colorTextureFragment = {
	src: '\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ',
	attributes: {},
	uniforms: {colorTexture: 'colorTexture'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveTextureFragment = {
	src: '\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {backlight: 'backlight', colorTexture: 'colorTexture', sceneProperties: 'sceneProperties'}
};
var $ianmackenzie$elm_geometry$BoundingBox3d$hullHelp = F7(
	function (currentMinX, currentMaxX, currentMinY, currentMaxY, currentMinZ, currentMaxZ, points) {
		hullHelp:
		while (true) {
			if (points.b) {
				var next = points.a;
				var rest = points.b;
				var _v1 = next;
				var x = _v1.a.x;
				var y = _v1.a.y;
				var z = _v1.a.z;
				var $temp$currentMinX = A2($elm$core$Basics$min, x, currentMinX),
					$temp$currentMaxX = A2($elm$core$Basics$max, x, currentMaxX),
					$temp$currentMinY = A2($elm$core$Basics$min, y, currentMinY),
					$temp$currentMaxY = A2($elm$core$Basics$max, y, currentMaxY),
					$temp$currentMinZ = A2($elm$core$Basics$min, z, currentMinZ),
					$temp$currentMaxZ = A2($elm$core$Basics$max, z, currentMaxZ),
					$temp$points = rest;
				currentMinX = $temp$currentMinX;
				currentMaxX = $temp$currentMaxX;
				currentMinY = $temp$currentMinY;
				currentMaxY = $temp$currentMaxY;
				currentMinZ = $temp$currentMinZ;
				currentMaxZ = $temp$currentMaxZ;
				points = $temp$points;
				continue hullHelp;
			} else {
				return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
					{
						maxX: $ianmackenzie$elm_units$Quantity$Quantity(currentMaxX),
						maxY: $ianmackenzie$elm_units$Quantity$Quantity(currentMaxY),
						maxZ: $ianmackenzie$elm_units$Quantity$Quantity(currentMaxZ),
						minX: $ianmackenzie$elm_units$Quantity$Quantity(currentMinX),
						minY: $ianmackenzie$elm_units$Quantity$Quantity(currentMinY),
						minZ: $ianmackenzie$elm_units$Quantity$Quantity(currentMinZ)
					});
			}
		}
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$hull = F2(
	function (first, rest) {
		var _v0 = first;
		var x = _v0.a.x;
		var y = _v0.a.y;
		var z = _v0.a.z;
		return A7($ianmackenzie$elm_geometry$BoundingBox3d$hullHelp, x, x, y, y, z, z, rest);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lambertianFragment = {
	src: '\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {enabledLights: 'enabledLights', lights12: 'lights12', lights34: 'lights34', lights56: 'lights56', lights78: 'lights78', materialColor: 'materialColor', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lambertianTextureFragment = {
	src: '\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {enabledLights: 'enabledLights', lights12: 'lights12', lights34: 'lights34', lights56: 'lights56', lights78: 'lights78', materialColorTexture: 'materialColorTexture', normalMapTexture: 'normalMapTexture', sceneProperties: 'sceneProperties', useNormalMap: 'useNormalMap', viewMatrix: 'viewMatrix'}
};
var $elm_explorations$webgl$WebGL$Settings$FaceMode = function (a) {
	return {$: 'FaceMode', a: a};
};
var $elm_explorations$webgl$WebGL$Settings$back = $elm_explorations$webgl$WebGL$Settings$FaceMode(1029);
var $elm_explorations$webgl$WebGL$Internal$CullFace = function (a) {
	return {$: 'CullFace', a: a};
};
var $elm_explorations$webgl$WebGL$Settings$cullFace = function (_v0) {
	var faceMode = _v0.a;
	return $elm_explorations$webgl$WebGL$Internal$CullFace(faceMode);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$cullBackFaceSetting = $elm_explorations$webgl$WebGL$Settings$cullFace($elm_explorations$webgl$WebGL$Settings$back);
var $elm_explorations$webgl$WebGL$Settings$front = $elm_explorations$webgl$WebGL$Settings$FaceMode(1028);
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$cullFrontFaceSetting = $elm_explorations$webgl$WebGL$Settings$cullFace($elm_explorations$webgl$WebGL$Settings$front);
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings = F3(
	function (isRightHanded, backFaceSetting, settings) {
		if (backFaceSetting.$ === 'CullBackFaces') {
			return isRightHanded ? A2($elm$core$List$cons, $ianmackenzie$elm_3d_scene$Scene3d$Entity$cullBackFaceSetting, settings) : A2($elm$core$List$cons, $ianmackenzie$elm_3d_scene$Scene3d$Entity$cullFrontFaceSetting, settings);
		} else {
			return settings;
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$physicalFragment = {
	src: '\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {baseColor: 'baseColor', enabledLights: 'enabledLights', lights12: 'lights12', lights34: 'lights34', lights56: 'lights56', lights78: 'lights78', metallic: 'metallic', roughness: 'roughness', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$physicalTexturesFragment = {
	src: '\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {baseColorTexture: 'baseColorTexture', constantBaseColor: 'constantBaseColor', constantMetallic: 'constantMetallic', constantRoughness: 'constantRoughness', enabledLights: 'enabledLights', lights12: 'lights12', lights34: 'lights34', lights56: 'lights56', lights78: 'lights78', metallicTexture: 'metallicTexture', normalMapTexture: 'normalMapTexture', roughnessTexture: 'roughnessTexture', sceneProperties: 'sceneProperties', useNormalMap: 'useNormalMap', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$plainQuadVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ',
	attributes: {quadVertex: 'quadVertex'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', quadVertexPositions: 'quadVertexPositions', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $elm_explorations$linear_algebra$Math$Matrix4$fromRecord = _MJS_m4x4fromRecord;
var $ianmackenzie$elm_geometry$Point3d$toMeters = function (_v0) {
	var pointCoordinates = _v0.a;
	return pointCoordinates;
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions = F4(
	function (firstPoint, secondPoint, thirdPoint, fourthPoint) {
		var p4 = $ianmackenzie$elm_geometry$Point3d$toMeters(fourthPoint);
		var p3 = $ianmackenzie$elm_geometry$Point3d$toMeters(thirdPoint);
		var p2 = $ianmackenzie$elm_geometry$Point3d$toMeters(secondPoint);
		var p1 = $ianmackenzie$elm_geometry$Point3d$toMeters(firstPoint);
		return $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
			{m11: p1.x, m12: p2.x, m13: p3.x, m14: p4.x, m21: p1.y, m22: p2.y, m23: p3.y, m24: p4.y, m31: p1.z, m32: p2.z, m33: p3.z, m34: p4.z, m41: 0, m42: 0, m43: 0, m44: 0});
	});
var $elm_explorations$webgl$WebGL$triangleFan = $elm_explorations$webgl$WebGL$Mesh1(
	{elemSize: 1, indexSize: 0, mode: 6});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices = $elm_explorations$webgl$WebGL$triangleFan(
	_List_fromArray(
		[
			{
			quadVertex: A3($elm_explorations$linear_algebra$Math$Vector3$vec3, 0, 0, 0)
		},
			{
			quadVertex: A3($elm_explorations$linear_algebra$Math$Vector3$vec3, 1, 0, 1)
		},
			{
			quadVertex: A3($elm_explorations$linear_algebra$Math$Vector3$vec3, 1, 1, 2)
		},
			{
			quadVertex: A3($elm_explorations$linear_algebra$Math$Vector3$vec3, 0, 1, 3)
		}
		]));
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$ConstantLambertianMaterial = function (a) {
	return {$: 'ConstantLambertianMaterial', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedLambertianMaterial = F2(
	function (a, b) {
		return {$: 'TexturedLambertianMaterial', a: a, b: b};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple = F2(
	function (fallbackData, channel) {
		if (channel.$ === 'Constant') {
			var _v1 = channel.a;
			return _Utils_Tuple2(fallbackData, 0.0);
		} else {
			var data = channel.a.data;
			return _Utils_Tuple2(data, 1.0);
		}
	});
var $elm_explorations$linear_algebra$Math$Vector3$getX = _MJS_v3getX;
var $elm_explorations$linear_algebra$Math$Vector3$getY = _MJS_v3getY;
var $elm_explorations$linear_algebra$Math$Vector3$getZ = _MJS_v3getZ;
var $elm_explorations$linear_algebra$Math$Vector4$vec4 = _MJS_v4;
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$enabledVec3 = function (vector) {
	return A4(
		$elm_explorations$linear_algebra$Math$Vector4$vec4,
		$elm_explorations$linear_algebra$Math$Vector3$getX(vector),
		$elm_explorations$linear_algebra$Math$Vector3$getY(vector),
		$elm_explorations$linear_algebra$Math$Vector3$getZ(vector),
		1);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec4 = A4($elm_explorations$linear_algebra$Math$Vector4$vec4, 0, 0, 0, 0);
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$vec3Tuple = F2(
	function (fallbackData, texture) {
		if (texture.$ === 'Constant') {
			var baseColor = texture.a.a;
			return _Utils_Tuple2(
				fallbackData,
				$ianmackenzie$elm_3d_scene$Scene3d$Entity$enabledVec3(baseColor));
		} else {
			var data = texture.a.data;
			return _Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec4);
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$resolveLambertian = F2(
	function (materialColorTexture, normalMapTexture) {
		var _v0 = _Utils_Tuple2(materialColorTexture, normalMapTexture);
		if (_v0.a.$ === 'Constant') {
			if (_v0.b.$ === 'Constant') {
				var materialColor = _v0.a.a;
				var _v1 = _v0.b.a;
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$ConstantLambertianMaterial(materialColor);
			} else {
				var data = _v0.b.a.data;
				return A2(
					$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedLambertianMaterial,
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$vec3Tuple, data, materialColorTexture),
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple, data, normalMapTexture));
			}
		} else {
			var data = _v0.a.a.data;
			return A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedLambertianMaterial,
				_Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec4),
				A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple, data, normalMapTexture));
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$ConstantPbrMaterial = F3(
	function (a, b, c) {
		return {$: 'ConstantPbrMaterial', a: a, b: b, c: c};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedPbrMaterial = F4(
	function (a, b, c, d) {
		return {$: 'TexturedPbrMaterial', a: a, b: b, c: c, d: d};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$Tuple4 = F4(
	function (a, b, c, d) {
		return {$: 'Tuple4', a: a, b: b, c: c, d: d};
	});
var $elm_explorations$linear_algebra$Math$Vector2$vec2 = _MJS_v2;
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$enabledFloat = function (value) {
	return A2($elm_explorations$linear_algebra$Math$Vector2$vec2, value, 1);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec2 = A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 0, 0);
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple = F2(
	function (fallbackData, texture) {
		if (texture.$ === 'Constant') {
			var value = texture.a;
			return _Utils_Tuple2(
				fallbackData,
				$ianmackenzie$elm_3d_scene$Scene3d$Entity$enabledFloat(value));
		} else {
			var data = texture.a.data;
			return _Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec2);
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$resolvePbr = F4(
	function (baseColorTexture, roughnessTexture, metallicTexture, normalMapTexture) {
		var _v0 = A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$Tuple4, baseColorTexture, roughnessTexture, metallicTexture, normalMapTexture);
		if (_v0.a.$ === 'Constant') {
			if (_v0.b.$ === 'Constant') {
				if (_v0.c.$ === 'Constant') {
					if (_v0.d.$ === 'Constant') {
						var baseColor = _v0.a.a;
						var roughness = _v0.b.a;
						var metallic = _v0.c.a;
						var _v1 = _v0.d.a;
						return A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$ConstantPbrMaterial, baseColor, roughness, metallic);
					} else {
						var data = _v0.d.a.data;
						return A4(
							$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedPbrMaterial,
							A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$vec3Tuple, data, baseColorTexture),
							A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, roughnessTexture),
							A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, metallicTexture),
							_Utils_Tuple2(data, 1.0));
					}
				} else {
					var data = _v0.c.a.data;
					return A4(
						$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedPbrMaterial,
						A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$vec3Tuple, data, baseColorTexture),
						A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, roughnessTexture),
						_Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec2),
						A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple, data, normalMapTexture));
				}
			} else {
				var data = _v0.b.a.data;
				return A4(
					$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedPbrMaterial,
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$vec3Tuple, data, baseColorTexture),
					_Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec2),
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, metallicTexture),
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple, data, normalMapTexture));
			}
		} else {
			var data = _v0.a.a.data;
			return A4(
				$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedPbrMaterial,
				_Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec4),
				A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, roughnessTexture),
				A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, metallicTexture),
				A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple, data, normalMapTexture));
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$smoothQuadVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ',
	attributes: {quadVertex: 'quadVertex'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', quadVertexPositions: 'quadVertexPositions', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$texturedQuadVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = quadVertex.xy;\n            interpolatedTangent = tangent;\n        }\n    ',
	attributes: {quadVertex: 'quadVertex'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', quadVertexPositions: 'quadVertexPositions', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$unlitQuadVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = quadVertex.xy;\n        }\n    ',
	attributes: {quadVertex: 'quadVertex'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', quadVertexPositions: 'quadVertexPositions', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quadMesh = F5(
	function (givenMaterial, firstPoint, secondPoint, thirdPoint, fourthPoint) {
		var boundingBox = A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$hull,
			firstPoint,
			_List_fromArray(
				[secondPoint, thirdPoint, fourthPoint]));
		var bounds = $ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox);
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
				bounds,
				function () {
					switch (givenMaterial.$) {
						case 'UnlitMaterial':
							if (givenMaterial.b.$ === 'Constant') {
								var color = givenMaterial.b.a;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$plainQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												constantColor: color,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							} else {
								var _v1 = givenMaterial.a;
								var data = givenMaterial.b.a.data;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$unlitQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$colorTextureFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												colorTexture: data,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							}
						case 'EmissiveMaterial':
							if (givenMaterial.b.$ === 'Constant') {
								var emissiveColor = givenMaterial.b.a.a;
								var backlight = givenMaterial.c;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$plainQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												backlight: backlight,
												emissiveColor: A2(
													$elm_explorations$linear_algebra$Math$Vector3$scale,
													$ianmackenzie$elm_units$Luminance$inNits(backlight),
													emissiveColor),
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							} else {
								var _v2 = givenMaterial.a;
								var data = givenMaterial.b.a.data;
								var backlight = givenMaterial.c;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$unlitQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveTextureFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												backlight: $ianmackenzie$elm_units$Luminance$inNits(backlight),
												colorTexture: data,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							}
						case 'LambertianMaterial':
							var _v3 = givenMaterial.a;
							var materialColorTexture = givenMaterial.b;
							var normalMapTexture = givenMaterial.c;
							var _v4 = A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$resolveLambertian, materialColorTexture, normalMapTexture);
							if (_v4.$ === 'ConstantLambertianMaterial') {
								var materialColor = _v4.a.a;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v5, settings) {
										var lights = _v5.a;
										var enabledLights = _v5.b;
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$smoothQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lambertianFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												enabledLights: enabledLights,
												lights12: lights.lights12,
												lights34: lights.lights34,
												lights56: lights.lights56,
												lights78: lights.lights78,
												materialColor: materialColor,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							} else {
								var _v6 = _v4.a;
								var materialColorData = _v6.a;
								var constantMaterialColor = _v6.b;
								var _v7 = _v4.b;
								var normalMapData = _v7.a;
								var useNormalMap = _v7.b;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v8, settings) {
										var lights = _v8.a;
										var enabledLights = _v8.b;
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$texturedQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lambertianTextureFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												enabledLights: enabledLights,
												lights12: lights.lights12,
												lights34: lights.lights34,
												lights56: lights.lights56,
												lights78: lights.lights78,
												materialColorTexture: materialColorData,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												normalMapTexture: normalMapData,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												useNormalMap: useNormalMap,
												viewMatrix: viewMatrix
											});
									});
							}
						default:
							var _v9 = givenMaterial.a;
							var baseColorTexture = givenMaterial.b;
							var roughnessTexture = givenMaterial.c;
							var metallicTexture = givenMaterial.d;
							var normalMapTexture = givenMaterial.e;
							var _v10 = A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$resolvePbr, baseColorTexture, roughnessTexture, metallicTexture, normalMapTexture);
							if (_v10.$ === 'ConstantPbrMaterial') {
								var baseColor = _v10.a.a;
								var roughness = _v10.b;
								var metallic = _v10.c;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v11, settings) {
										var lights = _v11.a;
										var enabledLights = _v11.b;
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$smoothQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$physicalFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												baseColor: baseColor,
												enabledLights: enabledLights,
												lights12: lights.lights12,
												lights34: lights.lights34,
												lights56: lights.lights56,
												lights78: lights.lights78,
												metallic: metallic,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												roughness: roughness,
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							} else {
								var _v12 = _v10.a;
								var baseColorData = _v12.a;
								var constantBaseColor = _v12.b;
								var _v13 = _v10.b;
								var roughnessData = _v13.a;
								var constantRoughness = _v13.b;
								var _v14 = _v10.c;
								var metallicData = _v14.a;
								var constantMetallic = _v14.b;
								var _v15 = _v10.d;
								var normalMapData = _v15.a;
								var useNormalMap = _v15.b;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v16, settings) {
										var lights = _v16.a;
										var enabledLights = _v16.b;
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$texturedQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$physicalTexturesFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												baseColorTexture: baseColorData,
												constantBaseColor: constantBaseColor,
												constantMetallic: constantMetallic,
												constantRoughness: constantRoughness,
												enabledLights: enabledLights,
												lights12: lights.lights12,
												lights34: lights.lights34,
												lights56: lights.lights56,
												lights78: lights.lights78,
												metallicTexture: metallicData,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												normalMapTexture: normalMapData,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												roughnessTexture: roughnessData,
												sceneProperties: sceneProperties,
												useNormalMap: useNormalMap,
												viewMatrix: viewMatrix
											});
									});
							}
					}
				}()));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$ShadowNode = function (a) {
	return {$: 'ShadowNode', a: a};
};
var $elm_explorations$webgl$WebGL$MeshIndexed3 = F3(
	function (a, b, c) {
		return {$: 'MeshIndexed3', a: a, b: b, c: c};
	});
var $elm_explorations$webgl$WebGL$indexedTriangles = $elm_explorations$webgl$WebGL$MeshIndexed3(
	{elemSize: 1, indexSize: 3, mode: 4});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quadShadowMesh = function () {
	var quadShadowVertices = _List_fromArray(
		[
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 0, 1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, 1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 2, 1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 3, 1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 0, -1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, -1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 2, -1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 3, -1)
		}
		]);
	var quadShadowFaces = _List_fromArray(
		[
			_Utils_Tuple3(0, 1, 2),
			_Utils_Tuple3(0, 2, 3),
			_Utils_Tuple3(4, 6, 5),
			_Utils_Tuple3(4, 7, 6),
			_Utils_Tuple3(4, 5, 1),
			_Utils_Tuple3(1, 0, 4),
			_Utils_Tuple3(5, 6, 2),
			_Utils_Tuple3(2, 1, 5),
			_Utils_Tuple3(6, 7, 3),
			_Utils_Tuple3(3, 2, 6),
			_Utils_Tuple3(7, 4, 0),
			_Utils_Tuple3(0, 3, 7)
		]);
	return A2($elm_explorations$webgl$WebGL$indexedTriangles, quadShadowVertices, quadShadowFaces);
}();
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$quadShadowVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec2 quadShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 quadVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadShadowVertex.x), quadVertexPositions, position, normal, tangent);\n            normal *= quadShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ',
	attributes: {quadShadowVertex: 'quadShadowVertex'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', quadVertexPositions: 'quadVertexPositions', sceneProperties: 'sceneProperties', shadowLight: 'shadowLight', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$shadowFragment = {
	src: '\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ',
	attributes: {},
	uniforms: {}
};
var $elm_explorations$webgl$WebGL$Settings$StencilTest$Test = function (a) {
	return {$: 'Test', a: a};
};
var $elm_explorations$webgl$WebGL$Settings$StencilTest$always = $elm_explorations$webgl$WebGL$Settings$StencilTest$Test(519);
var $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation = function (a) {
	return {$: 'Operation', a: a};
};
var $elm_explorations$webgl$WebGL$Settings$StencilTest$decrement = $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation(7683);
var $elm_explorations$webgl$WebGL$Settings$StencilTest$increment = $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation(7682);
var $elm_explorations$webgl$WebGL$Settings$StencilTest$keep = $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation(7680);
var $elm_explorations$webgl$WebGL$Internal$StencilTest = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {$: 'StencilTest', a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h, i: i, j: j, k: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm_explorations$webgl$WebGL$Settings$StencilTest$testSeparate = F3(
	function (_v0, options1, options2) {
		var ref = _v0.ref;
		var mask = _v0.mask;
		var writeMask = _v0.writeMask;
		var expandTest = F2(
			function (_v2, fn) {
				var expandedTest = _v2.a;
				return fn(expandedTest);
			});
		var expandOp = F2(
			function (_v1, fn) {
				var op = _v1.a;
				return fn(op);
			});
		var expand = function (options) {
			return A2(
				$elm$core$Basics$composeR,
				expandTest(options.test),
				A2(
					$elm$core$Basics$composeR,
					expandOp(options.fail),
					A2(
						$elm$core$Basics$composeR,
						expandOp(options.zfail),
						expandOp(options.zpass))));
		};
		return A2(
			expand,
			options2,
			A2(
				expand,
				options1,
				A3($elm_explorations$webgl$WebGL$Internal$StencilTest, ref, mask, writeMask)));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$leftHandedStencilTest = A3(
	$elm_explorations$webgl$WebGL$Settings$StencilTest$testSeparate,
	{mask: 0, ref: 0, writeMask: 15},
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$decrement},
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$increment});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$rightHandedStencilTest = A3(
	$elm_explorations$webgl$WebGL$Settings$StencilTest$testSeparate,
	{mask: 0, ref: 0, writeMask: 15},
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$increment},
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$decrement});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$shadowSettings = F2(
	function (isRightHanded, settings) {
		return isRightHanded ? A2($elm$core$List$cons, $ianmackenzie$elm_3d_scene$Scene3d$Entity$rightHandedStencilTest, settings) : A2($elm$core$List$cons, $ianmackenzie$elm_3d_scene$Scene3d$Entity$leftHandedStencilTest, settings);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quadShadow = F4(
	function (firstPoint, secondPoint, thirdPoint, fourthPoint) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			$ianmackenzie$elm_3d_scene$Scene3d$Types$ShadowNode(
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, shadowLight, settings) {
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$shadowSettings, isRightHanded, settings),
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$quadShadowVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$shadowFragment,
							$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadShadowMesh,
							{
								modelMatrix: modelMatrix,
								modelScale: modelScale,
								projectionMatrix: projectionMatrix,
								quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
								sceneProperties: sceneProperties,
								shadowLight: shadowLight,
								viewMatrix: viewMatrix
							});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quad = F7(
	function (renderObject, renderShadow, givenMaterial, firstPoint, secondPoint, thirdPoint, fourthPoint) {
		var meshEntity = A5($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadMesh, givenMaterial, firstPoint, secondPoint, thirdPoint, fourthPoint);
		var _v0 = _Utils_Tuple2(renderObject, renderShadow);
		if (_v0.a) {
			if (_v0.b) {
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$group(
					_List_fromArray(
						[
							meshEntity,
							A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadShadow, firstPoint, secondPoint, thirdPoint, fourthPoint)
						]));
			} else {
				return meshEntity;
			}
		} else {
			if (_v0.b) {
				return A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadShadow, firstPoint, secondPoint, thirdPoint, fourthPoint);
			} else {
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$quad = F5(
	function (givenMaterial, p1, p2, p3, p4) {
		return A7($ianmackenzie$elm_3d_scene$Scene3d$Entity$quad, true, false, givenMaterial, p1, p2, p3, p4);
	});
var $ianmackenzie$elm_geometry$Vector3d$rotateAround = F3(
	function (_v0, _v1, _v2) {
		var axis = _v0.a;
		var angle = _v1.a;
		var v = _v2.a;
		var halfAngle = 0.5 * angle;
		var qw = $elm$core$Basics$cos(halfAngle);
		var sinHalfAngle = $elm$core$Basics$sin(halfAngle);
		var _v3 = axis.direction;
		var d = _v3.a;
		var qx = d.x * sinHalfAngle;
		var wx = qw * qx;
		var xx = qx * qx;
		var qy = d.y * sinHalfAngle;
		var wy = qw * qy;
		var xy = qx * qy;
		var yy = qy * qy;
		var a22 = 1 - (2 * (xx + yy));
		var qz = d.z * sinHalfAngle;
		var wz = qw * qz;
		var a01 = 2 * (xy - wz);
		var a10 = 2 * (xy + wz);
		var xz = qx * qz;
		var a02 = 2 * (xz + wy);
		var a20 = 2 * (xz - wy);
		var yz = qy * qz;
		var a12 = 2 * (yz - wx);
		var a21 = 2 * (yz + wx);
		var zz = qz * qz;
		var a00 = 1 - (2 * (yy + zz));
		var a11 = 1 - (2 * (xx + zz));
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: ((a00 * v.x) + (a01 * v.y)) + (a02 * v.z), y: ((a10 * v.x) + (a11 * v.y)) + (a12 * v.z), z: ((a20 * v.x) + (a21 * v.y)) + (a22 * v.z)});
	});
var $ianmackenzie$elm_geometry$Vector3d$scaleTo = F2(
	function (_v0, _v1) {
		var q = _v0.a;
		var v = _v1.a;
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(v.x),
			A2(
				$elm$core$Basics$max,
				$elm$core$Basics$abs(v.y),
				$elm$core$Basics$abs(v.z)));
		if (!largestComponent) {
			return $ianmackenzie$elm_geometry$Vector3d$zero;
		} else {
			var scaledZ = v.z / largestComponent;
			var scaledY = v.y / largestComponent;
			var scaledX = v.x / largestComponent;
			var scaledLength = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
			return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
				{x: (q * scaledX) / scaledLength, y: (q * scaledY) / scaledLength, z: (q * scaledZ) / scaledLength});
		}
	});
var $ianmackenzie$elm_geometry$LineSegment3d$mapEndpoints = F2(
	function (_function, lineSegment) {
		var _v0 = $ianmackenzie$elm_geometry$LineSegment3d$endpoints(lineSegment);
		var p1 = _v0.a;
		var p2 = _v0.b;
		return $ianmackenzie$elm_geometry$LineSegment3d$fromEndpoints(
			_Utils_Tuple2(
				_function(p1),
				_function(p2)));
	});
var $ianmackenzie$elm_geometry$LineSegment3d$translateBy = F2(
	function (displacementVector, lineSegment) {
		return A2(
			$ianmackenzie$elm_geometry$LineSegment3d$mapEndpoints,
			$ianmackenzie$elm_geometry$Point3d$translateBy(displacementVector),
			lineSegment);
	});
var $ianmackenzie$elm_geometry$Axis3d$z = A2($ianmackenzie$elm_geometry$Axis3d$through, $ianmackenzie$elm_geometry$Point3d$origin, $ianmackenzie$elm_geometry$Direction3d$z);
var $author$project$SceneBuilder3D$paintSomethingBetween = F4(
	function (width, material, pt1, pt2) {
		var roadAsSegment = A2($ianmackenzie$elm_geometry$LineSegment3d$from, pt1, pt2);
		var halfWidth = A2(
			$ianmackenzie$elm_geometry$Vector3d$scaleTo,
			width,
			A2(
				$ianmackenzie$elm_geometry$Vector3d$projectOnto,
				$ianmackenzie$elm_geometry$Plane3d$xy,
				A2($ianmackenzie$elm_geometry$Vector3d$from, pt1, pt2)));
		var _v0 = _Utils_Tuple2(
			A3(
				$ianmackenzie$elm_geometry$Vector3d$rotateAround,
				$ianmackenzie$elm_geometry$Axis3d$z,
				$ianmackenzie$elm_units$Angle$degrees(90),
				halfWidth),
			A3(
				$ianmackenzie$elm_geometry$Vector3d$rotateAround,
				$ianmackenzie$elm_geometry$Axis3d$z,
				$ianmackenzie$elm_units$Angle$degrees(-90),
				halfWidth));
		var leftKerbVector = _v0.a;
		var rightKerbVector = _v0.b;
		var _v1 = _Utils_Tuple2(
			A2($ianmackenzie$elm_geometry$LineSegment3d$translateBy, leftKerbVector, roadAsSegment),
			A2($ianmackenzie$elm_geometry$LineSegment3d$translateBy, rightKerbVector, roadAsSegment));
		var leftKerb = _v1.a;
		var rightKerb = _v1.b;
		return _List_fromArray(
			[
				A5(
				$ianmackenzie$elm_3d_scene$Scene3d$quad,
				material,
				$ianmackenzie$elm_geometry$LineSegment3d$startPoint(leftKerb),
				$ianmackenzie$elm_geometry$LineSegment3d$endPoint(leftKerb),
				$ianmackenzie$elm_geometry$LineSegment3d$endPoint(rightKerb),
				$ianmackenzie$elm_geometry$LineSegment3d$startPoint(rightKerb))
			]);
	});
var $author$project$SceneBuilder3D$centreLineBetween = F2(
	function (colouringFn, road) {
		var smallUpshiftTo = function (pt) {
			return A2(
				$ianmackenzie$elm_geometry$Point3d$translateBy,
				A3($ianmackenzie$elm_geometry$Vector3d$meters, 0.0, 0.0, 0.005),
				pt);
		};
		var gradient = road.gradientAtStart;
		return A4(
			$author$project$SceneBuilder3D$paintSomethingBetween,
			$ianmackenzie$elm_units$Length$meters(0.5),
			$ianmackenzie$elm_3d_scene$Scene3d$Material$color(
				colouringFn(gradient)),
			smallUpshiftTo(road.startPoint),
			smallUpshiftTo(road.endPoint));
	});
var $avh4$elm_color$Color$darkGreen = A4($avh4$elm_color$Color$RgbaSpace, 78 / 255, 154 / 255, 6 / 255, 1.0);
var $avh4$elm_color$Color$fromRgba = function (components) {
	return A4($avh4$elm_color$Color$RgbaSpace, components.red, components.green, components.blue, components.alpha);
};
var $avh4$elm_color$Color$purple = A4($avh4$elm_color$Color$RgbaSpace, 117 / 255, 80 / 255, 123 / 255, 1.0);
var $avh4$elm_color$Color$red = A4($avh4$elm_color$Color$RgbaSpace, 204 / 255, 0 / 255, 0 / 255, 1.0);
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $avh4$elm_color$Color$toHsla = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	var minColor = A2(
		$elm$core$Basics$min,
		r,
		A2($elm$core$Basics$min, g, b));
	var maxColor = A2(
		$elm$core$Basics$max,
		r,
		A2($elm$core$Basics$max, g, b));
	var l = (minColor + maxColor) / 2;
	var s = _Utils_eq(minColor, maxColor) ? 0 : ((l < 0.5) ? ((maxColor - minColor) / (maxColor + minColor)) : ((maxColor - minColor) / ((2 - maxColor) - minColor)));
	var h1 = _Utils_eq(maxColor, r) ? ((g - b) / (maxColor - minColor)) : (_Utils_eq(maxColor, g) ? (2 + ((b - r) / (maxColor - minColor))) : (4 + ((r - g) / (maxColor - minColor))));
	var h2 = h1 * (1 / 6);
	var h3 = $elm$core$Basics$isNaN(h2) ? 0 : ((h2 < 0) ? (h2 + 1) : h2);
	return {alpha: a, hue: h3, lightness: l, saturation: s};
};
var $author$project$ColourPalette$gradientHue = function (slope) {
	var x = (A3($elm$core$Basics$clamp, -20.0, 20.0, slope) + 20.0) / 40.0;
	var steepestDescentHue = $avh4$elm_color$Color$toHsla($avh4$elm_color$Color$purple).hue;
	var steepestAscentHue = $avh4$elm_color$Color$toHsla($avh4$elm_color$Color$red).hue;
	return (x * steepestAscentHue) + ((1.0 - x) * steepestDescentHue);
};
var $avh4$elm_color$Color$hsla = F4(
	function (hue, sat, light, alpha) {
		var _v0 = _Utils_Tuple3(hue, sat, light);
		var h = _v0.a;
		var s = _v0.b;
		var l = _v0.c;
		var m2 = (l <= 0.5) ? (l * (s + 1)) : ((l + s) - (l * s));
		var m1 = (l * 2) - m2;
		var hueToRgb = function (h__) {
			var h_ = (h__ < 0) ? (h__ + 1) : ((h__ > 1) ? (h__ - 1) : h__);
			return ((h_ * 6) < 1) ? (m1 + (((m2 - m1) * h_) * 6)) : (((h_ * 2) < 1) ? m2 : (((h_ * 3) < 2) ? (m1 + (((m2 - m1) * ((2 / 3) - h_)) * 6)) : m1));
		};
		var b = hueToRgb(h - (1 / 3));
		var g = hueToRgb(h);
		var r = hueToRgb(h + (1 / 3));
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, alpha);
	});
var $avh4$elm_color$Color$hsl = F3(
	function (h, s, l) {
		return A4($avh4$elm_color$Color$hsla, h, s, l, 1.0);
	});
var $author$project$SceneBuilder3D$gradientColourPastel = function (slope) {
	return A3(
		$avh4$elm_color$Color$hsl,
		$author$project$ColourPalette$gradientHue(slope),
		0.6,
		0.7);
};
var $avh4$elm_color$Color$grey = A4($avh4$elm_color$Color$RgbaSpace, 211 / 255, 215 / 255, 207 / 255, 1.0);
var $ianmackenzie$elm_units$Constants$meter = 1.0;
var $ianmackenzie$elm_units$Constants$inch = 0.0254 * $ianmackenzie$elm_units$Constants$meter;
var $ianmackenzie$elm_units$Length$inches = function (numInches) {
	return $ianmackenzie$elm_units$Length$meters($ianmackenzie$elm_units$Constants$inch * numInches);
};
var $ianmackenzie$elm_units$Length$inch = $ianmackenzie$elm_units$Length$inches(1);
var $ianmackenzie$elm_units$Length$kilometer = $ianmackenzie$elm_units$Length$kilometers(1);
var $avh4$elm_color$Color$lightOrange = A4($avh4$elm_color$Color$RgbaSpace, 252 / 255, 175 / 255, 62 / 255, 1.0);
var $ianmackenzie$elm_3d_scene$Scene3d$Types$LambertianMaterial = F3(
	function (a, b, c) {
		return {$: 'LambertianMaterial', a: a, b: b, c: c};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$VerticalNormal = {$: 'VerticalNormal'};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$LinearRgb = function (a) {
	return {$: 'LinearRgb', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$inverseGamma = function (u) {
	return A3(
		$elm$core$Basics$clamp,
		0,
		1,
		(u <= 0.04045) ? (u / 12.92) : A2($elm$core$Basics$pow, (u + 0.055) / 1.055, 2.4));
};
var $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$colorToLinearRgb = function (color) {
	var _v0 = $avh4$elm_color$Color$toRgba(color);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	return $ianmackenzie$elm_3d_scene$Scene3d$Types$LinearRgb(
		A3(
			$elm_explorations$linear_algebra$Math$Vector3$vec3,
			$ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$inverseGamma(red),
			$ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$inverseGamma(green),
			$ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$inverseGamma(blue)));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Material$matte = function (materialColor) {
	return A3(
		$ianmackenzie$elm_3d_scene$Scene3d$Types$LambertianMaterial,
		$ianmackenzie$elm_3d_scene$Scene3d$Types$UseMeshUvs,
		$ianmackenzie$elm_3d_scene$Scene3d$Types$Constant(
			$ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$colorToLinearRgb(materialColor)),
		$ianmackenzie$elm_3d_scene$Scene3d$Types$Constant($ianmackenzie$elm_3d_scene$Scene3d$Types$VerticalNormal));
};
var $ianmackenzie$elm_geometry$Plane3d$normalDirection = function (_v0) {
	var plane = _v0.a;
	return plane.normalDirection;
};
var $ianmackenzie$elm_geometry$Plane3d$withNormalDirection = F2(
	function (givenNormalDirection, givenPoint) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Plane3d(
			{normalDirection: givenNormalDirection, originPoint: givenPoint});
	});
var $ianmackenzie$elm_geometry$Plane3d$translateBy = F2(
	function (vector, _v0) {
		var plane = _v0.a;
		return A2(
			$ianmackenzie$elm_geometry$Plane3d$withNormalDirection,
			plane.normalDirection,
			A2($ianmackenzie$elm_geometry$Point3d$translateBy, vector, plane.originPoint));
	});
var $ianmackenzie$elm_geometry$Plane3d$translateIn = F3(
	function (direction, distance, plane) {
		return A2(
			$ianmackenzie$elm_geometry$Plane3d$translateBy,
			A2($ianmackenzie$elm_geometry$Vector3d$withLength, distance, direction),
			plane);
	});
var $ianmackenzie$elm_geometry$Plane3d$offsetBy = F2(
	function (distance, plane) {
		return A3(
			$ianmackenzie$elm_geometry$Plane3d$translateIn,
			$ianmackenzie$elm_geometry$Plane3d$normalDirection(plane),
			distance,
			plane);
	});
var $ianmackenzie$elm_geometry$Point3d$projectOnto = F2(
	function (_v0, _v1) {
		var plane = _v0.a;
		var p = _v1.a;
		var _v2 = plane.originPoint;
		var p0 = _v2.a;
		var _v3 = plane.normalDirection;
		var n = _v3.a;
		var distance = (((p.x - p0.x) * n.x) + ((p.y - p0.y) * n.y)) + ((p.z - p0.z) * n.z);
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p.x - (distance * n.x), y: p.y - (distance * n.y), z: p.z - (distance * n.z)});
	});
var $ianmackenzie$elm_geometry$LineSegment3d$projectOnto = F2(
	function (plane, lineSegment) {
		return A2(
			$ianmackenzie$elm_geometry$LineSegment3d$mapEndpoints,
			$ianmackenzie$elm_geometry$Point3d$projectOnto(plane),
			lineSegment);
	});
var $author$project$SceneBuilder3D$render3dView = F2(
	function (settings, track) {
		var roadWidth = $ianmackenzie$elm_units$Length$meters(4.0);
		var renderCurrentMarkers = _Utils_ap(
			_List_fromArray(
				[
					A3(
					$ianmackenzie$elm_3d_scene$Scene3d$point,
					{
						radius: $ianmackenzie$elm_units$Pixels$pixels(10)
					},
					$ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$lightOrange),
					A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree))
				]),
			function () {
				var _v1 = track.markerPosition;
				if (_v1.$ === 'Just') {
					var marker = _v1.a;
					return _List_fromArray(
						[
							A3(
							$ianmackenzie$elm_3d_scene$Scene3d$point,
							{
								radius: $ianmackenzie$elm_units$Pixels$pixels(9)
							},
							$ianmackenzie$elm_3d_scene$Scene3d$Material$color(
								$avh4$elm_color$Color$fromRgba(
									$mdgriffith$elm_ui$Element$toRgb($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple))),
							A2($author$project$DomainModel$earthPointFromIndex, marker, track.trackTree))
						]);
				} else {
					return _List_Nil;
				}
			}());
		var nominalRenderDepth = A3(
			$elm$core$Basics$clamp,
			1,
			10,
			$elm$core$Basics$round(
				A2(
					$elm$core$Basics$logBase,
					2,
					$author$project$DomainModel$skipCount(track.trackTree))));
		var nearbySpace = A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$expandBy,
			$ianmackenzie$elm_units$Length$kilometer,
			$author$project$DomainModel$boundingBox(track.trackTree));
		var groundPlane = function () {
			var modelMinZ = A2(
				$ianmackenzie$elm_units$Quantity$minus,
				$ianmackenzie$elm_units$Length$inch,
				$ianmackenzie$elm_geometry$BoundingBox3d$minZ(
					$author$project$DomainModel$boundingBox(track.trackTree)));
			var _v0 = $ianmackenzie$elm_geometry$BoundingBox3d$extrema(nearbySpace);
			var minX = _v0.minX;
			var maxX = _v0.maxX;
			var minY = _v0.minY;
			var maxY = _v0.maxY;
			var minZ = _v0.minZ;
			var maxZ = _v0.maxZ;
			return settings.groundPlane ? _List_fromArray(
				[
					A5(
					$ianmackenzie$elm_3d_scene$Scene3d$quad,
					$ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$darkGreen),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, minX, minY, modelMinZ),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, minX, maxY, modelMinZ),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, maxX, maxY, modelMinZ),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, maxX, minY, modelMinZ))
				]) : _List_Nil;
		}();
		var fullRenderingZone = A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$withDimensions,
			_Utils_Tuple3($author$project$UtilsForViews$fullDepthRenderingBoxSize, $author$project$UtilsForViews$fullDepthRenderingBoxSize, $author$project$UtilsForViews$fullDepthRenderingBoxSize),
			$author$project$DomainModel$startPoint(
				A2($author$project$DomainModel$leafFromIndex, track.currentPosition, track.trackTree)));
		var floorPlane = A2(
			$ianmackenzie$elm_geometry$Plane3d$offsetBy,
			$ianmackenzie$elm_geometry$BoundingBox3d$minZ(
				$author$project$DomainModel$boundingBox(track.trackTree)),
			$ianmackenzie$elm_geometry$Plane3d$xy);
		var gradientCurtain = function (road) {
			if (_Utils_eq(settings.curtainStyle, $author$project$Tools$DisplaySettingsOptions$NoCurtain)) {
				return _List_Nil;
			} else {
				var roadAsSegment = A2($ianmackenzie$elm_geometry$LineSegment3d$from, road.startPoint, road.endPoint);
				var gradient = road.gradientAtStart;
				var curtainHem = A2($ianmackenzie$elm_geometry$LineSegment3d$projectOnto, floorPlane, roadAsSegment);
				var colourFn = _Utils_eq(settings.curtainStyle, $author$project$Tools$DisplaySettingsOptions$PastelCurtain) ? $author$project$SceneBuilder3D$gradientColourPastel : $elm$core$Basics$always(
					$avh4$elm_color$Color$fromRgba(
						$mdgriffith$elm_ui$Element$toRgb($smucode$elm_flat_colors$FlatColors$FlatUIPalette$greenSea)));
				return _List_fromArray(
					[
						A5(
						$ianmackenzie$elm_3d_scene$Scene3d$quad,
						$ianmackenzie$elm_3d_scene$Scene3d$Material$color(
							colourFn(gradient)),
						$ianmackenzie$elm_geometry$LineSegment3d$startPoint(roadAsSegment),
						$ianmackenzie$elm_geometry$LineSegment3d$endPoint(roadAsSegment),
						$ianmackenzie$elm_geometry$LineSegment3d$endPoint(curtainHem),
						$ianmackenzie$elm_geometry$LineSegment3d$startPoint(curtainHem))
					]);
			}
		};
		var makeVisibleSegment = function (road) {
			return _Utils_ap(
				settings.roadSurface ? A4(
					$author$project$SceneBuilder3D$paintSomethingBetween,
					roadWidth,
					$ianmackenzie$elm_3d_scene$Scene3d$Material$matte($avh4$elm_color$Color$grey),
					road.startPoint,
					road.endPoint) : _List_fromArray(
					[
						A3(
						$ianmackenzie$elm_3d_scene$Scene3d$point,
						{
							radius: $ianmackenzie$elm_units$Pixels$pixels(1)
						},
						$ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$black),
						road.startPoint),
						A2(
						$ianmackenzie$elm_3d_scene$Scene3d$lineSegment,
						$ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$black),
						A2($ianmackenzie$elm_geometry$LineSegment3d$from, road.startPoint, road.endPoint))
					]),
				_Utils_ap(
					gradientCurtain(road),
					settings.centreLine ? A2($author$project$SceneBuilder3D$centreLineBetween, $author$project$SceneBuilder3D$gradientColourPastel, road) : _List_Nil));
		};
		var foldFn = F2(
			function (road, scene) {
				return _Utils_ap(
					makeVisibleSegment(road),
					scene);
			});
		var depthFn = function (road) {
			return A2($ianmackenzie$elm_geometry$BoundingBox3d$intersects, fullRenderingZone, road.boundingBox) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(nominalRenderDepth);
		};
		return A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(track.trackTree),
			depthFn,
			0,
			track.trackTree,
			foldFn,
			_Utils_ap(groundPlane, renderCurrentMarkers));
	});
var $author$project$SceneBuilder3D$previewAsLine = F2(
	function (color, points) {
		var material = $ianmackenzie$elm_3d_scene$Scene3d$Material$matte(
			$avh4$elm_color$Color$fromRgba(
				$mdgriffith$elm_ui$Element$toRgb(color)));
		var preview = F2(
			function (p1, p2) {
				return A4(
					$author$project$SceneBuilder3D$paintSomethingBetween,
					$ianmackenzie$elm_units$Length$meters(0.5),
					material,
					p1,
					p2);
			});
		return $elm$core$List$concat(
			A3(
				$elm$core$List$map2,
				preview,
				points,
				A2($elm$core$List$drop, 1, points)));
	});
var $author$project$SceneBuilder3D$previewAsPoints = F2(
	function (color, points) {
		var material = $ianmackenzie$elm_3d_scene$Scene3d$Material$color(
			$avh4$elm_color$Color$fromRgba(
				$mdgriffith$elm_ui$Element$toRgb(color)));
		var highlightPoint = function (p) {
			return A3(
				$ianmackenzie$elm_3d_scene$Scene3d$point,
				{
					radius: $ianmackenzie$elm_units$Pixels$pixels(7)
				},
				material,
				p);
		};
		return A2($elm$core$List$map, highlightPoint, points);
	});
var $author$project$SceneBuilder3D$renderPreviews = function (previews) {
	var onePreview = function (_v1) {
		var tag = _v1.tag;
		var shape = _v1.shape;
		var colour = _v1.colour;
		var points = _v1.points;
		switch (shape.$) {
			case 'PreviewCircle':
				return A2(
					$author$project$SceneBuilder3D$previewAsPoints,
					colour,
					A2($elm$core$List$map, $elm$core$Tuple$first, points));
			case 'PreviewLine':
				return A2(
					$author$project$SceneBuilder3D$previewAsLine,
					colour,
					A2($elm$core$List$map, $elm$core$Tuple$first, points));
			default:
				var callback = shape.a;
				return callback;
		}
	};
	return A2(
		$elm$core$List$concatMap,
		onePreview,
		$elm$core$Dict$values(previews));
};
var $ianmackenzie$elm_units$Quantity$clamp = F3(
	function (_v0, _v1, _v2) {
		var lower = _v0.a;
		var upper = _v1.a;
		var value = _v2.a;
		return (_Utils_cmp(lower, upper) < 1) ? $ianmackenzie$elm_units$Quantity$Quantity(
			A3($elm$core$Basics$clamp, lower, upper, value)) : $ianmackenzie$elm_units$Quantity$Quantity(
			A3($elm$core$Basics$clamp, upper, lower, value));
	});
var $author$project$ColourPalette$gradientColourPastel = function (slope) {
	return A3(
		$avh4$elm_color$Color$hsl,
		$author$project$ColourPalette$gradientHue(slope),
		0.6,
		0.7);
};
var $ianmackenzie$elm_units$Constants$foot = 12 * $ianmackenzie$elm_units$Constants$inch;
var $ianmackenzie$elm_units$Length$inFeet = function (length) {
	return $ianmackenzie$elm_units$Length$inMeters(length) / $ianmackenzie$elm_units$Constants$foot;
};
var $ianmackenzie$elm_units$Constants$mile = 5280 * $ianmackenzie$elm_units$Constants$foot;
var $ianmackenzie$elm_units$Length$inMiles = function (length) {
	return $ianmackenzie$elm_units$Length$inMeters(length) / $ianmackenzie$elm_units$Constants$mile;
};
var $author$project$ViewProfileCharts$renderProfileDataForCharts = F3(
	function (toolSettings, context, track) {
		var trackLengthInView = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			A2($elm$core$Basics$pow, 0.5, context.zoomLevel),
			$author$project$DomainModel$trueLength(track.trackTree));
		var pointOfInterest = A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree);
		var leftEdge = A3(
			$ianmackenzie$elm_units$Quantity$clamp,
			$ianmackenzie$elm_units$Quantity$zero,
			A2(
				$ianmackenzie$elm_units$Quantity$minus,
				trackLengthInView,
				$author$project$DomainModel$trueLength(track.trackTree)),
			A2(
				$ianmackenzie$elm_units$Quantity$minus,
				$ianmackenzie$elm_units$Quantity$half(trackLengthInView),
				pointOfInterest));
		var rightEdge = A2($ianmackenzie$elm_units$Quantity$plus, trackLengthInView, leftEdge);
		var imperial = toolSettings.imperial;
		var lengthConversion = imperial ? $ianmackenzie$elm_units$Length$inMiles : $ianmackenzie$elm_units$Length$inMeters;
		var heightConversion = imperial ? $ianmackenzie$elm_units$Length$inFeet : $ianmackenzie$elm_units$Length$inMeters;
		var foldFn = F2(
			function (road, _v10) {
				var distanceSoFar = _v10.a;
				var outputs = _v10.b;
				var newEntry = {
					altitude: heightConversion(
						$ianmackenzie$elm_geometry$Point3d$zCoordinate(road.startPoint)),
					colour: $author$project$ColourPalette$gradientColourPastel(road.gradientAtStart),
					distance: lengthConversion(distanceSoFar),
					gradient: road.gradientAtStart
				};
				return _Utils_Tuple3(
					A2($ianmackenzie$elm_units$Quantity$plus, road.trueLength, distanceSoFar),
					A2($elm$core$List$cons, newEntry, outputs),
					$elm$core$Maybe$Just(road));
			});
		var depthFn = function (road) {
			return $elm$core$Maybe$Just(
				$elm$core$Basics$round(10 + context.zoomLevel));
		};
		var _v0 = _Utils_Tuple2(
			A2($author$project$DomainModel$indexFromDistance, leftEdge, track.trackTree),
			A2($author$project$DomainModel$indexFromDistance, rightEdge, track.trackTree));
		var leftIndex = _v0.a;
		var rightIndex = _v0.b;
		var _v1 = function () {
			var _v2 = toolSettings.limitGradientSettings.extent;
			if (_v2.$ === 'ExtentIsRange') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v1.a;
		var fromEnd = _v1.b;
		var previewEndDistance = A2(
			$author$project$DomainModel$distanceFromIndex,
			$author$project$DomainModel$skipCount(track.trackTree) - fromEnd,
			track.trackTree);
		var _v3 = _Utils_Tuple2(leftIndex - fromStart, rightIndex - fromStart);
		var leftPreviewIndex = _v3.a;
		var rightPreviewIndex = _v3.b;
		var previewStartDistance = A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree);
		var previewInitialFoldDistance = A2($ianmackenzie$elm_units$Quantity$max, leftEdge, previewStartDistance);
		var _v4 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			leftIndex,
			rightIndex,
			depthFn,
			0,
			track.trackTree,
			foldFn,
			_Utils_Tuple3(leftEdge, _List_Nil, $elm$core$Maybe$Nothing));
		var result = _v4.b;
		var _final = _v4.c;
		var finalDatum = function () {
			if (_final.$ === 'Just') {
				var finalLeaf = _final.a;
				return {
					altitude: heightConversion(
						$ianmackenzie$elm_geometry$Point3d$zCoordinate(finalLeaf.endPoint)),
					colour: $author$project$ColourPalette$gradientColourPastel(finalLeaf.gradientAtEnd),
					distance: lengthConversion(rightEdge),
					gradient: finalLeaf.gradientAtEnd
				};
			} else {
				return {
					altitude: 0.0,
					colour: $avh4$elm_color$Color$black,
					distance: lengthConversion(rightEdge),
					gradient: 0.0
				};
			}
		}();
		var _v5 = function () {
			var _v6 = toolSettings.limitGradientSettings.previewData;
			if (_v6.$ === 'Just') {
				var previewTree = _v6.a;
				return A7(
					$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
					leftPreviewIndex,
					rightPreviewIndex,
					depthFn,
					0,
					previewTree,
					foldFn,
					_Utils_Tuple3(previewInitialFoldDistance, _List_Nil, $elm$core$Maybe$Nothing));
			} else {
				return _Utils_Tuple3($ianmackenzie$elm_units$Quantity$zero, _List_Nil, $elm$core$Maybe$Nothing);
			}
		}();
		var preview = _v5.b;
		var dangly = _v5.c;
		var previewFinalDatum = function () {
			if (dangly.$ === 'Just') {
				var finalLeaf = dangly.a;
				return {
					altitude: heightConversion(
						$ianmackenzie$elm_geometry$Point3d$zCoordinate(finalLeaf.endPoint)),
					colour: $author$project$ColourPalette$gradientColourPastel(finalLeaf.gradientAtEnd),
					distance: lengthConversion(
						A2($ianmackenzie$elm_units$Quantity$min, rightEdge, previewEndDistance)),
					gradient: finalLeaf.gradientAtEnd
				};
			} else {
				return {
					altitude: 0.0,
					colour: $avh4$elm_color$Color$black,
					distance: lengthConversion(rightEdge),
					gradient: 0.0
				};
			}
		}();
		return _Utils_update(
			context,
			{
				gradientProblems: A2($elm$core$List$map, $elm$core$Tuple$first, toolSettings.gradientProblemOptions.breaches),
				imperial: imperial,
				previewData: function () {
					if (dangly.$ === 'Just') {
						return $elm$core$List$reverse(
							A2($elm$core$List$cons, previewFinalDatum, preview));
					} else {
						return _List_Nil;
					}
				}(),
				profileData: $elm$core$List$reverse(
					A2($elm$core$List$cons, finalDatum, result))
			});
	});
var $author$project$PaneLayoutManager$renderPaneIfProfileVisible = F3(
	function (toolSettings, pane, track) {
		var _v0 = _Utils_Tuple2(pane.activeView, pane.profileContext);
		if ((_v0.a.$ === 'ViewProfile') && (_v0.b.$ === 'Just')) {
			var _v1 = _v0.a;
			var context = _v0.b.a;
			return _Utils_update(
				pane,
				{
					profileContext: $elm$core$Maybe$Just(
						A3($author$project$ViewProfileCharts$renderProfileDataForCharts, toolSettings, context, track))
				});
		} else {
			return pane;
		}
	});
var $author$project$PaneLayoutManager$renderProfile = F3(
	function (toolSettings, track, options) {
		var _v0 = options.paneLayout;
		switch (_v0.$) {
			case 'PanesOne':
				return _Utils_update(
					options,
					{
						pane1: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane1, track)
					});
			case 'PanesLeftRight':
				return _Utils_update(
					options,
					{
						pane1: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane1, track),
						pane2: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane2, track)
					});
			case 'PanesUpperLower':
				return _Utils_update(
					options,
					{
						pane1: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane1, track),
						pane2: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane2, track)
					});
			case 'PanesOnePlusTwo':
				return _Utils_update(
					options,
					{
						pane1: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane1, track),
						pane2: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane2, track),
						pane3: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane3, track)
					});
			default:
				return _Utils_update(
					options,
					{
						pane1: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane1, track),
						pane2: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane2, track),
						pane3: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane3, track),
						pane4: A3($author$project$PaneLayoutManager$renderPaneIfProfileVisible, toolSettings, options.pane4, track)
					});
		}
	});
var $author$project$PaneLayoutManager$render = F4(
	function (toolSettings, options, track, previews) {
		return A3(
			$author$project$PaneLayoutManager$renderProfile,
			toolSettings,
			track,
			_Utils_update(
				options,
				{
					scene3d: _Utils_ap(
						$author$project$SceneBuilder3D$renderPreviews(previews),
						A2($author$project$SceneBuilder3D$render3dView, toolSettings.displaySettings, track))
				}));
	});
var $author$project$Main$render = function (model) {
	var _v0 = model.track;
	if (_v0.$ === 'Just') {
		var track = _v0.a;
		var paneLayout = A4($author$project$PaneLayoutManager$render, model.toolOptions, model.paneLayoutOptions, track, model.previews);
		return _Utils_update(
			model,
			{paneLayoutOptions: paneLayout});
	} else {
		return model;
	}
};
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $author$project$ToolsController$restoreMeasure = F2(
	function (options, value) {
		var decoded = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$bool, value);
		if (decoded.$ === 'Ok') {
			var setting = decoded.a;
			return _Utils_update(
				options,
				{imperial: setting});
		} else {
			var error = decoded.a;
			return options;
		}
	});
var $author$project$Tools$DisplaySettingsOptions$PlainCurtain = {$: 'PlainCurtain'};
var $author$project$Tools$DisplaySettingsOptions$decodeCurtain = function (value) {
	switch (value) {
		case 'NoCurtain':
			return $author$project$Tools$DisplaySettingsOptions$NoCurtain;
		case 'PlainCurtain':
			return $author$project$Tools$DisplaySettingsOptions$PlainCurtain;
		default:
			return $author$project$Tools$DisplaySettingsOptions$PastelCurtain;
	}
};
var $author$project$Tools$DisplaySettingsOptions$StoredOptions = F4(
	function (roadSurface, centreLine, groundPlane, curtainStyle) {
		return {centreLine: centreLine, curtainStyle: curtainStyle, groundPlane: groundPlane, roadSurface: roadSurface};
	});
var $elm$json$Json$Decode$map4 = _Json_map4;
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Tools$DisplaySettingsOptions$decoder = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Tools$DisplaySettingsOptions$StoredOptions,
	A2($elm$json$Json$Decode$field, 'surface', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'ground', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'centre', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'curtain', $elm$json$Json$Decode$string));
var $author$project$Tools$DisplaySettingsOptions$decode = F2(
	function (json, current) {
		var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Tools$DisplaySettingsOptions$decoder, json);
		if (_v0.$ === 'Ok') {
			var decoded = _v0.a;
			return {
				centreLine: decoded.centreLine,
				curtainStyle: $author$project$Tools$DisplaySettingsOptions$decodeCurtain(decoded.curtainStyle),
				groundPlane: decoded.groundPlane,
				roadSurface: decoded.roadSurface
			};
		} else {
			var error = _v0.a;
			return current;
		}
	});
var $author$project$Tools$DisplaySettings$restoreSettings = F2(
	function (json, current) {
		return A2($author$project$Tools$DisplaySettingsOptions$decode, json, current);
	});
var $author$project$PaneLayoutManager$paneIdHelper = _List_fromArray(
	[
		_Utils_Tuple2($author$project$PaneLayoutManager$Pane1, 'pane1'),
		_Utils_Tuple2($author$project$PaneLayoutManager$Pane2, 'pane2'),
		_Utils_Tuple2($author$project$PaneLayoutManager$Pane3, 'pane3'),
		_Utils_Tuple2($author$project$PaneLayoutManager$Pane4, 'pane4')
	]);
var $author$project$PaneLayoutManager$decodePaneId = function (paneId) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$PaneLayoutManager$Pane1, 'pane1'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.b, paneId);
			},
			$author$project$PaneLayoutManager$paneIdHelper)).a;
};
var $author$project$PaneLayoutManager$ViewFirst = {$: 'ViewFirst'};
var $author$project$PaneLayoutManager$ViewMap = {$: 'ViewMap'};
var $author$project$PaneLayoutManager$ViewPlan = {$: 'ViewPlan'};
var $author$project$PaneLayoutManager$ViewProfile = {$: 'ViewProfile'};
var $author$project$PaneLayoutManager$ViewThird = {$: 'ViewThird'};
var $author$project$PaneLayoutManager$viewHelper = _List_fromArray(
	[
		_Utils_Tuple2($author$project$PaneLayoutManager$ViewInfo, 'info'),
		_Utils_Tuple2($author$project$PaneLayoutManager$ViewThird, 'third'),
		_Utils_Tuple2($author$project$PaneLayoutManager$ViewFirst, 'first'),
		_Utils_Tuple2($author$project$PaneLayoutManager$ViewPlan, 'plan'),
		_Utils_Tuple2($author$project$PaneLayoutManager$ViewProfile, 'profile'),
		_Utils_Tuple2($author$project$PaneLayoutManager$ViewMap, 'map')
	]);
var $author$project$PaneLayoutManager$decodeView = function (view) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$PaneLayoutManager$ViewInfo, 'info'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.b, view);
			},
			$author$project$PaneLayoutManager$viewHelper)).a;
};
var $author$project$PaneLayoutManager$applyStoredPaneDetails = function (stored) {
	return _Utils_update(
		$author$project$PaneLayoutManager$defaultPaneContext,
		{
			activeView: $author$project$PaneLayoutManager$decodeView(stored.activeView),
			paneId: $author$project$PaneLayoutManager$decodePaneId(stored.paneId)
		});
};
var $author$project$PaneLayoutManager$PanesGrid = {$: 'PanesGrid'};
var $author$project$PaneLayoutManager$PanesLeftRight = {$: 'PanesLeftRight'};
var $author$project$PaneLayoutManager$PanesOnePlusTwo = {$: 'PanesOnePlusTwo'};
var $author$project$PaneLayoutManager$PanesUpperLower = {$: 'PanesUpperLower'};
var $author$project$PaneLayoutManager$paneLayoutHelper = _List_fromArray(
	[
		_Utils_Tuple2($author$project$PaneLayoutManager$PanesOne, 'One'),
		_Utils_Tuple2($author$project$PaneLayoutManager$PanesLeftRight, 'LR'),
		_Utils_Tuple2($author$project$PaneLayoutManager$PanesUpperLower, 'UL'),
		_Utils_Tuple2($author$project$PaneLayoutManager$PanesOnePlusTwo, 'OneUpTwoDown'),
		_Utils_Tuple2($author$project$PaneLayoutManager$PanesGrid, 'Grid')
	]);
var $author$project$PaneLayoutManager$decodePanesLayout = function (layout) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$PaneLayoutManager$PanesOne, 'One'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.b, layout);
			},
			$author$project$PaneLayoutManager$paneLayoutHelper)).a;
};
var $author$project$PaneLayoutManager$RestoredOptions = F5(
	function (layoutName, pane1, pane2, pane3, pane4) {
		return {layoutName: layoutName, pane1: pane1, pane2: pane2, pane3: pane3, pane4: pane4};
	});
var $author$project$PaneLayoutManager$StoredPane = F2(
	function (activeView, paneId) {
		return {activeView: activeView, paneId: paneId};
	});
var $author$project$PaneLayoutManager$paneDecoder = A3(
	$elm$json$Json$Decode$map2,
	$author$project$PaneLayoutManager$StoredPane,
	A2($elm$json$Json$Decode$field, 'activeView', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'paneid', $elm$json$Json$Decode$string));
var $author$project$PaneLayoutManager$paneStateDecoder = A6(
	$elm$json$Json$Decode$map5,
	$author$project$PaneLayoutManager$RestoredOptions,
	A2($elm$json$Json$Decode$field, 'layout', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'pane1', $author$project$PaneLayoutManager$paneDecoder),
	A2($elm$json$Json$Decode$field, 'pane2', $author$project$PaneLayoutManager$paneDecoder),
	A2($elm$json$Json$Decode$field, 'pane3', $author$project$PaneLayoutManager$paneDecoder),
	A2($elm$json$Json$Decode$field, 'pane4', $author$project$PaneLayoutManager$paneDecoder));
var $author$project$PaneLayoutManager$restoreStoredValues = F2(
	function (options, values) {
		var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$PaneLayoutManager$paneStateDecoder, values);
		if (_v0.$ === 'Ok') {
			var fromStorage = _v0.a;
			return _Utils_update(
				$author$project$PaneLayoutManager$defaultOptions,
				{
					pane1: $author$project$PaneLayoutManager$applyStoredPaneDetails(fromStorage.pane1),
					pane2: $author$project$PaneLayoutManager$applyStoredPaneDetails(fromStorage.pane2),
					pane3: $author$project$PaneLayoutManager$applyStoredPaneDetails(fromStorage.pane3),
					pane4: $author$project$PaneLayoutManager$applyStoredPaneDetails(fromStorage.pane4),
					paneLayout: $author$project$PaneLayoutManager$decodePanesLayout(fromStorage.layoutName),
					popupVisible: false
				});
		} else {
			var error = _v0.a;
			return options;
		}
	});
var $author$project$ToolsController$DockBottom = {$: 'DockBottom'};
var $author$project$ToolsController$DockNone = {$: 'DockNone'};
var $author$project$ToolsController$decodeDock = function (dock) {
	switch (dock) {
		case 'upperleft':
			return $author$project$ToolsController$DockUpperLeft;
		case 'lowerleft':
			return $author$project$ToolsController$DockLowerLeft;
		case 'upperright':
			return $author$project$ToolsController$DockUpperRight;
		case 'lowerright':
			return $author$project$ToolsController$DockLowerRight;
		case 'bottom':
			return $author$project$ToolsController$DockBottom;
		case 'none':
			return $author$project$ToolsController$DockNone;
		default:
			return $author$project$ToolsController$DockUpperRight;
	}
};
var $author$project$ToolsController$Disabled = {$: 'Disabled'};
var $author$project$ToolsController$decodeState = function (state) {
	switch (state) {
		case 'expanded':
			return $author$project$ToolsController$Expanded;
		case 'contracted':
			return $author$project$ToolsController$Contracted;
		case 'disabled':
			return $author$project$ToolsController$Disabled;
		default:
			return $author$project$ToolsController$Contracted;
	}
};
var $author$project$ToolsController$StoredTool = F5(
	function (toolType, state, dock, tab, text) {
		return {dock: dock, state: state, tab: tab, text: text, toolType: toolType};
	});
var $author$project$ToolsController$toolDecoder = A6(
	$elm$json$Json$Decode$map5,
	$author$project$ToolsController$StoredTool,
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'state', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'dock', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'tab', $author$project$ToolsController$colourDecoder),
	A2($elm$json$Json$Decode$field, 'text', $author$project$ToolsController$colourDecoder));
var $author$project$ToolsController$restoreStoredValues = F2(
	function (options, values) {
		var useStoredSettings = F2(
			function (stored, tool) {
				var _v1 = A2(
					$elm_community$list_extra$List$Extra$find,
					function (fromStore) {
						return _Utils_eq(
							fromStore.toolType,
							$author$project$ToolsController$encodeType(tool.toolType));
					},
					stored);
				if (_v1.$ === 'Just') {
					var found = _v1.a;
					return _Utils_update(
						tool,
						{
							dock: $author$project$ToolsController$decodeDock(found.dock),
							state: $author$project$ToolsController$decodeState(found.state),
							tabColour: $author$project$ToolsController$decodeColour(found.tab),
							textColour: $author$project$ToolsController$decodeColour(found.text)
						});
				} else {
					return tool;
				}
			});
		var toolsAsStored = A2(
			$elm$json$Json$Decode$decodeValue,
			$elm$json$Json$Decode$list($author$project$ToolsController$toolDecoder),
			values);
		if (toolsAsStored.$ === 'Ok') {
			var stored = toolsAsStored.a;
			return _Utils_update(
				options,
				{
					tools: A2(
						$elm$core$List$map,
						useStoredSettings(stored),
						options.tools)
				});
		} else {
			var error = toolsAsStored.a;
			return options;
		}
	});
var $author$project$TrackLoaded$undoLastAction = function (track) {
	var _v0 = track.undos;
	if (_v0.b) {
		var undo = _v0.a;
		var moreUndos = _v0.b;
		var newTree = A5($author$project$DomainModel$replaceRange, undo.fromStart, undo.fromEnd, track.referenceLonLat, undo.originalPoints, track.trackTree);
		if (newTree.$ === 'Just') {
			var isTree = newTree.a;
			return _Utils_update(
				track,
				{
					currentPosition: undo.currentPosition,
					markerPosition: undo.markerPosition,
					redos: A2($elm$core$List$cons, undo, track.redos),
					trackTree: isTree,
					undos: moreUndos
				});
		} else {
			return track;
		}
	} else {
		return track;
	}
};
var $author$project$Tools$TrackInfoBox$updateMemory = F2(
	function (memory, options) {
		return _Utils_update(
			options,
			{
				memoryInfo: $elm$core$Maybe$Just(memory)
			});
	});
var $author$project$DomainModel$updatePointByIndexInSitu = F4(
	function (index, newGPX, referencePoint, tree) {
		if ((index < 0) || (_Utils_cmp(
			index,
			$author$project$DomainModel$skipCount(tree)) > 0)) {
			return tree;
		} else {
			if (tree.$ === 'Leaf') {
				var leaf = tree.a;
				return (!index) ? $author$project$DomainModel$Leaf(
					A3($author$project$DomainModel$makeRoadSection, referencePoint, newGPX, leaf.sourceData.b)) : $author$project$DomainModel$Leaf(
					A3($author$project$DomainModel$makeRoadSection, referencePoint, leaf.sourceData.a, newGPX));
			} else {
				var node = tree.a;
				return A2(
					$author$project$DomainModel$joiningNode,
					A4($author$project$DomainModel$updatePointByIndexInSitu, index, newGPX, referencePoint, node.left),
					A4(
						$author$project$DomainModel$updatePointByIndexInSitu,
						index - $author$project$DomainModel$skipCount(node.left),
						newGPX,
						referencePoint,
						node.right));
			}
		}
	});
var $author$project$TrackLoaded$Orange = {$: 'Orange'};
var $author$project$TrackLoaded$Purple = {$: 'Purple'};
var $author$project$TrackLoaded$whichMarkerIsNearestStart = function (track) {
	var _v0 = track.markerPosition;
	if (_v0.$ === 'Just') {
		var purple = _v0.a;
		return (_Utils_cmp(track.currentPosition, purple) < 1) ? $author$project$TrackLoaded$Orange : $author$project$TrackLoaded$Purple;
	} else {
		return $author$project$TrackLoaded$Orange;
	}
};
var $author$project$TrackLoaded$internalUseTree = F2(
	function (newTree, oldTrack) {
		var newLength = $author$project$DomainModel$skipCount(newTree);
		var firstMarker = $author$project$TrackLoaded$whichMarkerIsNearestStart(oldTrack);
		var changeInTrackLength = newLength - $author$project$DomainModel$skipCount(oldTrack.trackTree);
		var newOrange = A3(
			$elm$core$Basics$clamp,
			0,
			newLength,
			function () {
				if (firstMarker.$ === 'Orange') {
					return oldTrack.currentPosition;
				} else {
					return A2($elm$core$Basics$max, 0, oldTrack.currentPosition + changeInTrackLength);
				}
			}());
		var newPurple = function () {
			var _v0 = _Utils_Tuple2(oldTrack.markerPosition, firstMarker);
			if (_v0.a.$ === 'Just') {
				if (_v0.b.$ === 'Orange') {
					var purple = _v0.a.a;
					var _v1 = _v0.b;
					return $elm$core$Maybe$Just(
						A3($elm$core$Basics$clamp, 0, newLength, purple + changeInTrackLength));
				} else {
					var purple = _v0.a.a;
					var _v2 = _v0.b;
					return $elm$core$Maybe$Just(
						A3($elm$core$Basics$clamp, 0, newLength, purple));
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		return _Utils_update(
			oldTrack,
			{currentPosition: newOrange, markerPosition: newPurple, trackTree: newTree});
	});
var $author$project$TrackLoaded$useTreeWithRepositionedMarkers = F2(
	function (mTree, oldTrack) {
		if (mTree.$ === 'Just') {
			var newTree = mTree.a;
			return A2($author$project$TrackLoaded$internalUseTree, newTree, oldTrack);
		} else {
			return oldTrack;
		}
	});
var $author$project$Main$performActionsOnModel = F2(
	function (actions, model) {
		var performAction = F2(
			function (action, foldedModel) {
				var _v0 = _Utils_Tuple2(action, foldedModel.track);
				_v0$25:
				while (true) {
					switch (_v0.a.$) {
						case 'SetCurrent':
							if (_v0.b.$ === 'Just') {
								var position = _v0.a.a;
								var track = _v0.b.a;
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(
											_Utils_update(
												track,
												{currentPosition: position}))
									});
							} else {
								break _v0$25;
							}
						case 'SetCurrentFromMapClick':
							if (_v0.b.$ === 'Just') {
								var position = _v0.a.a;
								var track = _v0.b.a;
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(
											_Utils_update(
												track,
												{currentPosition: position}))
									});
							} else {
								break _v0$25;
							}
						case 'ShowPreview':
							if (_v0.b.$ === 'Just') {
								var previewData = _v0.a.a;
								var track = _v0.b.a;
								return _Utils_update(
									foldedModel,
									{
										previews: A3($elm$core$Dict$insert, previewData.tag, previewData, foldedModel.previews)
									});
							} else {
								break _v0$25;
							}
						case 'HidePreview':
							if (_v0.b.$ === 'Just') {
								var tag = _v0.a.a;
								var track = _v0.b.a;
								return _Utils_update(
									foldedModel,
									{
										previews: A2($elm$core$Dict$remove, tag, foldedModel.previews)
									});
							} else {
								break _v0$25;
							}
						case 'RenderProfile':
							if (_v0.b.$ === 'Just') {
								var _v1 = _v0.a;
								var track = _v0.b.a;
								return _Utils_update(
									foldedModel,
									{
										paneLayoutOptions: A3($author$project$PaneLayoutManager$renderProfile, foldedModel.toolOptions, track, foldedModel.paneLayoutOptions)
									});
							} else {
								break _v0$25;
							}
						case 'DelayMessage':
							if (_v0.b.$ === 'Just') {
								var _v2 = _v0.a;
								var _int = _v2.a;
								var msg = _v2.b;
								var track = _v0.b.a;
								return foldedModel;
							} else {
								break _v0$25;
							}
						case 'DeletePointsBetween':
							if (_v0.b.$ === 'Just') {
								var _v3 = _v0.a;
								var fromStart = _v3.a;
								var fromEnd = _v3.b;
								var track = _v0.b.a;
								var _v4 = A3($author$project$Tools$DeletePoints$deletePointsBetween, fromStart, fromEnd, track);
								var newTree = _v4.a;
								var oldPoints = _v4.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'DeleteSinglePoint':
							if (_v0.b.$ === 'Just') {
								var _v5 = _v0.a;
								var fromStart = _v5.a;
								var fromEnd = _v5.b;
								var track = _v0.b.a;
								var _v6 = A3($author$project$Tools$DeletePoints$deleteSinglePoint, fromStart, fromEnd, track);
								var newTree = _v6.a;
								var oldPoints = _v6.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'BezierApplyWithOptions':
							if (_v0.b.$ === 'Just') {
								var options = _v0.a.a;
								var track = _v0.b.a;
								var _v7 = A2($author$project$Tools$BezierSplines$applyUsingOptions, options, track);
								var newTree = _v7.a;
								var oldPoints = _v7.b;
								var _v8 = _v7.c;
								var fromStart = _v8.a;
								var fromEnd = _v8.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'CentroidAverageApplyWithOptions':
							if (_v0.b.$ === 'Just') {
								var options = _v0.a.a;
								var track = _v0.b.a;
								var _v9 = A2($author$project$Tools$CentroidAverage$applyUsingOptions, options, track);
								var newTree = _v9.a;
								var oldPoints = _v9.b;
								var _v10 = $author$project$TrackLoaded$getRangeFromMarkers(track);
								var fromStart = _v10.a;
								var fromEnd = _v10.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'CurveFormerApplyWithOptions':
							if (_v0.b.$ === 'Just') {
								var options = _v0.a.a;
								var track = _v0.b.a;
								var _v11 = A2($author$project$Tools$CurveFormer$applyUsingOptions, options, track);
								var newTree = _v11.a;
								var oldPoints = _v11.b;
								var _v12 = _v11.c;
								var entry = _v12.a;
								var exit = _v12.b;
								var _v13 = _Utils_Tuple2(
									entry,
									$author$project$DomainModel$skipCount(track.trackTree) - exit);
								var fromStart = _v13.a;
								var fromEnd = _v13.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'NudgeApplyWithOptions':
							if (_v0.b.$ === 'Just') {
								var options = _v0.a.a;
								var track = _v0.b.a;
								var _v14 = A2($author$project$Tools$Nudge$applyUsingOptions, options, track);
								var newTree = _v14.a;
								var oldPoints = _v14.b;
								var _v15 = _v14.c;
								var entry = _v15.a;
								var exit = _v15.b;
								var _v16 = _Utils_Tuple2(
									entry,
									$author$project$DomainModel$skipCount(track.trackTree) - exit);
								var fromStart = _v16.a;
								var fromEnd = _v16.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'BendSmootherApplyWithOptions':
							if (_v0.b.$ === 'Just') {
								var options = _v0.a.a;
								var track = _v0.b.a;
								var _v17 = A2($author$project$Tools$BendSmoother$applyUsingOptions, options, track);
								var newTree = _v17.a;
								var oldPoints = _v17.b;
								var _v18 = $author$project$TrackLoaded$getRangeFromMarkers(track);
								var fromStart = _v18.a;
								var fromEnd = _v18.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'OutAndBackApplyWithOptions':
							if (_v0.b.$ === 'Just') {
								var options = _v0.a.a;
								var track = _v0.b.a;
								var _v19 = A2($author$project$Tools$OutAndBack$apply, options, track);
								var newTree = _v19.a;
								var oldPoints = _v19.b;
								var _v20 = _Utils_Tuple2(0, 0);
								var fromStart = _v20.a;
								var fromEnd = _v20.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'ApplySimplify':
							if (_v0.b.$ === 'Just') {
								var _v21 = _v0.a;
								var track = _v0.b.a;
								var _v22 = A2($author$project$Tools$Simplify$apply, foldedModel.toolOptions.simplifySettings, track);
								var newTree = _v22.a;
								var oldPoints = _v22.b;
								var _v23 = _Utils_Tuple2(0, 0);
								var fromStart = _v23.a;
								var fromEnd = _v23.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'OneClickQuickFix':
							if (_v0.b.$ === 'Just') {
								var _v24 = _v0.a;
								var track = _v0.b.a;
								var _v25 = $author$project$Tools$OneClickQuickFix$apply(track);
								var newTree = _v25.a;
								var oldPoints = _v25.b;
								var _v26 = _Utils_Tuple2(0, 0);
								var fromStart = _v26.a;
								var fromEnd = _v26.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'ApplyInterpolateWithOptions':
							if (_v0.b.$ === 'Just') {
								var options = _v0.a.a;
								var track = _v0.b.a;
								var _v27 = A2($author$project$Tools$Interpolate$apply, options, track);
								var newTree = _v27.a;
								var oldPoints = _v27.b;
								var _v28 = function () {
									var _v29 = options.extent;
									if (_v29.$ === 'ExtentIsRange') {
										return $author$project$TrackLoaded$getRangeFromMarkers(track);
									} else {
										return _Utils_Tuple2(0, 0);
									}
								}();
								var fromStart = _v28.a;
								var fromEnd = _v28.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'LimitGradientWithOptions':
							if (_v0.b.$ === 'Just') {
								var options = _v0.a.a;
								var track = _v0.b.a;
								var _v30 = A2($author$project$Tools$LimitGradients$apply, options, track);
								var newTree = _v30.a;
								var oldPoints = _v30.b;
								var _v31 = function () {
									var _v32 = options.extent;
									if (_v32.$ === 'ExtentIsRange') {
										return $author$project$TrackLoaded$getRangeFromMarkers(track);
									} else {
										return _Utils_Tuple2(0, 0);
									}
								}();
								var fromStart = _v31.a;
								var fromEnd = _v31.b;
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									A5($author$project$TrackLoaded$addToUndoStack, action, fromStart, fromEnd, oldPoints, track));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'PointMovedOnMap':
							if (_v0.b.$ === 'Just') {
								var _v33 = _v0.a;
								var startLon = _v33.a;
								var startLat = _v33.b;
								var endLon = _v33.c;
								var endLat = _v33.d;
								var track = _v0.b.a;
								var startGpx = {
									altitude: $ianmackenzie$elm_units$Quantity$zero,
									latitude: $ianmackenzie$elm_units$Angle$degrees(startLat),
									longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
										$ianmackenzie$elm_units$Angle$degrees(startLon))
								};
								var index = A3($author$project$DomainModel$nearestToLonLat, startGpx, track.currentPosition, track.trackTree);
								var positionBeforeDrag = A2($author$project$DomainModel$gpxPointFromIndex, index, track.trackTree);
								var endGpx = {
									altitude: positionBeforeDrag.altitude,
									latitude: $ianmackenzie$elm_units$Angle$degrees(endLat),
									longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
										$ianmackenzie$elm_units$Angle$degrees(endLon))
								};
								var newTree = A4($author$project$DomainModel$updatePointByIndexInSitu, index, endGpx, track.referenceLonLat, track.trackTree);
								var _v34 = _Utils_Tuple2(
									index,
									$author$project$DomainModel$skipCount(track.trackTree) - index);
								var fromStart = _v34.a;
								var fromEnd = _v34.b;
								var newTrack = A5(
									$author$project$TrackLoaded$addToUndoStack,
									action,
									fromStart,
									fromEnd,
									_List_fromArray(
										[positionBeforeDrag]),
									_Utils_update(
										track,
										{trackTree: newTree}));
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v0$25;
							}
						case 'TrackHasChanged':
							if (_v0.b.$ === 'Just') {
								var _v35 = _v0.a;
								var track = _v0.b.a;
								var _v36 = A2($author$project$ToolsController$refreshOpenTools, foldedModel.track, foldedModel.toolOptions);
								var refreshedToolOptions = _v36.a;
								var secondaryActions = _v36.b;
								var innerModelWithNewToolSettings = _Utils_update(
									foldedModel,
									{toolOptions: refreshedToolOptions});
								var modelAfterSecondaryActions = A2($author$project$Main$performActionsOnModel, secondaryActions, innerModelWithNewToolSettings);
								return modelAfterSecondaryActions;
							} else {
								break _v0$25;
							}
						case 'SetMarker':
							if (_v0.b.$ === 'Just') {
								var maybeMarker = _v0.a.a;
								var track = _v0.b.a;
								var updatedTrack = _Utils_update(
									track,
									{markerPosition: maybeMarker});
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(updatedTrack)
									});
							} else {
								break _v0$25;
							}
						case 'StoredValueRetrieved':
							var _v37 = _v0.a;
							var key = _v37.a;
							var value = _v37.b;
							switch (key) {
								case 'splits':
									return A2($author$project$Main$decodeSplitValues, value, foldedModel);
								case 'tools':
									return _Utils_update(
										foldedModel,
										{
											toolOptions: A2($author$project$ToolsController$restoreStoredValues, foldedModel.toolOptions, value)
										});
								case 'panes':
									return _Utils_update(
										foldedModel,
										{
											paneLayoutOptions: A2($author$project$PaneLayoutManager$restoreStoredValues, foldedModel.paneLayoutOptions, value)
										});
								case 'measure':
									return _Utils_update(
										foldedModel,
										{
											toolOptions: A2($author$project$ToolsController$restoreMeasure, foldedModel.toolOptions, value)
										});
								case 'background':
									var getColour = A2($elm$json$Json$Decode$decodeValue, $author$project$ToolsController$colourDecoder, value);
									if (getColour.$ === 'Ok') {
										var colour = getColour.a;
										return _Utils_update(
											foldedModel,
											{
												backgroundColour: $author$project$ToolsController$decodeColour(colour)
											});
									} else {
										return foldedModel;
									}
								case 'visuals':
									var toolOptions = model.toolOptions;
									var newToolOptions = _Utils_update(
										toolOptions,
										{
											displaySettings: A2($author$project$Tools$DisplaySettings$restoreSettings, value, toolOptions.displaySettings)
										});
									return _Utils_update(
										foldedModel,
										{toolOptions: newToolOptions});
								default:
									return foldedModel;
							}
						case 'HeapStatusUpdate':
							var heapStatus = _v0.a.a;
							var currentTools = model.toolOptions;
							var currentInfo = currentTools.infoOptions;
							var newInfo = A2($author$project$Tools$TrackInfoBox$updateMemory, heapStatus, currentInfo);
							var newTools = _Utils_update(
								currentTools,
								{infoOptions: newInfo});
							var revisedModel = _Utils_update(
								foldedModel,
								{toolOptions: newTools});
							return revisedModel;
						case 'UndoLastAction':
							if (_v0.b.$ === 'Just') {
								var _v40 = _v0.a;
								var track = _v0.b.a;
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(
											$author$project$TrackLoaded$undoLastAction(track))
									});
							} else {
								break _v0$25;
							}
						case 'RedoUndoneAction':
							if (_v0.b.$ === 'Just') {
								var _v41 = _v0.a;
								var track = _v0.b.a;
								var _v42 = track.redos;
								if (_v42.b) {
									var redo = _v42.a;
									var moreRedos = _v42.b;
									var modelAfterRedo = A2(
										$author$project$Main$performActionsOnModel,
										_List_fromArray(
											[redo.action]),
										model);
									var _v43 = modelAfterRedo.track;
									if (_v43.$ === 'Just') {
										var trackAfterRedo = _v43.a;
										var trackWithCorrectRedoStack = _Utils_update(
											trackAfterRedo,
											{redos: moreRedos});
										return _Utils_update(
											modelAfterRedo,
											{
												track: $elm$core$Maybe$Just(trackWithCorrectRedoStack)
											});
									} else {
										return modelAfterRedo;
									}
								} else {
									return foldedModel;
								}
							} else {
								break _v0$25;
							}
						default:
							break _v0$25;
					}
				}
				return foldedModel;
			});
		return $author$project$Main$render(
			A3($elm$core$List$foldl, performAction, model, actions));
	});
var $author$project$MyIP$processIpInfo = function (response) {
	if (response.$ === 'Ok') {
		var ipInfo = response.a;
		return $elm$core$Maybe$Just(ipInfo);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Actions$HeapStatusUpdate = function (a) {
	return {$: 'HeapStatusUpdate', a: a};
};
var $author$project$Actions$StoredValueRetrieved = F2(
	function (a, b) {
		return {$: 'StoredValueRetrieved', a: a, b: b};
	});
var $author$project$Tools$MemoryUsage$HeapStatus = F3(
	function (jsHeapSizeLimit, totalJSHeapSize, usedJSHeapSize) {
		return {jsHeapSizeLimit: jsHeapSizeLimit, totalJSHeapSize: totalJSHeapSize, usedJSHeapSize: usedJSHeapSize};
	});
var $author$project$LocalStorage$memoryDecoder = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Tools$MemoryUsage$HeapStatus,
	A2($elm$json$Json$Decode$field, 'jsHeapSizeLimit', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'totalJSHeapSize', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'usedJSHeapSize', $elm$json$Json$Decode$int));
var $author$project$LocalStorage$msgDecoder = A2($elm$json$Json$Decode$field, 'msg', $elm$json$Json$Decode$string);
var $author$project$LocalStorage$processStoragePortMessage = F2(
	function (json, model) {
		var jsonMsg = A2($elm$json$Json$Decode$decodeValue, $author$project$LocalStorage$msgDecoder, json);
		_v0$2:
		while (true) {
			if (jsonMsg.$ === 'Ok') {
				switch (jsonMsg.a) {
					case 'storage.got':
						var value = A2(
							$elm$json$Json$Decode$decodeValue,
							A2($elm$json$Json$Decode$field, 'value', $elm$json$Json$Decode$value),
							json);
						var key = A2(
							$elm$json$Json$Decode$decodeValue,
							A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string),
							json);
						var _v1 = _Utils_Tuple2(key, value);
						if ((_v1.a.$ === 'Ok') && (_v1.b.$ === 'Ok')) {
							var someKey = _v1.a.a;
							var somevalue = _v1.b.a;
							return _List_fromArray(
								[
									A2($author$project$Actions$StoredValueRetrieved, someKey, somevalue)
								]);
						} else {
							return _List_Nil;
						}
					case 'memory':
						var memory = A2(
							$elm$json$Json$Decode$decodeValue,
							A2($elm$json$Json$Decode$field, 'memory', $author$project$LocalStorage$memoryDecoder),
							json);
						if (memory.$ === 'Ok') {
							var gotMemory = memory.a;
							return _List_fromArray(
								[
									$author$project$Actions$HeapStatusUpdate(gotMemory)
								]);
						} else {
							return _List_Nil;
						}
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return _List_Nil;
	});
var $author$project$MyIP$apiRoot = 'http://ip-api.com';
var $elm$url$Url$Builder$toQueryPair = function (_v0) {
	var key = _v0.a;
	var value = _v0.b;
	return key + ('=' + value);
};
var $elm$url$Url$Builder$toQuery = function (parameters) {
	if (!parameters.b) {
		return '';
	} else {
		return '?' + A2(
			$elm$core$String$join,
			'&',
			A2($elm$core$List$map, $elm$url$Url$Builder$toQueryPair, parameters));
	}
};
var $elm$url$Url$Builder$crossOrigin = F3(
	function (prePath, pathSegments, parameters) {
		return prePath + ('/' + (A2($elm$core$String$join, '/', pathSegments) + $elm$url$Url$Builder$toQuery(parameters)));
	});
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $author$project$GeoCodeDecoders$IpInfo = F7(
	function (ip, country, region, city, zip, latitude, longitude) {
		return {city: city, country: country, ip: ip, latitude: latitude, longitude: longitude, region: region, zip: zip};
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$json$Json$Decode$map7 = _Json_map7;
var $author$project$GeoCodeDecoders$ipInfoDecoder = A8(
	$elm$json$Json$Decode$map7,
	$author$project$GeoCodeDecoders$IpInfo,
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['query']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['country']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['region']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['city']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['zip']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['lat']),
		$elm$json$Json$Decode$float),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['lon']),
		$elm$json$Json$Decode$float));
var $elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.tracker;
							if (_v4.$ === 'Nothing') {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $author$project$MyIP$requestIpInformation = function (msg) {
	return $elm$http$Http$request(
		{
			body: $elm$http$Http$emptyBody,
			expect: A2($elm$http$Http$expectJson, msg, $author$project$GeoCodeDecoders$ipInfoDecoder),
			headers: _List_Nil,
			method: 'GET',
			timeout: $elm$core$Maybe$Nothing,
			tracker: $elm$core$Maybe$Nothing,
			url: A3(
				$elm$url$Url$Builder$crossOrigin,
				$author$project$MyIP$apiRoot,
				_List_fromArray(
					['json']),
				_List_Nil)
		});
};
var $author$project$GeoCodeDecoders$encodeLogInfo = function (record) {
	var data = $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'timestamp',
				$elm$json$Json$Encode$string(record.timestamp)),
				_Utils_Tuple2(
				'ip',
				$elm$json$Json$Encode$string(record.ip)),
				_Utils_Tuple2(
				'country',
				$elm$json$Json$Encode$string(record.country)),
				_Utils_Tuple2(
				'region',
				$elm$json$Json$Encode$string(record.region)),
				_Utils_Tuple2(
				'city',
				$elm$json$Json$Encode$string(record.city)),
				_Utils_Tuple2(
				'zip',
				$elm$json$Json$Encode$string(record.zip)),
				_Utils_Tuple2(
				'lat',
				$elm$json$Json$Encode$float(record.latitude)),
				_Utils_Tuple2(
				'lon',
				$elm$json$Json$Encode$float(record.longitude))
			]));
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'table',
				$elm$json$Json$Encode$string('GPXmagicV3')),
				_Utils_Tuple2('record', data)
			]));
};
var $elm$http$Http$expectBytesResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'arraybuffer',
			_Http_toDataView,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$expectWhatever = function (toMsg) {
	return A2(
		$elm$http$Http$expectBytesResponse,
		toMsg,
		$elm$http$Http$resolve(
			function (_v0) {
				return $elm$core$Result$Ok(_Utils_Tuple0);
			}));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromMonth = function (month) {
	switch (month.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString = F2(
	function (digits, time) {
		return A3(
			$elm$core$String$padLeft,
			digits,
			_Utils_chr('0'),
			$elm$core$String$fromInt(time));
	});
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromTime = function (time) {
	return A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		4,
		A2($elm$time$Time$toYear, $elm$time$Time$utc, time)) + ('-' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		$rtfeldman$elm_iso8601_date_strings$Iso8601$fromMonth(
			A2($elm$time$Time$toMonth, $elm$time$Time$utc, time))) + ('-' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2($elm$time$Time$toDay, $elm$time$Time$utc, time)) + ('T' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2($elm$time$Time$toHour, $elm$time$Time$utc, time)) + (':' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2($elm$time$Time$toMinute, $elm$time$Time$utc, time)) + (':' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2($elm$time$Time$toSecond, $elm$time$Time$utc, time)) + ('.' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		3,
		A2($elm$time$Time$toMillis, $elm$time$Time$utc, time)) + 'Z'))))))))))));
};
var $elm$http$Http$Header = F2(
	function (a, b) {
		return {$: 'Header', a: a, b: b};
	});
var $elm$http$Http$header = $elm$http$Http$Header;
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $author$project$MyIP$loggerRoot = 'https://api.m3o.com';
var $author$project$M3O$m3O_API_TOKEN = 'NzIyM2VjMzAtMTlkYS00MzNmLWE3NWEtNDdjZjRiMGE1ZGQ1';
var $author$project$MyIP$sendIpInfo = F3(
	function (time, msg, ipInfo) {
		if (ipInfo.$ === 'Just') {
			var info = ipInfo.a;
			var logInfo = {
				city: info.city,
				country: info.country,
				ip: info.ip,
				latitude: info.latitude,
				longitude: info.longitude,
				region: info.region,
				timestamp: A2(
					$elm$core$String$left,
					10,
					$rtfeldman$elm_iso8601_date_strings$Iso8601$fromTime(time)),
				zip: info.zip
			};
			return $elm$http$Http$request(
				{
					body: $elm$http$Http$jsonBody(
						$author$project$GeoCodeDecoders$encodeLogInfo(logInfo)),
					expect: $elm$http$Http$expectWhatever(msg),
					headers: _List_fromArray(
						[
							A2($elm$http$Http$header, 'Authorization', 'Bearer ' + $author$project$M3O$m3O_API_TOKEN)
						]),
					method: 'POST',
					timeout: $elm$core$Maybe$Nothing,
					tracker: $elm$core$Maybe$Nothing,
					url: A3(
						$elm$url$Url$Builder$crossOrigin,
						$author$project$MyIP$loggerRoot,
						_List_fromArray(
							['v1', 'db', 'Create']),
						_List_Nil)
				});
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$Main$showTrackOnMapCentered = function (track) {
	return $elm$core$Platform$Cmd$batch(
		_List_fromArray(
			[
				$author$project$MapPortController$addTrackToMap(track),
				$author$project$MapPortController$centreMapOnCurrent(track),
				$author$project$MapPortController$addMarkersToMap(track)
			]));
};
var $elm$file$File$Download$string = F3(
	function (name, mime, content) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$never,
			A3(_File_download, name, mime, content));
	});
var $elm$file$File$toString = _File_toString;
var $elm$core$String$toUpper = _String_toUpper;
var $author$project$Actions$DelayMessage = F2(
	function (a, b) {
		return {$: 'DelayMessage', a: a, b: b};
	});
var $author$project$Actions$MapCenterOnCurrent = {$: 'MapCenterOnCurrent'};
var $author$project$PaneLayoutManager$MapViewMessage = function (a) {
	return {$: 'MapViewMessage', a: a};
};
var $author$project$Actions$NoAction = {$: 'NoAction'};
var $author$project$PaneLayoutManager$PlanViewMessage = F2(
	function (a, b) {
		return {$: 'PlanViewMessage', a: a, b: b};
	});
var $author$project$PaneLayoutManager$ProfileViewMessage = F2(
	function (a, b) {
		return {$: 'ProfileViewMessage', a: a, b: b};
	});
var $author$project$Actions$SetCurrent = function (a) {
	return {$: 'SetCurrent', a: a};
};
var $author$project$PaneLayoutManager$SliderMoved = {$: 'SliderMoved'};
var $author$project$PaneLayoutManager$SliderTimeout = {$: 'SliderTimeout'};
var $author$project$PaneLayoutManager$SliderWaitingForTimeout = {$: 'SliderWaitingForTimeout'};
var $author$project$PaneLayoutManager$ThirdPersonViewMessage = F2(
	function (a, b) {
		return {$: 'ThirdPersonViewMessage', a: a, b: b};
	});
var $ianmackenzie$elm_units$Quantity$toFloatQuantity = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(value);
};
var $ianmackenzie$elm_units$Quantity$truncate = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(value | 0);
};
var $author$project$PaneLayoutManager$takeHalf = function (qty) {
	return $ianmackenzie$elm_units$Quantity$truncate(
		$ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(qty)));
};
var $author$project$PaneLayoutManager$dimensionsWithLayout = F2(
	function (layout, _v0) {
		var w = _v0.a;
		var h = _v0.b;
		switch (layout.$) {
			case 'PanesOne':
				return _Utils_Tuple2(w, h);
			case 'PanesLeftRight':
				return _Utils_Tuple2(
					$author$project$PaneLayoutManager$takeHalf(w),
					h);
			case 'PanesUpperLower':
				return _Utils_Tuple2(
					w,
					A2(
						$ianmackenzie$elm_units$Quantity$minus,
						$ianmackenzie$elm_units$Pixels$pixels(20),
						$author$project$PaneLayoutManager$takeHalf(h)));
			case 'PanesOnePlusTwo':
				return _Utils_Tuple2(w, h);
			default:
				return _Utils_Tuple2(
					$author$project$PaneLayoutManager$takeHalf(w),
					A2(
						$ianmackenzie$elm_units$Quantity$minus,
						$ianmackenzie$elm_units$Pixels$pixels(20),
						$author$project$PaneLayoutManager$takeHalf(h)));
		}
	});
var $author$project$PaneLayoutManager$encodePaneId = function (paneId) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$PaneLayoutManager$Pane1, 'pane1'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.a, paneId);
			},
			$author$project$PaneLayoutManager$paneIdHelper)).b;
};
var $author$project$PaneLayoutManager$encodeView = function (view) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$PaneLayoutManager$ViewInfo, 'info'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.a, view);
			},
			$author$project$PaneLayoutManager$viewHelper)).b;
};
var $author$project$PaneLayoutManager$encodeOnePane = function (pane) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'paneid',
				$elm$json$Json$Encode$string(
					$author$project$PaneLayoutManager$encodePaneId(pane.paneId))),
				_Utils_Tuple2(
				'activeView',
				$elm$json$Json$Encode$string(
					$author$project$PaneLayoutManager$encodeView(pane.activeView)))
			]));
};
var $author$project$PaneLayoutManager$encodePanesLayout = function (layout) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$PaneLayoutManager$PanesOne, 'One'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.a, layout);
			},
			$author$project$PaneLayoutManager$paneLayoutHelper)).b;
};
var $author$project$PaneLayoutManager$encodePaneState = function (options) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'layout',
				$elm$json$Json$Encode$string(
					$author$project$PaneLayoutManager$encodePanesLayout(options.paneLayout))),
				_Utils_Tuple2(
				'pane1',
				$author$project$PaneLayoutManager$encodeOnePane(options.pane1)),
				_Utils_Tuple2(
				'pane2',
				$author$project$PaneLayoutManager$encodeOnePane(options.pane2)),
				_Utils_Tuple2(
				'pane3',
				$author$project$PaneLayoutManager$encodeOnePane(options.pane3)),
				_Utils_Tuple2(
				'pane4',
				$author$project$PaneLayoutManager$encodeOnePane(options.pane4))
			]));
};
var $author$project$Actions$SetCurrentFromMapClick = function (a) {
	return {$: 'SetCurrentFromMapClick', a: a};
};
var $author$project$Actions$PointMovedOnMap = F4(
	function (a, b, c, d) {
		return {$: 'PointMovedOnMap', a: a, b: b, c: c, d: d};
	});
var $author$project$MapPortController$draggedOnMap = F2(
	function (json, track) {
		var lon2 = A2(
			$elm$json$Json$Decode$decodeValue,
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['end', 'lng']),
				$elm$json$Json$Decode$float),
			json);
		var lon1 = A2(
			$elm$json$Json$Decode$decodeValue,
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['start', 'lng']),
				$elm$json$Json$Decode$float),
			json);
		var lat2 = A2(
			$elm$json$Json$Decode$decodeValue,
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['end', 'lat']),
				$elm$json$Json$Decode$float),
			json);
		var lat1 = A2(
			$elm$json$Json$Decode$decodeValue,
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['start', 'lat']),
				$elm$json$Json$Decode$float),
			json);
		var _v0 = _Utils_Tuple2(
			_Utils_Tuple2(lon1, lat1),
			_Utils_Tuple2(lon2, lat2));
		if ((((_v0.a.a.$ === 'Ok') && (_v0.a.b.$ === 'Ok')) && (_v0.b.a.$ === 'Ok')) && (_v0.b.b.$ === 'Ok')) {
			var _v1 = _v0.a;
			var startLon = _v1.a.a;
			var startLat = _v1.b.a;
			var _v2 = _v0.b;
			var endLon = _v2.a.a;
			var endLat = _v2.b.a;
			return _List_fromArray(
				[
					A4($author$project$Actions$PointMovedOnMap, startLon, startLat, endLon, endLat),
					$author$project$Actions$TrackHasChanged
				]);
		} else {
			return _List_Nil;
		}
	});
var $author$project$MapPortController$msgDecoder = A2($elm$json$Json$Decode$field, 'msg', $elm$json$Json$Decode$string);
var $author$project$MapPortController$processMapPortMessage = F3(
	function (lastState, track, json) {
		var jsonMsg = A2($elm$json$Json$Decode$decodeValue, $author$project$MapPortController$msgDecoder, json);
		var _v0 = _Utils_Tuple2(
			A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$field, 'lat', $elm$json$Json$Decode$float),
				json),
			A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$field, 'lon', $elm$json$Json$Decode$float),
				json));
		var lat = _v0.a;
		var lon = _v0.b;
		_v1$2:
		while (true) {
			if (jsonMsg.$ === 'Ok') {
				switch (jsonMsg.a) {
					case 'click':
						var _v2 = _Utils_Tuple2(lat, lon);
						if ((_v2.a.$ === 'Ok') && (_v2.b.$ === 'Ok')) {
							var lat1 = _v2.a.a;
							var lon1 = _v2.b.a;
							if (_Utils_eq(lat1, lastState.lastClickLat) && _Utils_eq(lon1, lastState.lastClickLon)) {
								return _Utils_Tuple2(lastState, _List_Nil);
							} else {
								var gpxPoint = {
									altitude: $ianmackenzie$elm_units$Length$meters(0.0),
									latitude: $ianmackenzie$elm_units$Angle$degrees(lat1),
									longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
										$ianmackenzie$elm_units$Angle$degrees(lon1))
								};
								var index = A3($author$project$DomainModel$nearestToLonLat, gpxPoint, track.currentPosition, track.trackTree);
								return _Utils_Tuple2(
									_Utils_update(
										lastState,
										{lastClickLat: lat1, lastClickLon: lon1}),
									_List_fromArray(
										[
											$author$project$Actions$SetCurrentFromMapClick(index),
											$author$project$Actions$TrackHasChanged
										]));
							}
						} else {
							return _Utils_Tuple2(lastState, _List_Nil);
						}
					case 'drag':
						return _Utils_Tuple2(
							lastState,
							A2($author$project$MapPortController$draggedOnMap, json, track));
					default:
						break _v1$2;
				}
			} else {
				break _v1$2;
			}
		}
		return _Utils_Tuple2(lastState, _List_Nil);
	});
var $author$project$MapPortController$update = F3(
	function (mapMsg, track, lastState) {
		var value = mapMsg.a;
		return A3($author$project$MapPortController$processMapPortMessage, lastState, track, value);
	});
var $author$project$Actions$MakeMapPointsDraggable = function (a) {
	return {$: 'MakeMapPointsDraggable', a: a};
};
var $author$project$ViewMap$update = F5(
	function (msg, msgWrapper, track, area, context) {
		if (msg.$ === 'ToggleFollowOrange') {
			return _Utils_Tuple2(
				_Utils_update(
					context,
					{followOrange: !context.followOrange}),
				_List_Nil);
		} else {
			var newOptions = _Utils_update(
				context,
				{draggable: !context.draggable});
			return _Utils_Tuple2(
				newOptions,
				_List_fromArray(
					[
						$author$project$Actions$MakeMapPointsDraggable(newOptions.draggable)
					]));
		}
	});
var $author$project$ViewPlan$ClickDelayExpired = {$: 'ClickDelayExpired'};
var $author$project$ViewPlan$DragPan = {$: 'DragPan'};
var $author$project$DomainModel$effectiveLatitude = function (treeNode) {
	return $author$project$DomainModel$sourceData(treeNode).a.latitude;
};
var $ianmackenzie$elm_3d_camera$Camera3d$Types$Viewpoint3d = function (a) {
	return {$: 'Viewpoint3d', a: a};
};
var $ianmackenzie$elm_geometry$Vector3d$dot = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(((v1.x * v2.x) + (v1.y * v2.y)) + (v1.z * v2.z));
	});
var $ianmackenzie$elm_geometry$Vector3d$reverse = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
		{x: -v.x, y: -v.y, z: -v.z});
};
var $ianmackenzie$elm_geometry$Direction3d$orthonormalize = F3(
	function (xVector, xyVector, xyzVector) {
		return A2(
			$elm$core$Maybe$andThen,
			function (xDirection) {
				var yVector = A2(
					$ianmackenzie$elm_geometry$Vector3d$minus,
					A2($ianmackenzie$elm_geometry$Vector3d$projectionIn, xDirection, xyVector),
					xyVector);
				return A2(
					$elm$core$Maybe$andThen,
					function (yDirection) {
						var rightHandedZVector = A2($ianmackenzie$elm_geometry$Vector3d$cross, xyVector, xVector);
						var tripleProduct = A2($ianmackenzie$elm_geometry$Vector3d$dot, xyzVector, rightHandedZVector);
						var zVector = A2($ianmackenzie$elm_units$Quantity$greaterThan, $ianmackenzie$elm_units$Quantity$zero, tripleProduct) ? rightHandedZVector : (A2($ianmackenzie$elm_units$Quantity$lessThan, $ianmackenzie$elm_units$Quantity$zero, tripleProduct) ? $ianmackenzie$elm_geometry$Vector3d$reverse(rightHandedZVector) : $ianmackenzie$elm_geometry$Vector3d$zero);
						return A2(
							$elm$core$Maybe$map,
							function (zDirection) {
								return _Utils_Tuple3(xDirection, yDirection, zDirection);
							},
							$ianmackenzie$elm_geometry$Vector3d$direction(zVector));
					},
					$ianmackenzie$elm_geometry$Vector3d$direction(yVector));
			},
			$ianmackenzie$elm_geometry$Vector3d$direction(xVector));
	});
var $ianmackenzie$elm_geometry$Direction3d$toVector = function (_v0) {
	var directionComponents = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(directionComponents);
};
var $ianmackenzie$elm_geometry$Geometry$Types$Frame3d = function (a) {
	return {$: 'Frame3d', a: a};
};
var $ianmackenzie$elm_geometry$Frame3d$unsafe = function (properties) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Frame3d(properties);
};
var $ianmackenzie$elm_geometry$Frame3d$withZDirection = F2(
	function (givenZDirection, givenOrigin) {
		var _v0 = $ianmackenzie$elm_geometry$Direction3d$perpendicularBasis(givenZDirection);
		var computedXDirection = _v0.a;
		var computedYDirection = _v0.b;
		return $ianmackenzie$elm_geometry$Frame3d$unsafe(
			{originPoint: givenOrigin, xDirection: computedXDirection, yDirection: computedYDirection, zDirection: givenZDirection});
	});
var $ianmackenzie$elm_3d_camera$Viewpoint3d$lookAt = function (_arguments) {
	var zVector = A2($ianmackenzie$elm_geometry$Vector3d$from, _arguments.focalPoint, _arguments.eyePoint);
	var yVector = $ianmackenzie$elm_geometry$Direction3d$toVector(_arguments.upDirection);
	var xVector = A2($ianmackenzie$elm_geometry$Vector3d$cross, zVector, yVector);
	var _v0 = A3($ianmackenzie$elm_geometry$Direction3d$orthonormalize, zVector, yVector, xVector);
	if (_v0.$ === 'Just') {
		var _v1 = _v0.a;
		var normalizedZDirection = _v1.a;
		var normalizedYDirection = _v1.b;
		var normalizedXDirection = _v1.c;
		return $ianmackenzie$elm_3d_camera$Camera3d$Types$Viewpoint3d(
			$ianmackenzie$elm_geometry$Frame3d$unsafe(
				{originPoint: _arguments.eyePoint, xDirection: normalizedXDirection, yDirection: normalizedYDirection, zDirection: normalizedZDirection}));
	} else {
		var _v2 = $ianmackenzie$elm_geometry$Vector3d$direction(zVector);
		if (_v2.$ === 'Just') {
			var zDirection = _v2.a;
			return $ianmackenzie$elm_3d_camera$Camera3d$Types$Viewpoint3d(
				A2($ianmackenzie$elm_geometry$Frame3d$withZDirection, zDirection, _arguments.eyePoint));
		} else {
			var _v3 = $ianmackenzie$elm_geometry$Direction3d$perpendicularBasis(_arguments.upDirection);
			var arbitraryZDirection = _v3.a;
			var arbitraryXDirection = _v3.b;
			return $ianmackenzie$elm_3d_camera$Camera3d$Types$Viewpoint3d(
				$ianmackenzie$elm_geometry$Frame3d$unsafe(
					{originPoint: _arguments.eyePoint, xDirection: arbitraryXDirection, yDirection: _arguments.upDirection, zDirection: arbitraryZDirection}));
		}
	}
};
var $author$project$Spherical$metresPerPixelAtEquatorZoomZero = 78271.484;
var $author$project$Spherical$metresPerPixel = F2(
	function (zoomLevel, latitude) {
		return ($ianmackenzie$elm_units$Angle$cos(latitude) * $author$project$Spherical$metresPerPixelAtEquatorZoomZero) / A2($elm$core$Basics$pow, 2.0, zoomLevel);
	});
var $ianmackenzie$elm_3d_camera$Camera3d$Types$Camera3d = function (a) {
	return {$: 'Camera3d', a: a};
};
var $ianmackenzie$elm_3d_camera$Camera3d$Types$Orthographic = function (a) {
	return {$: 'Orthographic', a: a};
};
var $ianmackenzie$elm_3d_camera$Camera3d$orthographic = function (_arguments) {
	return $ianmackenzie$elm_3d_camera$Camera3d$Types$Camera3d(
		{
			projection: $ianmackenzie$elm_3d_camera$Camera3d$Types$Orthographic(
				$ianmackenzie$elm_units$Quantity$abs(_arguments.viewportHeight)),
			viewpoint: _arguments.viewpoint
		});
};
var $author$project$ViewPlan$deriveCamera = F3(
	function (treeNode, context, currentPosition) {
		var lookingAt = context.followSelectedPoint ? $author$project$DomainModel$startPoint(
			A2($author$project$DomainModel$leafFromIndex, currentPosition, treeNode)) : context.focalPoint;
		var latitude = $author$project$DomainModel$effectiveLatitude(
			A2($author$project$DomainModel$leafFromIndex, currentPosition, treeNode));
		var eyePoint = A2(
			$ianmackenzie$elm_geometry$Point3d$translateBy,
			A3($ianmackenzie$elm_geometry$Vector3d$meters, 0.0, 0.0, 5000.0),
			lookingAt);
		var viewpoint = $ianmackenzie$elm_3d_camera$Viewpoint3d$lookAt(
			{eyePoint: eyePoint, focalPoint: lookingAt, upDirection: $ianmackenzie$elm_geometry$Direction3d$positiveY});
		return $ianmackenzie$elm_3d_camera$Camera3d$orthographic(
			{
				viewpoint: viewpoint,
				viewportHeight: $ianmackenzie$elm_units$Length$meters(
					1200.0 * A2($author$project$Spherical$metresPerPixel, context.zoomLevel, latitude))
			});
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Rectangle2d = function (a) {
	return {$: 'Rectangle2d', a: a};
};
var $ianmackenzie$elm_units$Quantity$midpoint = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(x + (0.5 * (y - x)));
	});
var $ianmackenzie$elm_geometry$Direction2d$negativeX = $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
	{x: -1, y: 0});
var $ianmackenzie$elm_geometry$Direction2d$positiveY = $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
	{x: 0, y: 1});
var $ianmackenzie$elm_geometry$Geometry$Types$Frame2d = function (a) {
	return {$: 'Frame2d', a: a};
};
var $ianmackenzie$elm_geometry$Frame2d$unsafe = function (properties) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Frame2d(properties);
};
var $ianmackenzie$elm_geometry$Rectangle2d$axisAligned = F4(
	function (x1, y1, x2, y2) {
		var computedYDirection = A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, y1, y2) ? $ianmackenzie$elm_geometry$Direction2d$positiveY : $ianmackenzie$elm_geometry$Direction2d$negativeY;
		var computedXDirection = A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, x1, x2) ? $ianmackenzie$elm_geometry$Direction2d$positiveX : $ianmackenzie$elm_geometry$Direction2d$negativeX;
		var computedDimensions = _Utils_Tuple2(
			$ianmackenzie$elm_units$Quantity$abs(
				A2($ianmackenzie$elm_units$Quantity$minus, x1, x2)),
			$ianmackenzie$elm_units$Quantity$abs(
				A2($ianmackenzie$elm_units$Quantity$minus, y1, y2)));
		var computedCenterPoint = A2(
			$ianmackenzie$elm_geometry$Point2d$xy,
			A2($ianmackenzie$elm_units$Quantity$midpoint, x1, x2),
			A2($ianmackenzie$elm_units$Quantity$midpoint, y1, y2));
		var computedAxes = $ianmackenzie$elm_geometry$Frame2d$unsafe(
			{originPoint: computedCenterPoint, xDirection: computedXDirection, yDirection: computedYDirection});
		return $ianmackenzie$elm_geometry$Geometry$Types$Rectangle2d(
			{axes: computedAxes, dimensions: computedDimensions});
	});
var $ianmackenzie$elm_geometry$Rectangle2d$from = F2(
	function (p1, p2) {
		return A4(
			$ianmackenzie$elm_geometry$Rectangle2d$axisAligned,
			$ianmackenzie$elm_geometry$Point2d$xCoordinate(p1),
			$ianmackenzie$elm_geometry$Point2d$yCoordinate(p1),
			$ianmackenzie$elm_geometry$Point2d$xCoordinate(p2),
			$ianmackenzie$elm_geometry$Point2d$yCoordinate(p2));
	});
var $ianmackenzie$elm_geometry$Sphere3d$centerPoint = function (_v0) {
	var properties = _v0.a;
	return properties.centerPoint;
};
var $ianmackenzie$elm_geometry$Point3d$distanceFromAxis = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var p = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var deltaX = p.x - p0.x;
		var deltaY = p.y - p0.y;
		var deltaZ = p.z - p0.z;
		var _v3 = axis.direction;
		var d = _v3.a;
		var projection = ((deltaX * d.x) + (deltaY * d.y)) + (deltaZ * d.z);
		var perpX = deltaX - (projection * d.x);
		var perpY = deltaY - (projection * d.y);
		var perpZ = deltaZ - (projection * d.z);
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(perpX),
			A2(
				$elm$core$Basics$max,
				$elm$core$Basics$abs(perpY),
				$elm$core$Basics$abs(perpZ)));
		if (!largestComponent) {
			return $ianmackenzie$elm_units$Quantity$zero;
		} else {
			var scaledZ = perpZ / largestComponent;
			var scaledY = perpY / largestComponent;
			var scaledX = perpX / largestComponent;
			var scaledDistance = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
			return $ianmackenzie$elm_units$Quantity$Quantity(scaledDistance * largestComponent);
		}
	});
var $ianmackenzie$elm_geometry$Vector3d$componentIn = F2(
	function (_v0, _v1) {
		var d = _v0.a;
		var v = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(((v.x * d.x) + (v.y * d.y)) + (v.z * d.z));
	});
var $ianmackenzie$elm_geometry$Axis3d$originPoint = function (_v0) {
	var axis = _v0.a;
	return axis.originPoint;
};
var $ianmackenzie$elm_geometry$Axis3d$intersectionWithSphere = F2(
	function (_v0, axis) {
		var centerPoint = _v0.a.centerPoint;
		var radius = _v0.a.radius;
		var axisOrigin = $ianmackenzie$elm_geometry$Axis3d$originPoint(axis);
		var circleCenterToOrigin = A2($ianmackenzie$elm_geometry$Vector3d$from, centerPoint, axisOrigin);
		var axisDirection = $ianmackenzie$elm_geometry$Axis3d$direction(axis);
		var _v1 = radius;
		var r = _v1.a;
		var _v2 = A2($ianmackenzie$elm_geometry$Vector3d$componentIn, axisDirection, circleCenterToOrigin);
		var dotProduct = _v2.a;
		var _v3 = circleCenterToOrigin;
		var cto = _v3.a;
		var ctoLengthSquared = (A2($elm$core$Basics$pow, cto.x, 2) + A2($elm$core$Basics$pow, cto.y, 2)) + A2($elm$core$Basics$pow, cto.z, 2);
		var inRoot = (A2($elm$core$Basics$pow, dotProduct, 2) - ctoLengthSquared) + A2($elm$core$Basics$pow, r, 2);
		if (inRoot < 0) {
			return $elm$core$Maybe$Nothing;
		} else {
			var d2 = (-dotProduct) + $elm$core$Basics$sqrt(inRoot);
			var d1 = (-dotProduct) - $elm$core$Basics$sqrt(inRoot);
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					A2(
						$ianmackenzie$elm_geometry$Point3d$along,
						axis,
						$ianmackenzie$elm_units$Quantity$Quantity(d1)),
					A2(
						$ianmackenzie$elm_geometry$Point3d$along,
						axis,
						$ianmackenzie$elm_units$Quantity$Quantity(d2))));
		}
	});
var $ianmackenzie$elm_geometry$Sphere3d$radius = function (_v0) {
	var properties = _v0.a;
	return properties.radius;
};
var $author$project$DomainModel$sphere = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).sphere;
};
var $author$project$DomainModel$nearestToRay = F2(
	function (ray, treeNode) {
		var helper = F2(
			function (withNode, skip) {
				helper:
				while (true) {
					if (withNode.$ === 'Leaf') {
						var leaf = withNode.a;
						var startDistance = A2($ianmackenzie$elm_geometry$Point3d$distanceFromAxis, ray, leaf.startPoint);
						var endDistance = A2($ianmackenzie$elm_geometry$Point3d$distanceFromAxis, ray, leaf.endPoint);
						return A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, endDistance, startDistance) ? _Utils_Tuple2(skip, startDistance) : _Utils_Tuple2(skip + 1, endDistance);
					} else {
						var node = withNode.a;
						var rightDistance = A2(
							$ianmackenzie$elm_units$Quantity$minus,
							$ianmackenzie$elm_geometry$Sphere3d$radius(
								$author$project$DomainModel$sphere(node.right)),
							A2(
								$ianmackenzie$elm_geometry$Point3d$distanceFromAxis,
								ray,
								$ianmackenzie$elm_geometry$Sphere3d$centerPoint(
									$author$project$DomainModel$sphere(node.right))));
						var leftDistance = A2(
							$ianmackenzie$elm_units$Quantity$minus,
							$ianmackenzie$elm_geometry$Sphere3d$radius(
								$author$project$DomainModel$sphere(node.left)),
							A2(
								$ianmackenzie$elm_geometry$Point3d$distanceFromAxis,
								ray,
								$ianmackenzie$elm_geometry$Sphere3d$centerPoint(
									$author$project$DomainModel$sphere(node.left))));
						var _v1 = _Utils_Tuple2(
							!_Utils_eq(
								A2(
									$ianmackenzie$elm_geometry$Axis3d$intersectionWithSphere,
									$author$project$DomainModel$sphere(node.left),
									ray),
								$elm$core$Maybe$Nothing),
							!_Utils_eq(
								A2(
									$ianmackenzie$elm_geometry$Axis3d$intersectionWithSphere,
									$author$project$DomainModel$sphere(node.right),
									ray),
								$elm$core$Maybe$Nothing));
						var leftIntersects = _v1.a;
						var rightIntersects = _v1.b;
						var _v2 = _Utils_Tuple2(leftIntersects, rightIntersects);
						if (_v2.a) {
							if (_v2.b) {
								var _v3 = A2(
									helper,
									node.right,
									skip + $author$project$DomainModel$skipCount(node.left));
								var rightBestIndex = _v3.a;
								var rightBestDistance = _v3.b;
								var _v4 = A2(helper, node.left, skip);
								var leftBestIndex = _v4.a;
								var leftBestDistance = _v4.b;
								return A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, rightBestDistance, leftBestDistance) ? _Utils_Tuple2(leftBestIndex, leftBestDistance) : _Utils_Tuple2(rightBestIndex, rightBestDistance);
							} else {
								var $temp$withNode = node.left,
									$temp$skip = skip;
								withNode = $temp$withNode;
								skip = $temp$skip;
								continue helper;
							}
						} else {
							if (_v2.b) {
								var $temp$withNode = node.right,
									$temp$skip = skip + $author$project$DomainModel$skipCount(node.left);
								withNode = $temp$withNode;
								skip = $temp$skip;
								continue helper;
							} else {
								if (A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, rightDistance, leftDistance)) {
									var $temp$withNode = node.left,
										$temp$skip = skip;
									withNode = $temp$withNode;
									skip = $temp$skip;
									continue helper;
								} else {
									var $temp$withNode = node.right,
										$temp$skip = skip + $author$project$DomainModel$skipCount(node.left);
									withNode = $temp$withNode;
									skip = $temp$skip;
									continue helper;
								}
							}
						}
					}
				}
			});
		return A2(helper, treeNode, 0).a;
	});
var $ianmackenzie$elm_geometry$Point2d$pixels = F2(
	function (x, y) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: x, y: y});
	});
var $ianmackenzie$elm_units$Quantity$at = F2(
	function (_v0, _v1) {
		var rateOfChange = _v0.a;
		var independentValue = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(rateOfChange * independentValue);
	});
var $ianmackenzie$elm_geometry$Frame2d$copy = function (_v0) {
	var properties = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Frame2d(properties);
};
var $ianmackenzie$elm_geometry$Rectangle2d$axes = function (_v0) {
	var rectangle = _v0.a;
	return $ianmackenzie$elm_geometry$Frame2d$copy(rectangle.axes);
};
var $ianmackenzie$elm_geometry$Rectangle2d$dimensions = function (_v0) {
	var rectangle = _v0.a;
	return rectangle.dimensions;
};
var $ianmackenzie$elm_geometry$Frame3d$originPoint = function (_v0) {
	var properties = _v0.a;
	return properties.originPoint;
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$eyePoint = function (_v0) {
	var frame = _v0.a;
	return $ianmackenzie$elm_geometry$Frame3d$originPoint(frame);
};
var $ianmackenzie$elm_geometry$Direction3d$negativeZ = $ianmackenzie$elm_geometry$Direction3d$unsafe(
	{x: 0, y: 0, z: -1});
var $ianmackenzie$elm_units$Quantity$per = F2(
	function (_v0, _v1) {
		var independentValue = _v0.a;
		var dependentValue = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(dependentValue / independentValue);
	});
var $ianmackenzie$elm_geometry$Direction3d$placeIn = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var d = _v1.a;
		var _v2 = frame.zDirection;
		var k = _v2.a;
		var _v3 = frame.yDirection;
		var j = _v3.a;
		var _v4 = frame.xDirection;
		var i = _v4.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
			{x: ((i.x * d.x) + (j.x * d.y)) + (k.x * d.z), y: ((i.y * d.x) + (j.y * d.y)) + (k.y * d.z), z: ((i.z * d.x) + (j.z * d.y)) + (k.z * d.z)});
	});
var $ianmackenzie$elm_geometry$Direction3d$reverse = function (_v0) {
	var d = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
		{x: -d.x, y: -d.y, z: -d.z});
};
var $ianmackenzie$elm_geometry$Frame3d$zDirection = function (_v0) {
	var properties = _v0.a;
	return properties.zDirection;
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$viewDirection = function (_v0) {
	var frame = _v0.a;
	return $ianmackenzie$elm_geometry$Direction3d$reverse(
		$ianmackenzie$elm_geometry$Frame3d$zDirection(frame));
};
var $ianmackenzie$elm_geometry$Point2d$xCoordinateIn = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var p = _v1.a;
		var _v2 = frame.originPoint;
		var p0 = _v2.a;
		var _v3 = frame.xDirection;
		var d = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y));
	});
var $ianmackenzie$elm_geometry$Point3d$xyzIn = F4(
	function (_v0, _v1, _v2, _v3) {
		var frame = _v0.a;
		var x = _v1.a;
		var y = _v2.a;
		var z = _v3.a;
		var _v4 = frame.originPoint;
		var p0 = _v4.a;
		var _v5 = frame.zDirection;
		var k = _v5.a;
		var _v6 = frame.yDirection;
		var j = _v6.a;
		var _v7 = frame.xDirection;
		var i = _v7.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: ((p0.x + (x * i.x)) + (y * j.x)) + (z * k.x), y: ((p0.y + (x * i.y)) + (y * j.y)) + (z * k.y), z: ((p0.z + (x * i.z)) + (y * j.z)) + (z * k.z)});
	});
var $ianmackenzie$elm_geometry$Point2d$yCoordinateIn = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var p = _v1.a;
		var _v2 = frame.originPoint;
		var p0 = _v2.a;
		var _v3 = frame.yDirection;
		var d = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y));
	});
var $ianmackenzie$elm_3d_camera$Camera3d$ray = F3(
	function (_v0, screen, point) {
		var camera = _v0.a;
		var screenY = A2(
			$ianmackenzie$elm_geometry$Point2d$yCoordinateIn,
			$ianmackenzie$elm_geometry$Rectangle2d$axes(screen),
			point);
		var screenX = A2(
			$ianmackenzie$elm_geometry$Point2d$xCoordinateIn,
			$ianmackenzie$elm_geometry$Rectangle2d$axes(screen),
			point);
		var _v1 = camera.viewpoint;
		var viewpointFrame = _v1.a;
		var _v2 = $ianmackenzie$elm_geometry$Rectangle2d$dimensions(screen);
		var screenWidth = _v2.a;
		var screenHeight = _v2.b;
		var _v3 = camera.projection;
		if (_v3.$ === 'Perspective') {
			var frustumSlope = _v3.a;
			var screenZ = $ianmackenzie$elm_units$Quantity$negate(
				A2(
					$ianmackenzie$elm_units$Quantity$divideBy,
					frustumSlope,
					A2($ianmackenzie$elm_units$Quantity$multiplyBy, 0.5, screenHeight)));
			var direction = A2(
				$ianmackenzie$elm_geometry$Direction3d$placeIn,
				viewpointFrame,
				A2(
					$elm$core$Maybe$withDefault,
					$ianmackenzie$elm_geometry$Direction3d$negativeZ,
					$ianmackenzie$elm_geometry$Vector3d$direction(
						A3($ianmackenzie$elm_geometry$Vector3d$xyz, screenX, screenY, screenZ))));
			return A2(
				$ianmackenzie$elm_geometry$Axis3d$through,
				$ianmackenzie$elm_3d_camera$Viewpoint3d$eyePoint(camera.viewpoint),
				direction);
		} else {
			var viewpointHeight = _v3.a;
			var resolution = A2($ianmackenzie$elm_units$Quantity$per, screenHeight, viewpointHeight);
			var origin = A4(
				$ianmackenzie$elm_geometry$Point3d$xyzIn,
				viewpointFrame,
				A2($ianmackenzie$elm_units$Quantity$at, resolution, screenX),
				A2($ianmackenzie$elm_units$Quantity$at, resolution, screenY),
				$ianmackenzie$elm_units$Quantity$zero);
			return A2(
				$ianmackenzie$elm_geometry$Axis3d$through,
				origin,
				$ianmackenzie$elm_3d_camera$Viewpoint3d$viewDirection(camera.viewpoint));
		}
	});
var $author$project$ViewPlan$detectHit = F4(
	function (event, track, _v0, context) {
		var w = _v0.a;
		var h = _v0.b;
		var camera = A3($author$project$ViewPlan$deriveCamera, track.trackTree, context, track.currentPosition);
		var _v1 = event.offsetPos;
		var x = _v1.a;
		var y = _v1.b;
		var screenPoint = A2($ianmackenzie$elm_geometry$Point2d$pixels, x, y);
		var _v2 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(w),
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(h));
		var wFloat = _v2.a;
		var hFloat = _v2.b;
		var screenRectangle = A2(
			$ianmackenzie$elm_geometry$Rectangle2d$from,
			A2($ianmackenzie$elm_geometry$Point2d$xy, $ianmackenzie$elm_units$Quantity$zero, hFloat),
			A2($ianmackenzie$elm_geometry$Point2d$xy, wFloat, $ianmackenzie$elm_units$Quantity$zero));
		var ray = A3($ianmackenzie$elm_3d_camera$Camera3d$ray, camera, screenRectangle, screenPoint);
		return A2($author$project$DomainModel$nearestToRay, ray, track.trackTree);
	});
var $author$project$ViewPlan$update = F5(
	function (msg, msgWrapper, track, area, context) {
		switch (msg.$) {
			case 'ImageGrab':
				var event = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							dragAction: $author$project$ViewPlan$DragPan,
							orbiting: $elm$core$Maybe$Just(event.offsetPos),
							waitingForClickDelay: true
						}),
					_List_fromArray(
						[
							A2(
							$author$project$Actions$DelayMessage,
							250,
							msgWrapper($author$project$ViewPlan$ClickDelayExpired))
						]));
			case 'ClickDelayExpired':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{waitingForClickDelay: false}),
					_List_Nil);
			case 'ImageDrag':
				var event = msg.a;
				var _v1 = event.offsetPos;
				var dx = _v1.a;
				var dy = _v1.b;
				var _v2 = _Utils_Tuple2(context.dragAction, context.orbiting);
				if ((_v2.a.$ === 'DragPan') && (_v2.b.$ === 'Just')) {
					var _v3 = _v2.a;
					var _v4 = _v2.b.a;
					var startX = _v4.a;
					var startY = _v4.b;
					var shiftVector = A2(
						$ianmackenzie$elm_geometry$Vector3d$scaleBy,
						1.0 * A2(
							$author$project$Spherical$metresPerPixel,
							context.zoomLevel,
							$ianmackenzie$elm_units$Angle$degrees(30)),
						A3($ianmackenzie$elm_geometry$Vector3d$meters, startX - dx, dy - startY, 0.0));
					return _Utils_Tuple2(
						_Utils_update(
							context,
							{
								focalPoint: A2($ianmackenzie$elm_geometry$Point3d$translateBy, shiftVector, context.focalPoint),
								orbiting: $elm$core$Maybe$Just(
									_Utils_Tuple2(dx, dy))
							}),
						_List_Nil);
				} else {
					return _Utils_Tuple2(context, _List_Nil);
				}
			case 'ImageRelease':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{dragAction: $author$project$ViewPlan$DragNone, orbiting: $elm$core$Maybe$Nothing}),
					_List_Nil);
			case 'ImageMouseWheel':
				var deltaY = msg.a;
				var increment = (-0.001) * deltaY;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel + increment)
						}),
					_List_Nil);
			case 'ImageClick':
				var event = msg.a;
				return context.waitingForClickDelay ? _Utils_Tuple2(
					context,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(
							A4($author$project$ViewPlan$detectHit, event, track, area, context)),
							$author$project$Actions$TrackHasChanged
						])) : _Utils_Tuple2(context, _List_Nil);
			case 'ImageDoubleClick':
				var event = msg.a;
				var nearestPoint = A4($author$project$ViewPlan$detectHit, event, track, area, context);
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							focalPoint: A2($author$project$DomainModel$earthPointFromIndex, nearestPoint, track.trackTree)
						}),
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(nearestPoint),
							$author$project$Actions$TrackHasChanged
						]));
			case 'ImageZoomIn':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel + 0.5)
						}),
					_List_Nil);
			case 'ImageZoomOut':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel - 0.5)
						}),
					_List_Nil);
			case 'ImageReset':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{zoomLevel: context.defaultZoomLevel}),
					_List_Nil);
			case 'ToggleFollowOrange':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							focalPoint: A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree),
							followSelectedPoint: !context.followSelectedPoint
						}),
					_List_Nil);
			default:
				return _Utils_Tuple2(context, _List_Nil);
		}
	});
var $author$project$ViewProfileCharts$ClickDelayExpired = {$: 'ClickDelayExpired'};
var $author$project$ViewProfileCharts$DragPan = {$: 'DragPan'};
var $author$project$ViewProfileCharts$update = F5(
	function (msg, msgWrapper, track, _v0, context) {
		var givenWidth = _v0.a;
		var givenHeight = _v0.b;
		var maxZoom = A2(
			$elm$core$Basics$logBase,
			2,
			$author$project$DomainModel$skipCount(track.trackTree)) - 2;
		var centre = $ianmackenzie$elm_geometry$BoundingBox3d$centerPoint(
			$author$project$DomainModel$boundingBox(track.trackTree));
		switch (msg.$) {
			case 'ImageZoomIn':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0, 10, context.zoomLevel + 0.5)
						}),
					_List_Nil);
			case 'ImageZoomOut':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0, 10, context.zoomLevel - 0.5)
						}),
					_List_Nil);
			case 'ImageReset':
				return _Utils_Tuple2(
					A3(
						$author$project$ViewProfileCharts$initialiseView,
						track.currentPosition,
						track.trackTree,
						$elm$core$Maybe$Just(context)),
					_List_Nil);
			case 'ImageNoOp':
				return _Utils_Tuple2(context, _List_Nil);
			case 'ImageClick':
				var point = msg.a;
				if (point.$ === 'Just') {
					var isPoint = point.a;
					return _Utils_Tuple2(
						context,
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(
								A2(
									$author$project$DomainModel$indexFromDistance,
									$ianmackenzie$elm_units$Length$meters(isPoint.x),
									track.trackTree))
							]));
				} else {
					return _Utils_Tuple2(context, _List_Nil);
				}
			case 'ClickDelayExpired':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{waitingForClickDelay: false}),
					_List_Nil);
			case 'ImageMouseWheel':
				var deltaY = msg.a;
				var increment = (-0.001) * deltaY;
				var zoomLevel = A3($elm$core$Basics$clamp, 0, maxZoom, context.zoomLevel + increment);
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{zoomLevel: zoomLevel}),
					_List_Nil);
			case 'ImageGrab':
				var zone = msg.a;
				var event = msg.b;
				var newContext = _Utils_update(
					context,
					{
						dragAction: $author$project$ViewProfileCharts$DragPan,
						orbiting: $elm$core$Maybe$Just(event.offsetPos),
						waitingForClickDelay: true
					});
				return _Utils_Tuple2(
					newContext,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$DelayMessage,
							250,
							msgWrapper($author$project$ViewProfileCharts$ClickDelayExpired))
						]));
			case 'ImageDrag':
				var zone = msg.a;
				var event = msg.b;
				var _v3 = event.offsetPos;
				var dx = _v3.a;
				var dy = _v3.b;
				var _v4 = _Utils_Tuple2(context.dragAction, context.orbiting);
				if ((_v4.a.$ === 'DragPan') && (_v4.b.$ === 'Just')) {
					var _v5 = _v4.a;
					var _v6 = _v4.b.a;
					var startX = _v6.a;
					var startY = _v6.b;
					var shiftVector = A3($ianmackenzie$elm_geometry$Vector3d$meters, (startX - dx) * context.metresPerPixel, 0, 0);
					var newContext = _Utils_update(
						context,
						{
							focalPoint: A2($ianmackenzie$elm_geometry$Point3d$translateBy, shiftVector, context.focalPoint),
							orbiting: $elm$core$Maybe$Just(
								_Utils_Tuple2(dx, dy))
						});
					return _Utils_Tuple2(newContext, _List_Nil);
				} else {
					return _Utils_Tuple2(context, _List_Nil);
				}
			case 'ImageRelease':
				var zone = msg.a;
				var event = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{dragAction: $author$project$ViewProfileCharts$DragNone, orbiting: $elm$core$Maybe$Nothing, waitingForClickDelay: false}),
					_List_Nil);
			case 'ToggleFollowOrange':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							focalPoint: A3(
								$ianmackenzie$elm_geometry$Point3d$xyz,
								A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree),
								$ianmackenzie$elm_units$Quantity$zero,
								$ianmackenzie$elm_geometry$Point3d$zCoordinate(centre)),
							followSelectedPoint: !context.followSelectedPoint
						}),
					_List_Nil);
			default:
				var clickZone = msg.a;
				var event = msg.b;
				return _Utils_Tuple2(context, _List_Nil);
		}
	});
var $author$project$ViewThirdPerson$ClickDelayExpired = {$: 'ClickDelayExpired'};
var $author$project$ViewThirdPerson$DragPan = {$: 'DragPan'};
var $author$project$ViewThirdPerson$DragRotate = {$: 'DragRotate'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$SecondButton = {$: 'SecondButton'};
var $ianmackenzie$elm_geometry$SketchPlane3d$xDirection = function (_v0) {
	var properties = _v0.a;
	return properties.xDirection;
};
var $ianmackenzie$elm_geometry$SketchPlane3d$yDirection = function (_v0) {
	var properties = _v0.a;
	return properties.yDirection;
};
var $ianmackenzie$elm_geometry$SketchPlane3d$normalDirection = function (sketchPlane) {
	return A2(
		$ianmackenzie$elm_geometry$Unsafe$Direction3d$unsafeCrossProduct,
		$ianmackenzie$elm_geometry$SketchPlane3d$xDirection(sketchPlane),
		$ianmackenzie$elm_geometry$SketchPlane3d$yDirection(sketchPlane));
};
var $ianmackenzie$elm_geometry$Direction3d$rotateAround = F3(
	function (_v0, _v1, _v2) {
		var axis = _v0.a;
		var angle = _v1.a;
		var d = _v2.a;
		var halfAngle = 0.5 * angle;
		var qw = $elm$core$Basics$cos(halfAngle);
		var sinHalfAngle = $elm$core$Basics$sin(halfAngle);
		var _v3 = axis.direction;
		var a = _v3.a;
		var qx = a.x * sinHalfAngle;
		var qwx = qw * qx;
		var qxx = qx * qx;
		var qy = a.y * sinHalfAngle;
		var qwy = qw * qy;
		var qxy = qx * qy;
		var qyy = qy * qy;
		var a22 = 1 - (2 * (qxx + qyy));
		var qz = a.z * sinHalfAngle;
		var qwz = qw * qz;
		var a01 = 2 * (qxy - qwz);
		var a10 = 2 * (qxy + qwz);
		var qxz = qx * qz;
		var a02 = 2 * (qxz + qwy);
		var a20 = 2 * (qxz - qwy);
		var qyz = qy * qz;
		var a12 = 2 * (qyz - qwx);
		var a21 = 2 * (qyz + qwx);
		var qzz = qz * qz;
		var a00 = 1 - (2 * (qyy + qzz));
		var a11 = 1 - (2 * (qxx + qzz));
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
			{x: ((a00 * d.x) + (a01 * d.y)) + (a02 * d.z), y: ((a10 * d.x) + (a11 * d.y)) + (a12 * d.z), z: ((a20 * d.x) + (a21 * d.y)) + (a22 * d.z)});
	});
var $ianmackenzie$elm_geometry$Point3d$rotateAround = F3(
	function (_v0, _v1, _v2) {
		var axis = _v0.a;
		var angle = _v1.a;
		var p = _v2.a;
		var halfAngle = 0.5 * angle;
		var qw = $elm$core$Basics$cos(halfAngle);
		var sinHalfAngle = $elm$core$Basics$sin(halfAngle);
		var _v3 = axis.originPoint;
		var p0 = _v3.a;
		var deltaX = p.x - p0.x;
		var deltaY = p.y - p0.y;
		var deltaZ = p.z - p0.z;
		var _v4 = axis.direction;
		var d = _v4.a;
		var qx = d.x * sinHalfAngle;
		var wx = qw * qx;
		var xx = qx * qx;
		var qy = d.y * sinHalfAngle;
		var wy = qw * qy;
		var xy = qx * qy;
		var yy = qy * qy;
		var a22 = 1 - (2 * (xx + yy));
		var qz = d.z * sinHalfAngle;
		var wz = qw * qz;
		var a01 = 2 * (xy - wz);
		var a10 = 2 * (xy + wz);
		var xz = qx * qz;
		var a02 = 2 * (xz + wy);
		var a20 = 2 * (xz - wy);
		var yz = qy * qz;
		var a12 = 2 * (yz - wx);
		var a21 = 2 * (yz + wx);
		var zz = qz * qz;
		var a00 = 1 - (2 * (yy + zz));
		var a11 = 1 - (2 * (xx + zz));
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: ((p0.x + (a00 * deltaX)) + (a01 * deltaY)) + (a02 * deltaZ), y: ((p0.y + (a10 * deltaX)) + (a11 * deltaY)) + (a12 * deltaZ), z: ((p0.z + (a20 * deltaX)) + (a21 * deltaY)) + (a22 * deltaZ)});
	});
var $ianmackenzie$elm_geometry$Frame3d$xDirection = function (_v0) {
	var properties = _v0.a;
	return properties.xDirection;
};
var $ianmackenzie$elm_geometry$Frame3d$yDirection = function (_v0) {
	var properties = _v0.a;
	return properties.yDirection;
};
var $ianmackenzie$elm_geometry$Frame3d$rotateAround = F3(
	function (axis, angle, frame) {
		return $ianmackenzie$elm_geometry$Frame3d$unsafe(
			{
				originPoint: A3(
					$ianmackenzie$elm_geometry$Point3d$rotateAround,
					axis,
					angle,
					$ianmackenzie$elm_geometry$Frame3d$originPoint(frame)),
				xDirection: A3(
					$ianmackenzie$elm_geometry$Direction3d$rotateAround,
					axis,
					angle,
					$ianmackenzie$elm_geometry$Frame3d$xDirection(frame)),
				yDirection: A3(
					$ianmackenzie$elm_geometry$Direction3d$rotateAround,
					axis,
					angle,
					$ianmackenzie$elm_geometry$Frame3d$yDirection(frame)),
				zDirection: A3(
					$ianmackenzie$elm_geometry$Direction3d$rotateAround,
					axis,
					angle,
					$ianmackenzie$elm_geometry$Frame3d$zDirection(frame))
			});
	});
var $ianmackenzie$elm_geometry$Frame3d$rotateAroundOwn = F3(
	function (axis, angle, frame) {
		return A3(
			$ianmackenzie$elm_geometry$Frame3d$rotateAround,
			axis(frame),
			angle,
			frame);
	});
var $ianmackenzie$elm_geometry$Frame3d$translateBy = F2(
	function (vector, frame) {
		return $ianmackenzie$elm_geometry$Frame3d$unsafe(
			{
				originPoint: A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					vector,
					$ianmackenzie$elm_geometry$Frame3d$originPoint(frame)),
				xDirection: $ianmackenzie$elm_geometry$Frame3d$xDirection(frame),
				yDirection: $ianmackenzie$elm_geometry$Frame3d$yDirection(frame),
				zDirection: $ianmackenzie$elm_geometry$Frame3d$zDirection(frame)
			});
	});
var $ianmackenzie$elm_geometry$Frame3d$translateIn = F3(
	function (direction, distance, frame) {
		return A2(
			$ianmackenzie$elm_geometry$Frame3d$translateBy,
			A2($ianmackenzie$elm_geometry$Vector3d$withLength, distance, direction),
			frame);
	});
var $ianmackenzie$elm_geometry$Frame3d$translateAlongOwn = F3(
	function (axis, distance, frame) {
		return A3(
			$ianmackenzie$elm_geometry$Frame3d$translateIn,
			$ianmackenzie$elm_geometry$Axis3d$direction(
				axis(frame)),
			distance,
			frame);
	});
var $ianmackenzie$elm_geometry$Frame3d$xAxis = function (_v0) {
	var frame = _v0.a;
	return A2($ianmackenzie$elm_geometry$Axis3d$through, frame.originPoint, frame.xDirection);
};
var $ianmackenzie$elm_geometry$Frame3d$yAxis = function (_v0) {
	var frame = _v0.a;
	return A2($ianmackenzie$elm_geometry$Axis3d$through, frame.originPoint, frame.yDirection);
};
var $ianmackenzie$elm_geometry$Frame3d$zAxis = function (_v0) {
	var frame = _v0.a;
	return A2($ianmackenzie$elm_geometry$Axis3d$through, frame.originPoint, frame.zDirection);
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$orbit = function (_arguments) {
	var initialFrame = $ianmackenzie$elm_geometry$Frame3d$unsafe(
		{
			originPoint: _arguments.focalPoint,
			xDirection: $ianmackenzie$elm_geometry$SketchPlane3d$yDirection(_arguments.groundPlane),
			yDirection: $ianmackenzie$elm_geometry$SketchPlane3d$normalDirection(_arguments.groundPlane),
			zDirection: $ianmackenzie$elm_geometry$SketchPlane3d$xDirection(_arguments.groundPlane)
		});
	var finalFrame = A3(
		$ianmackenzie$elm_geometry$Frame3d$translateAlongOwn,
		$ianmackenzie$elm_geometry$Frame3d$zAxis,
		_arguments.distance,
		A3(
			$ianmackenzie$elm_geometry$Frame3d$rotateAroundOwn,
			$ianmackenzie$elm_geometry$Frame3d$xAxis,
			$ianmackenzie$elm_units$Quantity$negate(_arguments.elevation),
			A3($ianmackenzie$elm_geometry$Frame3d$rotateAroundOwn, $ianmackenzie$elm_geometry$Frame3d$yAxis, _arguments.azimuth, initialFrame)));
	return $ianmackenzie$elm_3d_camera$Camera3d$Types$Viewpoint3d(finalFrame);
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$orbitZ = function (_v0) {
	var focalPoint = _v0.focalPoint;
	var azimuth = _v0.azimuth;
	var elevation = _v0.elevation;
	var distance = _v0.distance;
	return $ianmackenzie$elm_3d_camera$Viewpoint3d$orbit(
		{azimuth: azimuth, distance: distance, elevation: elevation, focalPoint: focalPoint, groundPlane: $ianmackenzie$elm_geometry$SketchPlane3d$xy});
};
var $ianmackenzie$elm_3d_camera$Camera3d$Types$Perspective = function (a) {
	return {$: 'Perspective', a: a};
};
var $ianmackenzie$elm_3d_camera$Camera3d$perspective = function (_arguments) {
	var halfFieldOfView = $ianmackenzie$elm_units$Quantity$half(
		$ianmackenzie$elm_units$Quantity$abs(_arguments.verticalFieldOfView));
	var frustumSlope = $ianmackenzie$elm_units$Angle$tan(halfFieldOfView);
	return $ianmackenzie$elm_3d_camera$Camera3d$Types$Camera3d(
		{
			projection: $ianmackenzie$elm_3d_camera$Camera3d$Types$Perspective(frustumSlope),
			viewpoint: _arguments.viewpoint
		});
};
var $author$project$ViewThirdPerson$deriveCamera = F3(
	function (treeNode, context, currentPosition) {
		var lookingAt = context.followSelectedPoint ? $author$project$DomainModel$startPoint(
			A2($author$project$DomainModel$leafFromIndex, currentPosition, treeNode)) : context.focalPoint;
		var latitude = $author$project$DomainModel$effectiveLatitude(
			A2($author$project$DomainModel$leafFromIndex, currentPosition, treeNode));
		var cameraViewpoint = $ianmackenzie$elm_3d_camera$Viewpoint3d$orbitZ(
			{
				azimuth: $ianmackenzie$elm_geometry$Direction2d$toAngle(context.cameraAzimuth),
				distance: $ianmackenzie$elm_units$Length$meters(
					100.0 * A2($author$project$Spherical$metresPerPixel, context.zoomLevel, latitude)),
				elevation: context.cameraElevation,
				focalPoint: lookingAt
			});
		var perspectiveCamera = $ianmackenzie$elm_3d_camera$Camera3d$perspective(
			{verticalFieldOfView: context.fieldOfView, viewpoint: cameraViewpoint});
		return perspectiveCamera;
	});
var $author$project$ViewThirdPerson$detectHit = F4(
	function (event, track, _v0, context) {
		var w = _v0.a;
		var h = _v0.b;
		var camera = A3($author$project$ViewThirdPerson$deriveCamera, track.trackTree, context, track.currentPosition);
		var _v1 = event.offsetPos;
		var x = _v1.a;
		var y = _v1.b;
		var screenPoint = A2($ianmackenzie$elm_geometry$Point2d$pixels, x, y);
		var _v2 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(w),
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(h));
		var wFloat = _v2.a;
		var hFloat = _v2.b;
		var screenRectangle = A2(
			$ianmackenzie$elm_geometry$Rectangle2d$from,
			A2($ianmackenzie$elm_geometry$Point2d$xy, $ianmackenzie$elm_units$Quantity$zero, hFloat),
			A2($ianmackenzie$elm_geometry$Point2d$xy, wFloat, $ianmackenzie$elm_units$Quantity$zero));
		var ray = A3($ianmackenzie$elm_3d_camera$Camera3d$ray, camera, screenRectangle, screenPoint);
		return A2($author$project$DomainModel$nearestToRay, ray, track.trackTree);
	});
var $author$project$ViewThirdPerson$update = F5(
	function (msg, msgWrapper, track, area, context) {
		switch (msg.$) {
			case 'ImageZoomIn':
				var newContext = _Utils_update(
					context,
					{
						zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel + 0.5)
					});
				return _Utils_Tuple2(newContext, _List_Nil);
			case 'ImageZoomOut':
				var newContext = _Utils_update(
					context,
					{
						zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel - 0.5)
					});
				return _Utils_Tuple2(newContext, _List_Nil);
			case 'ImageReset':
				return _Utils_Tuple2(
					A3(
						$author$project$ViewThirdPerson$initialiseView,
						track.currentPosition,
						track.trackTree,
						$elm$core$Maybe$Just(context)),
					_List_Nil);
			case 'ImageNoOp':
				return _Utils_Tuple2(context, _List_Nil);
			case 'ImageClick':
				var event = msg.a;
				return context.waitingForClickDelay ? _Utils_Tuple2(
					context,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(
							A4($author$project$ViewThirdPerson$detectHit, event, track, area, context)),
							$author$project$Actions$TrackHasChanged
						])) : _Utils_Tuple2(context, _List_Nil);
			case 'ImageDoubleClick':
				var event = msg.a;
				var nearestPoint = A4($author$project$ViewThirdPerson$detectHit, event, track, area, context);
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							focalPoint: A2($author$project$DomainModel$earthPointFromIndex, nearestPoint, track.trackTree)
						}),
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(nearestPoint),
							$author$project$Actions$TrackHasChanged
						]));
			case 'ClickDelayExpired':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{waitingForClickDelay: false}),
					_List_Nil);
			case 'ImageMouseWheel':
				var deltaY = msg.a;
				var increment = (-0.001) * deltaY;
				var newContext = _Utils_update(
					context,
					{
						zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel + increment)
					});
				return _Utils_Tuple2(newContext, _List_Nil);
			case 'ImageGrab':
				var event = msg.a;
				var alternate = event.keys.ctrl || _Utils_eq(event.button, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$SecondButton);
				var newContext = _Utils_update(
					context,
					{
						dragAction: alternate ? $author$project$ViewThirdPerson$DragRotate : $author$project$ViewThirdPerson$DragPan,
						orbiting: $elm$core$Maybe$Just(event.offsetPos),
						waitingForClickDelay: true
					});
				return _Utils_Tuple2(
					newContext,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$DelayMessage,
							250,
							msgWrapper($author$project$ViewThirdPerson$ClickDelayExpired))
						]));
			case 'ImageDrag':
				var event = msg.a;
				var _v1 = event.offsetPos;
				var dx = _v1.a;
				var dy = _v1.b;
				var _v2 = _Utils_Tuple2(context.dragAction, context.orbiting);
				_v2$2:
				while (true) {
					if (_v2.b.$ === 'Just') {
						switch (_v2.a.$) {
							case 'DragRotate':
								var _v3 = _v2.a;
								var _v4 = _v2.b.a;
								var startX = _v4.a;
								var startY = _v4.b;
								var newElevation = $ianmackenzie$elm_units$Angle$degrees(
									$ianmackenzie$elm_units$Angle$inDegrees(context.cameraElevation) + (dy - startY));
								var newAzimuth = $ianmackenzie$elm_units$Angle$degrees(
									$ianmackenzie$elm_units$Angle$inDegrees(
										$ianmackenzie$elm_geometry$Direction2d$toAngle(context.cameraAzimuth)) - (dx - startX));
								var newContext = _Utils_update(
									context,
									{
										cameraAzimuth: $ianmackenzie$elm_geometry$Direction2d$fromAngle(newAzimuth),
										cameraElevation: newElevation,
										orbiting: $elm$core$Maybe$Just(
											_Utils_Tuple2(dx, dy))
									});
								return _Utils_Tuple2(newContext, _List_Nil);
							case 'DragPan':
								var _v5 = _v2.a;
								var _v6 = _v2.b.a;
								var startX = _v6.a;
								var startY = _v6.b;
								var shiftVector = A2(
									$ianmackenzie$elm_geometry$Vector3d$scaleBy,
									0.1 * A2(
										$author$project$Spherical$metresPerPixel,
										context.zoomLevel,
										$ianmackenzie$elm_units$Angle$degrees(30)),
									A3(
										$ianmackenzie$elm_geometry$Vector3d$rotateAround,
										$ianmackenzie$elm_geometry$Axis3d$z,
										$ianmackenzie$elm_geometry$Direction2d$toAngle(context.cameraAzimuth),
										A3(
											$ianmackenzie$elm_geometry$Vector3d$meters,
											(startY - dy) * $ianmackenzie$elm_units$Angle$sin(context.cameraElevation),
											startX - dx,
											(dy - startY) * $ianmackenzie$elm_units$Angle$cos(context.cameraElevation))));
								var newContext = _Utils_update(
									context,
									{
										focalPoint: A2($ianmackenzie$elm_geometry$Point3d$translateBy, shiftVector, context.focalPoint),
										orbiting: $elm$core$Maybe$Just(
											_Utils_Tuple2(dx, dy))
									});
								return _Utils_Tuple2(newContext, _List_Nil);
							default:
								break _v2$2;
						}
					} else {
						break _v2$2;
					}
				}
				return _Utils_Tuple2(context, _List_Nil);
			case 'ImageRelease':
				var event = msg.a;
				var newContext = _Utils_update(
					context,
					{dragAction: $author$project$ViewThirdPerson$DragNone, orbiting: $elm$core$Maybe$Nothing});
				return _Utils_Tuple2(newContext, _List_Nil);
			default:
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							focalPoint: A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree),
							followSelectedPoint: !context.followSelectedPoint
						}),
					_List_Nil);
		}
	});
var $author$project$PaneLayoutManager$update = F5(
	function (paneMsg, msgWrapper, mTrack, contentArea, options) {
		var updatePaneWith = F2(
			function (id, updateFn) {
				var currentPane = function () {
					switch (id.$) {
						case 'Pane1':
							return options.pane1;
						case 'Pane2':
							return options.pane2;
						case 'Pane3':
							return options.pane3;
						default:
							return options.pane4;
					}
				}();
				var updatedPane = updateFn(currentPane);
				switch (id.$) {
					case 'Pane1':
						return _Utils_update(
							options,
							{pane1: updatedPane});
					case 'Pane2':
						return _Utils_update(
							options,
							{pane2: updatedPane});
					case 'Pane3':
						return _Utils_update(
							options,
							{pane3: updatedPane});
					default:
						return _Utils_update(
							options,
							{pane4: updatedPane});
				}
			});
		switch (paneMsg.$) {
			case 'PaneNoOp':
				return _Utils_Tuple2(options, _List_Nil);
			case 'SetPaneLayout':
				var paneLayout = paneMsg.a;
				var newOptions = _Utils_update(
					options,
					{paneLayout: paneLayout});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$MapRefresh,
							A2(
							$author$project$Actions$StoreLocally,
							'panes',
							$author$project$PaneLayoutManager$encodePaneState(newOptions))
						]));
			case 'TogglePopup':
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{popupVisible: !options.popupVisible}),
					_List_Nil);
			case 'SetViewMode':
				var paneId = paneMsg.a;
				var viewMode = paneMsg.b;
				var newOptions = A2(
					updatePaneWith,
					paneId,
					function (pane) {
						return _Utils_update(
							pane,
							{activeView: viewMode});
					});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$MapRefresh,
							A2(
							$author$project$Actions$StoreLocally,
							'panes',
							$author$project$PaneLayoutManager$encodePaneState(newOptions))
						]));
			case 'ThirdPersonViewMessage':
				var paneId = paneMsg.a;
				var imageMsg = paneMsg.b;
				var paneInfo = function () {
					switch (paneId.$) {
						case 'Pane1':
							return options.pane1;
						case 'Pane2':
							return options.pane2;
						case 'Pane3':
							return options.pane3;
						default:
							return options.pane4;
					}
				}();
				var _v1 = function () {
					var _v2 = _Utils_Tuple2(mTrack, paneInfo.thirdPersonContext);
					if ((_v2.a.$ === 'Just') && (_v2.b.$ === 'Just')) {
						var track = _v2.a.a;
						var third = _v2.b.a;
						var _v3 = A5(
							$author$project$ViewThirdPerson$update,
							imageMsg,
							A2(
								$elm$core$Basics$composeL,
								msgWrapper,
								$author$project$PaneLayoutManager$ThirdPersonViewMessage($author$project$PaneLayoutManager$Pane1)),
							track,
							A2($author$project$PaneLayoutManager$dimensionsWithLayout, options.paneLayout, contentArea),
							third);
						var _new = _v3.a;
						var act = _v3.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(_new),
							act);
					} else {
						return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
					}
				}();
				var newContext = _v1.a;
				var actions = _v1.b;
				var newPane = _Utils_update(
					paneInfo,
					{thirdPersonContext: newContext});
				var newOptions = function () {
					switch (paneId.$) {
						case 'Pane1':
							return _Utils_update(
								options,
								{pane1: newPane});
						case 'Pane2':
							return _Utils_update(
								options,
								{pane2: newPane});
						case 'Pane3':
							return _Utils_update(
								options,
								{pane3: newPane});
						default:
							return _Utils_update(
								options,
								{pane4: newPane});
					}
				}();
				return _Utils_Tuple2(newOptions, actions);
			case 'PlanViewMessage':
				var paneId = paneMsg.a;
				var imageMsg = paneMsg.b;
				var paneInfo = function () {
					switch (paneId.$) {
						case 'Pane1':
							return options.pane1;
						case 'Pane2':
							return options.pane2;
						case 'Pane3':
							return options.pane3;
						default:
							return options.pane4;
					}
				}();
				var _v6 = function () {
					var _v7 = _Utils_Tuple2(mTrack, paneInfo.planContext);
					if ((_v7.a.$ === 'Just') && (_v7.b.$ === 'Just')) {
						var track = _v7.a.a;
						var planContext = _v7.b.a;
						var _v8 = A5(
							$author$project$ViewPlan$update,
							imageMsg,
							A2(
								$elm$core$Basics$composeL,
								msgWrapper,
								$author$project$PaneLayoutManager$PlanViewMessage($author$project$PaneLayoutManager$Pane1)),
							track,
							A2($author$project$PaneLayoutManager$dimensionsWithLayout, options.paneLayout, contentArea),
							planContext);
						var _new = _v8.a;
						var act = _v8.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(_new),
							act);
					} else {
						return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
					}
				}();
				var newContext = _v6.a;
				var actions = _v6.b;
				var newPane = _Utils_update(
					paneInfo,
					{planContext: newContext});
				var newOptions = function () {
					switch (paneId.$) {
						case 'Pane1':
							return _Utils_update(
								options,
								{pane1: newPane});
						case 'Pane2':
							return _Utils_update(
								options,
								{pane2: newPane});
						case 'Pane3':
							return _Utils_update(
								options,
								{pane3: newPane});
						default:
							return _Utils_update(
								options,
								{pane4: newPane});
					}
				}();
				return _Utils_Tuple2(newOptions, actions);
			case 'ProfileViewMessage':
				var paneId = paneMsg.a;
				var imageMsg = paneMsg.b;
				var paneInfo = function () {
					switch (paneId.$) {
						case 'Pane1':
							return options.pane1;
						case 'Pane2':
							return options.pane2;
						case 'Pane3':
							return options.pane3;
						default:
							return options.pane4;
					}
				}();
				var _v11 = function () {
					var _v12 = _Utils_Tuple2(mTrack, paneInfo.profileContext);
					if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
						var track = _v12.a.a;
						var profile = _v12.b.a;
						var _v13 = A5(
							$author$project$ViewProfileCharts$update,
							imageMsg,
							A2(
								$elm$core$Basics$composeL,
								msgWrapper,
								$author$project$PaneLayoutManager$ProfileViewMessage($author$project$PaneLayoutManager$Pane1)),
							track,
							A2($author$project$PaneLayoutManager$dimensionsWithLayout, options.paneLayout, contentArea),
							profile);
						var _new = _v13.a;
						var act = _v13.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(_new),
							act);
					} else {
						return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
					}
				}();
				var newContext = _v11.a;
				var actions = _v11.b;
				var newPane = _Utils_update(
					paneInfo,
					{profileContext: newContext});
				var newOptions = function () {
					switch (paneId.$) {
						case 'Pane1':
							return _Utils_update(
								options,
								{pane1: newPane});
						case 'Pane2':
							return _Utils_update(
								options,
								{pane2: newPane});
						case 'Pane3':
							return _Utils_update(
								options,
								{pane3: newPane});
						default:
							return _Utils_update(
								options,
								{pane4: newPane});
					}
				}();
				return _Utils_Tuple2(newOptions, actions);
			case 'MapViewMessage':
				var mapViewMsg = paneMsg.a;
				var paneInfo = options.pane1;
				var _v16 = function () {
					var _v17 = _Utils_Tuple2(mTrack, paneInfo.mapContext);
					if ((_v17.a.$ === 'Just') && (_v17.b.$ === 'Just')) {
						var track = _v17.a.a;
						var mapContext = _v17.b.a;
						var _v18 = A5(
							$author$project$ViewMap$update,
							mapViewMsg,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$PaneLayoutManager$MapViewMessage),
							track,
							A2($author$project$PaneLayoutManager$dimensionsWithLayout, options.paneLayout, contentArea),
							mapContext);
						var _new = _v18.a;
						var act = _v18.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(_new),
							act);
					} else {
						return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
					}
				}();
				var newContext = _v16.a;
				var actions = _v16.b;
				var newPane = _Utils_update(
					paneInfo,
					{mapContext: newContext});
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{pane1: newPane}),
					actions);
			case 'MapPortsMessage':
				var mapMsg = paneMsg.a;
				if (mTrack.$ === 'Just') {
					var track = mTrack.a;
					var _v20 = A3($author$project$MapPortController$update, mapMsg, track, options.mapState);
					var newState = _v20.a;
					var actions = _v20.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{mapState: newState}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'SetCurrentPosition':
				var pos = paneMsg.a;
				var newOptions = _Utils_update(
					options,
					{sliderState: $author$project$PaneLayoutManager$SliderMoved});
				var mapFollowsOrange = function () {
					var _v21 = options.pane1.mapContext;
					if (_v21.$ === 'Just') {
						var mapContext = _v21.a;
						return mapContext.followOrange;
					} else {
						return false;
					}
				}();
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(pos),
							$author$project$Actions$TrackHasChanged,
							mapFollowsOrange ? $author$project$Actions$MapCenterOnCurrent : $author$project$Actions$NoAction,
							A2(
							$author$project$Actions$DelayMessage,
							100,
							msgWrapper($author$project$PaneLayoutManager$SliderTimeout))
						]));
			default:
				var newOptions = _Utils_update(
					options,
					{
						sliderState: function () {
							var _v22 = options.sliderState;
							switch (_v22.$) {
								case 'SliderIdle':
									return $author$project$PaneLayoutManager$SliderIdle;
								case 'SliderMoved':
									return $author$project$PaneLayoutManager$SliderWaitingForTimeout;
								default:
									return $author$project$PaneLayoutManager$SliderIdle;
							}
						}()
					});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							((!_Utils_eq(options.sliderState, $author$project$PaneLayoutManager$SliderIdle)) && _Utils_eq(newOptions.sliderState, $author$project$PaneLayoutManager$SliderIdle)) ? $author$project$Actions$TrackHasChanged : $author$project$Actions$NoAction,
							(!_Utils_eq(newOptions.sliderState, $author$project$PaneLayoutManager$SliderIdle)) ? A2(
							$author$project$Actions$DelayMessage,
							100,
							msgWrapper($author$project$PaneLayoutManager$SliderTimeout)) : $author$project$Actions$NoAction
						]));
		}
	});
var $author$project$SplitPane$SplitPane$UpdateConfig = function (a) {
	return {$: 'UpdateConfig', a: a};
};
var $author$project$SplitPane$SplitPane$createUpdateConfig = function (config) {
	return $author$project$SplitPane$SplitPane$UpdateConfig(config);
};
var $author$project$SplitPane$Bound$updateValue = F2(
	function (f, _v0) {
		var value = _v0.a;
		var bound = _v0.b;
		return _Utils_Tuple2(
			A2(
				$author$project$SplitPane$Bound$boundTo,
				bound,
				f(value)),
			bound);
	});
var $author$project$SplitPane$SplitPane$resize = F5(
	function (ori, splitterPosition, step, paneWidth, paneHeight) {
		if (ori.$ === 'Horizontal') {
			if (splitterPosition.$ === 'Px') {
				var p = splitterPosition.a;
				return $author$project$SplitPane$SplitPane$Px(
					A2(
						$author$project$SplitPane$Bound$updateValue,
						function (v) {
							return v + step.x;
						},
						p));
			} else {
				var p = splitterPosition.a;
				return $author$project$SplitPane$SplitPane$Percentage(
					A2(
						$author$project$SplitPane$Bound$updateValue,
						function (v) {
							return v + (step.x / paneWidth);
						},
						p));
			}
		} else {
			if (splitterPosition.$ === 'Px') {
				var p = splitterPosition.a;
				return $author$project$SplitPane$SplitPane$Px(
					A2(
						$author$project$SplitPane$Bound$updateValue,
						function (v) {
							return v + step.y;
						},
						p));
			} else {
				var p = splitterPosition.a;
				return $author$project$SplitPane$SplitPane$Percentage(
					A2(
						$author$project$SplitPane$Bound$updateValue,
						function (v) {
							return v + (step.y / paneHeight);
						},
						p));
			}
		}
	});
var $author$project$SplitPane$SplitPane$customUpdate = F3(
	function (_v0, msg, _v1) {
		var updateConfig = _v0.a;
		var state = _v1.a;
		var _v2 = _Utils_Tuple2(state.dragState, msg);
		_v2$3:
		while (true) {
			if (_v2.a.$ === 'Draggable') {
				if (_v2.a.a.$ === 'Nothing') {
					if (_v2.b.$ === 'SplitterClick') {
						var _v3 = _v2.a.a;
						var pos = _v2.b.a;
						return _Utils_Tuple2(
							$author$project$SplitPane$SplitPane$State(
								_Utils_update(
									state,
									{
										dragState: $author$project$SplitPane$SplitPane$Draggable(
											$elm$core$Maybe$Just(
												{
													anchor: {
														x: A2($elm$core$Maybe$withDefault, 0, pos.x),
														y: A2($elm$core$Maybe$withDefault, 0, pos.y)
													},
													paneInfo: {height: pos.parentHeight, width: pos.parentWidth}
												}))
									})),
							updateConfig.onResizeStarted);
					} else {
						break _v2$3;
					}
				} else {
					switch (_v2.b.$) {
						case 'SplitterLeftAlone':
							return _Utils_Tuple2(
								$author$project$SplitPane$SplitPane$State(
									_Utils_update(
										state,
										{
											dragState: $author$project$SplitPane$SplitPane$Draggable($elm$core$Maybe$Nothing)
										})),
								updateConfig.onResizeEnded);
						case 'SplitterMove':
							var paneInfo = _v2.a.a.a.paneInfo;
							var anchor = _v2.a.a.a.anchor;
							var newRequestedPosition = _v2.b.a;
							var step = {x: newRequestedPosition.x - anchor.x, y: newRequestedPosition.y - anchor.y};
							var newSplitterPosition = A5($author$project$SplitPane$SplitPane$resize, state.orientation, state.splitterPosition, step, paneInfo.width, paneInfo.height);
							return _Utils_Tuple2(
								$author$project$SplitPane$SplitPane$State(
									_Utils_update(
										state,
										{
											dragState: $author$project$SplitPane$SplitPane$Draggable(
												$elm$core$Maybe$Just(
													{
														anchor: {x: newRequestedPosition.x, y: newRequestedPosition.y},
														paneInfo: {height: paneInfo.height, width: paneInfo.width}
													})),
											splitterPosition: newSplitterPosition
										})),
								updateConfig.onResize(newSplitterPosition));
						default:
							break _v2$3;
					}
				}
			} else {
				break _v2$3;
			}
		}
		return _Utils_Tuple2(
			$author$project$SplitPane$SplitPane$State(state),
			$elm$core$Maybe$Nothing);
	});
var $author$project$SplitPane$SplitPane$update = F2(
	function (msg, model) {
		var _v0 = A3(
			$author$project$SplitPane$SplitPane$customUpdate,
			$author$project$SplitPane$SplitPane$createUpdateConfig(
				{
					onResize: function (_v1) {
						return $elm$core$Maybe$Nothing;
					},
					onResizeEnded: $elm$core$Maybe$Nothing,
					onResizeStarted: $elm$core$Maybe$Nothing
				}),
			msg,
			model);
		var updatedModel = _v0.a;
		return updatedModel;
	});
var $author$project$OAuthTypes$UserInfo = F3(
	function (id, firstname, lastname) {
		return {firstname: firstname, id: id, lastname: lastname};
	});
var $author$project$StravaClientSecret$clientSecret = '01713301d9282956d3d182c1e01ce02c5e8620c3';
var $author$project$StravaAuth$defaultHttpsUrl = {fragment: $elm$core$Maybe$Nothing, host: '', path: '', port_: $elm$core$Maybe$Nothing, protocol: $elm$url$Url$Https, query: $elm$core$Maybe$Nothing};
var $author$project$StravaAuth$configuration = {
	authorizationEndpoint: _Utils_update(
		$author$project$StravaAuth$defaultHttpsUrl,
		{host: 'www.strava.com', path: '/oauth/authorize'}),
	clientId: '59195',
	clientSecret: $author$project$StravaClientSecret$clientSecret,
	scope: _List_fromArray(
		['read_all']),
	tokenEndpoint: _Utils_update(
		$author$project$StravaAuth$defaultHttpsUrl,
		{host: 'www.strava.com', path: '/oauth/token'}),
	userInfoDecoder: A4(
		$elm$json$Json$Decode$map3,
		$author$project$OAuthTypes$UserInfo,
		A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$int),
		A2($elm$json$Json$Decode$field, 'firstname', $elm$json$Json$Decode$string),
		A2($elm$json$Json$Decode$field, 'lastname', $elm$json$Json$Decode$string)),
	userInfoEndpoint: _Utils_update(
		$author$project$StravaAuth$defaultHttpsUrl,
		{host: 'www.strava.com', path: '/api/v3/athlete'})
};
var $author$project$OAuthTypes$GotAccessToken = function (a) {
	return {$: 'GotAccessToken', a: a};
};
var $chelovek0v$bbase64$Base64$Encode$StringEncoder = function (a) {
	return {$: 'StringEncoder', a: a};
};
var $chelovek0v$bbase64$Base64$Encode$string = function (input) {
	return $chelovek0v$bbase64$Base64$Encode$StringEncoder(input);
};
var $author$project$OAuth$Internal$makeHeaders = function (credentials) {
	return A2(
		$elm$core$Maybe$withDefault,
		_List_Nil,
		A2(
			$elm$core$Maybe$map,
			function (s) {
				return _List_fromArray(
					[
						A2($elm$http$Http$header, 'Authorization', 'Basic ' + s)
					]);
			},
			A2(
				$elm$core$Maybe$map,
				function (_v0) {
					var clientId = _v0.clientId;
					var secret = _v0.secret;
					return $chelovek0v$bbase64$Base64$Encode$encode(
						$chelovek0v$bbase64$Base64$Encode$string(clientId + (':' + secret)));
				},
				credentials)));
};
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $author$project$OAuth$Internal$protocolToString = function (protocol) {
	if (protocol.$ === 'Http') {
		return 'http';
	} else {
		return 'https';
	}
};
var $author$project$OAuth$Internal$makeRedirectUri = function (url) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				$author$project$OAuth$Internal$protocolToString(url.protocol),
				'://',
				url.host,
				A2(
				$elm$core$Maybe$withDefault,
				'',
				A2(
					$elm$core$Maybe$map,
					function (i) {
						return ':' + $elm$core$String$fromInt(i);
					},
					url.port_)),
				url.path,
				A2(
				$elm$core$Maybe$withDefault,
				'',
				A2(
					$elm$core$Maybe$map,
					function (q) {
						return '?' + q;
					},
					url.query))
			]));
};
var $author$project$OAuth$Internal$AuthenticationSuccess = F4(
	function (token, refreshToken, expiresIn, scope) {
		return {expiresIn: expiresIn, refreshToken: refreshToken, scope: scope, token: token};
	});
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $author$project$OAuth$Internal$expiresInDecoder = $elm$json$Json$Decode$maybe(
	A2($elm$json$Json$Decode$field, 'expires_in', $elm$json$Json$Decode$int));
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$fail = _Json_fail;
var $author$project$OAuth$Internal$decoderFromJust = function (msg) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$map($elm$json$Json$Decode$succeed),
		$elm$core$Maybe$withDefault(
			$elm$json$Json$Decode$fail(msg)));
};
var $elm_community$maybe_extra$Maybe$Extra$andThen2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Just') {
			var a = ma.a;
			if (mb.$ === 'Just') {
				var b = mb.a;
				return A2(func, a, b);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$OAuth$Bearer = function (a) {
	return {$: 'Bearer', a: a};
};
var $elm$core$String$toLower = _String_toLower;
var $author$project$OAuth$tryMakeToken = F2(
	function (tokenType, token) {
		var _v0 = $elm$core$String$toLower(tokenType);
		if (_v0 === 'bearer') {
			return $elm$core$Maybe$Just(
				$author$project$OAuth$Bearer(token));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$OAuth$makeRefreshToken = F2(
	function (tokenType, mToken) {
		var _v0 = _Utils_Tuple2(
			mToken,
			A3(
				$elm_community$maybe_extra$Maybe$Extra$andThen2,
				$author$project$OAuth$tryMakeToken,
				$elm$core$Maybe$Just(tokenType),
				mToken));
		if (_v0.a.$ === 'Nothing') {
			var _v1 = _v0.a;
			return $elm$core$Maybe$Just($elm$core$Maybe$Nothing);
		} else {
			if (_v0.b.$ === 'Just') {
				var token = _v0.b.a;
				return $elm$core$Maybe$Just(
					$elm$core$Maybe$Just(token));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $author$project$OAuth$Internal$refreshTokenDecoder = A2(
	$elm$json$Json$Decode$andThen,
	$author$project$OAuth$Internal$decoderFromJust('missing or invalid \'refresh_token\' / \'token_type\''),
	A3(
		$elm$json$Json$Decode$map2,
		$author$project$OAuth$makeRefreshToken,
		A2($elm$json$Json$Decode$field, 'token_type', $elm$json$Json$Decode$string),
		$elm$json$Json$Decode$maybe(
			A2($elm$json$Json$Decode$field, 'refresh_token', $elm$json$Json$Decode$string))));
var $author$project$OAuth$Internal$scopeDecoder = A2(
	$elm$json$Json$Decode$map,
	$elm$core$Maybe$withDefault(_List_Nil),
	$elm$json$Json$Decode$maybe(
		A2(
			$elm$json$Json$Decode$field,
			'scope',
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string))));
var $author$project$OAuth$makeToken = $elm_community$maybe_extra$Maybe$Extra$andThen2($author$project$OAuth$tryMakeToken);
var $author$project$OAuth$Internal$tokenDecoder = A2(
	$elm$json$Json$Decode$andThen,
	$author$project$OAuth$Internal$decoderFromJust('missing or invalid \'access_token\' / \'token_type\''),
	A3(
		$elm$json$Json$Decode$map2,
		$author$project$OAuth$makeToken,
		A2(
			$elm$json$Json$Decode$map,
			$elm$core$Maybe$Just,
			A2($elm$json$Json$Decode$field, 'token_type', $elm$json$Json$Decode$string)),
		A2(
			$elm$json$Json$Decode$map,
			$elm$core$Maybe$Just,
			A2($elm$json$Json$Decode$field, 'access_token', $elm$json$Json$Decode$string))));
var $author$project$OAuth$Internal$authenticationSuccessDecoder = A5($elm$json$Json$Decode$map4, $author$project$OAuth$Internal$AuthenticationSuccess, $author$project$OAuth$Internal$tokenDecoder, $author$project$OAuth$Internal$refreshTokenDecoder, $author$project$OAuth$Internal$expiresInDecoder, $author$project$OAuth$Internal$scopeDecoder);
var $elm$http$Http$stringBody = _Http_pair;
var $author$project$OAuth$Internal$makeRequest = F4(
	function (toMsg, url, headers, body) {
		return {
			body: A2($elm$http$Http$stringBody, 'application/x-www-form-urlencoded', body),
			expect: A2($elm$http$Http$expectJson, toMsg, $author$project$OAuth$Internal$authenticationSuccessDecoder),
			headers: headers,
			method: 'POST',
			timeout: $elm$core$Maybe$Nothing,
			tracker: $elm$core$Maybe$Nothing,
			url: $elm$url$Url$toString(url)
		};
	});
var $elm$url$Url$Builder$QueryParameter = F2(
	function (a, b) {
		return {$: 'QueryParameter', a: a, b: b};
	});
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $elm$url$Url$Builder$string = F2(
	function (key, value) {
		return A2(
			$elm$url$Url$Builder$QueryParameter,
			$elm$url$Url$percentEncode(key),
			$elm$url$Url$percentEncode(value));
	});
var $author$project$OAuth$AuthorizationCode$makeTokenRequest = F2(
	function (toMsg, _v0) {
		var credentials = _v0.credentials;
		var code = _v0.code;
		var url = _v0.url;
		var redirectUri = _v0.redirectUri;
		var headers = $author$project$OAuth$Internal$makeHeaders(
			function () {
				var _v2 = credentials.secret;
				if (_v2.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					var secret = _v2.a;
					return $elm$core$Maybe$Just(
						{clientId: credentials.clientId, secret: secret});
				}
			}());
		var body = A2(
			$elm$core$String$dropLeft,
			1,
			$elm$url$Url$Builder$toQuery(
				_Utils_ap(
					function () {
						var _v1 = credentials.secret;
						if (_v1.$ === 'Just') {
							var secret = _v1.a;
							return _List_fromArray(
								[
									A2($elm$url$Url$Builder$string, 'client_secret', secret)
								]);
						} else {
							return _List_Nil;
						}
					}(),
					_List_fromArray(
						[
							A2($elm$url$Url$Builder$string, 'grant_type', 'authorization_code'),
							A2($elm$url$Url$Builder$string, 'client_id', credentials.clientId),
							A2(
							$elm$url$Url$Builder$string,
							'redirect_uri',
							$author$project$OAuth$Internal$makeRedirectUri(redirectUri)),
							A2($elm$url$Url$Builder$string, 'code', code)
						]))));
		return A4($author$project$OAuth$Internal$makeRequest, toMsg, url, headers, body);
	});
var $author$project$StravaAuth$getAccessToken = F3(
	function (_v0, redirectUri, code) {
		var clientId = _v0.clientId;
		var tokenEndpoint = _v0.tokenEndpoint;
		return $elm$http$Http$request(
			A2(
				$author$project$OAuth$AuthorizationCode$makeTokenRequest,
				$author$project$OAuthTypes$GotAccessToken,
				{
					code: code,
					credentials: {
						clientId: clientId,
						secret: $elm$core$Maybe$Just($author$project$StravaClientSecret$clientSecret)
					},
					redirectUri: redirectUri,
					url: tokenEndpoint
				}));
	});
var $author$project$StravaAuth$accessTokenRequested = F2(
	function (model, code) {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					flow: $author$project$OAuthTypes$Authorized(code)
				}),
			A3($author$project$StravaAuth$getAccessToken, $author$project$StravaAuth$configuration, model.redirectUri, code));
	});
var $author$project$OAuthTypes$Authenticated = function (a) {
	return {$: 'Authenticated', a: a};
};
var $author$project$OAuthTypes$ErrAuthentication = function (a) {
	return {$: 'ErrAuthentication', a: a};
};
var $author$project$OAuthTypes$ErrHTTPGetAccessToken = {$: 'ErrHTTPGetAccessToken'};
var $author$project$OAuthTypes$UserInfoRequested = {$: 'UserInfoRequested'};
var $author$project$OAuth$Internal$AuthenticationError = F3(
	function (error, errorDescription, errorUri) {
		return {error: error, errorDescription: errorDescription, errorUri: errorUri};
	});
var $author$project$OAuth$Internal$errorDescriptionDecoder = $elm$json$Json$Decode$maybe(
	A2($elm$json$Json$Decode$field, 'error_description', $elm$json$Json$Decode$string));
var $author$project$OAuth$Internal$errorUriDecoder = $elm$json$Json$Decode$maybe(
	A2($elm$json$Json$Decode$field, 'error_uri', $elm$json$Json$Decode$string));
var $author$project$OAuth$Internal$authenticationErrorDecoder = function (errorCodeDecoder) {
	return A4($elm$json$Json$Decode$map3, $author$project$OAuth$Internal$AuthenticationError, errorCodeDecoder, $author$project$OAuth$Internal$errorDescriptionDecoder, $author$project$OAuth$Internal$errorUriDecoder);
};
var $author$project$OAuth$Internal$errorDecoder = function (errorCodeFromString) {
	return A2(
		$elm$json$Json$Decode$map,
		errorCodeFromString,
		A2($elm$json$Json$Decode$field, 'error', $elm$json$Json$Decode$string));
};
var $author$project$OAuth$AuthorizationCode$defaultErrorDecoder = $author$project$OAuth$Internal$errorDecoder($author$project$OAuth$errorCodeFromString);
var $author$project$OAuth$AuthorizationCode$defaultAuthenticationErrorDecoder = $author$project$OAuth$Internal$authenticationErrorDecoder($author$project$OAuth$AuthorizationCode$defaultErrorDecoder);
var $author$project$StravaAuth$gotAccessToken = F2(
	function (model, authenticationResponse) {
		if (authenticationResponse.$ === 'Err') {
			if (authenticationResponse.a.$ === 'BadBody') {
				var body = authenticationResponse.a.a;
				var _v1 = A2($elm$json$Json$Decode$decodeString, $author$project$OAuth$AuthorizationCode$defaultAuthenticationErrorDecoder, body);
				if (_v1.$ === 'Ok') {
					var error = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								flow: $author$project$OAuthTypes$Errored(
									$author$project$OAuthTypes$ErrAuthentication(error))
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								flow: $author$project$OAuthTypes$Errored($author$project$OAuthTypes$ErrHTTPGetAccessToken)
							}),
						$elm$core$Platform$Cmd$none);
				}
			} else {
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							flow: $author$project$OAuthTypes$Errored($author$project$OAuthTypes$ErrHTTPGetAccessToken)
						}),
					$elm$core$Platform$Cmd$none);
			}
		} else {
			var token = authenticationResponse.a.token;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						flow: $author$project$OAuthTypes$Authenticated(token)
					}),
				A2($andrewMacmurray$elm_delay$Delay$after, 100, $author$project$OAuthTypes$UserInfoRequested));
		}
	});
var $elm$browser$Browser$Navigation$load = _Browser_load;
var $author$project$OAuth$Internal$Code = {$: 'Code'};
var $author$project$OAuth$Internal$responseTypeToString = function (r) {
	if (r.$ === 'Code') {
		return 'code';
	} else {
		return 'token';
	}
};
var $author$project$OAuth$Internal$urlAddList = F3(
	function (param, xs, qs) {
		return _Utils_ap(
			qs,
			function () {
				if (!xs.b) {
					return _List_Nil;
				} else {
					return _List_fromArray(
						[
							A2(
							$elm$url$Url$Builder$string,
							param,
							A2($elm$core$String$join, ' ', xs))
						]);
				}
			}());
	});
var $author$project$OAuth$Internal$urlAddMaybe = F3(
	function (param, ms, qs) {
		return _Utils_ap(
			qs,
			function () {
				if (ms.$ === 'Nothing') {
					return _List_Nil;
				} else {
					var s = ms.a;
					return _List_fromArray(
						[
							A2($elm$url$Url$Builder$string, param, s)
						]);
				}
			}());
	});
var $author$project$OAuth$Internal$makeAuthorizationUrl = F2(
	function (responseType, _v0) {
		var clientId = _v0.clientId;
		var url = _v0.url;
		var redirectUri = _v0.redirectUri;
		var scope = _v0.scope;
		var state = _v0.state;
		var codeChallenge = _v0.codeChallenge;
		var query = A2(
			$elm$core$String$dropLeft,
			1,
			$elm$url$Url$Builder$toQuery(
				A3(
					$author$project$OAuth$Internal$urlAddMaybe,
					'code_challenge_method',
					A2(
						$elm$core$Maybe$map,
						$elm$core$Basics$always('S256'),
						codeChallenge),
					A3(
						$author$project$OAuth$Internal$urlAddMaybe,
						'code_challenge',
						codeChallenge,
						A3(
							$author$project$OAuth$Internal$urlAddMaybe,
							'state',
							state,
							A3(
								$author$project$OAuth$Internal$urlAddList,
								'scope',
								scope,
								_List_fromArray(
									[
										A2($elm$url$Url$Builder$string, 'client_id', clientId),
										A2(
										$elm$url$Url$Builder$string,
										'redirect_uri',
										$author$project$OAuth$Internal$makeRedirectUri(redirectUri)),
										A2(
										$elm$url$Url$Builder$string,
										'response_type',
										$author$project$OAuth$Internal$responseTypeToString(responseType))
									])))))));
		var _v1 = url.query;
		if (_v1.$ === 'Nothing') {
			return _Utils_update(
				url,
				{
					query: $elm$core$Maybe$Just(query)
				});
		} else {
			var baseQuery = _v1.a;
			return _Utils_update(
				url,
				{
					query: $elm$core$Maybe$Just(baseQuery + ('&' + query))
				});
		}
	});
var $author$project$OAuth$AuthorizationCode$makeAuthorizationUrl = function (_v0) {
	var clientId = _v0.clientId;
	var url = _v0.url;
	var redirectUri = _v0.redirectUri;
	var scope = _v0.scope;
	var state = _v0.state;
	return A2(
		$author$project$OAuth$Internal$makeAuthorizationUrl,
		$author$project$OAuth$Internal$Code,
		{clientId: clientId, codeChallenge: $elm$core$Maybe$Nothing, redirectUri: redirectUri, scope: scope, state: state, url: url});
};
var $author$project$StravaAuth$gotRandomBytes = F2(
	function (model, bytes) {
		var _v0 = $author$project$StravaAuth$convertBytes(bytes);
		var state = _v0.state;
		var authorization = {
			clientId: $author$project$StravaAuth$configuration.clientId,
			redirectUri: model.redirectUri,
			scope: $author$project$StravaAuth$configuration.scope,
			state: $elm$core$Maybe$Just(state),
			url: $author$project$StravaAuth$configuration.authorizationEndpoint
		};
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{flow: $author$project$OAuthTypes$Idle}),
			$elm$browser$Browser$Navigation$load(
				$elm$url$Url$toString(
					$author$project$OAuth$AuthorizationCode$makeAuthorizationUrl(authorization))));
	});
var $author$project$OAuthTypes$Done = F2(
	function (a, b) {
		return {$: 'Done', a: a, b: b};
	});
var $author$project$OAuthTypes$ErrHTTPGetUserInfo = {$: 'ErrHTTPGetUserInfo'};
var $author$project$StravaAuth$gotUserInfo = F2(
	function (model, userInfoResponse) {
		var _v0 = _Utils_Tuple2(model.flow, userInfoResponse);
		if (_v0.b.$ === 'Err') {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						flow: $author$project$OAuthTypes$Errored($author$project$OAuthTypes$ErrHTTPGetUserInfo)
					}),
				$elm$core$Platform$Cmd$none);
		} else {
			if (_v0.a.$ === 'Authenticated') {
				var token = _v0.a.a;
				var userInfo = _v0.b.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							flow: A2($author$project$OAuthTypes$Done, userInfo, token)
						}),
					$elm$core$Platform$Cmd$none);
			} else {
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							flow: $author$project$OAuthTypes$Errored($author$project$OAuthTypes$ErrStateMismatch)
						}),
					$elm$core$Platform$Cmd$none);
			}
		}
	});
var $author$project$StravaAuth$noOp = function (model) {
	return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
};
var $elm$json$Json$Encode$int = _Json_wrap;
var $author$project$OAuthPorts$genRandomBytes = _Platform_outgoingPort('genRandomBytes', $elm$json$Json$Encode$int);
var $author$project$StravaAuth$signInRequested = function (model) {
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{flow: $author$project$OAuthTypes$Idle}),
		$author$project$OAuthPorts$genRandomBytes(16));
};
var $author$project$StravaAuth$signOutRequested = function (model) {
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{flow: $author$project$OAuthTypes$Idle}),
		$elm$browser$Browser$Navigation$load(
			$elm$url$Url$toString(model.redirectUri)));
};
var $author$project$OAuthTypes$GotUserInfo = function (a) {
	return {$: 'GotUserInfo', a: a};
};
var $author$project$OAuth$tokenToString = function (_v0) {
	var t = _v0.a;
	return 'Bearer ' + t;
};
var $author$project$OAuth$useToken = function (token) {
	return $elm$core$List$cons(
		A2(
			$elm$http$Http$header,
			'Authorization',
			$author$project$OAuth$tokenToString(token)));
};
var $author$project$StravaAuth$getUserInfo = F2(
	function (_v0, token) {
		var userInfoDecoder = _v0.userInfoDecoder;
		var userInfoEndpoint = _v0.userInfoEndpoint;
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: A2($elm$http$Http$expectJson, $author$project$OAuthTypes$GotUserInfo, userInfoDecoder),
				headers: A2($author$project$OAuth$useToken, token, _List_Nil),
				method: 'GET',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: $elm$url$Url$toString(userInfoEndpoint)
			});
	});
var $author$project$StravaAuth$userInfoRequested = F2(
	function (model, token) {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					flow: $author$project$OAuthTypes$Authenticated(token)
				}),
			A2($author$project$StravaAuth$getUserInfo, $author$project$StravaAuth$configuration, token));
	});
var $author$project$StravaAuth$update = F2(
	function (msg, model) {
		var _v0 = _Utils_Tuple2(model.flow, msg);
		_v0$7:
		while (true) {
			switch (_v0.a.$) {
				case 'Idle':
					switch (_v0.b.$) {
						case 'SignInRequested':
							var _v1 = _v0.a;
							var _v2 = _v0.b;
							return $author$project$StravaAuth$signInRequested(model);
						case 'GotRandomBytes':
							var _v3 = _v0.a;
							var bytes = _v0.b.a;
							return A2($author$project$StravaAuth$gotRandomBytes, model, bytes);
						default:
							break _v0$7;
					}
				case 'Authorized':
					switch (_v0.b.$) {
						case 'AccessTokenRequested':
							var code = _v0.a.a;
							var _v4 = _v0.b;
							return A2($author$project$StravaAuth$accessTokenRequested, model, code);
						case 'GotAccessToken':
							var authenticationResponse = _v0.b.a;
							return A2($author$project$StravaAuth$gotAccessToken, model, authenticationResponse);
						default:
							break _v0$7;
					}
				case 'Authenticated':
					switch (_v0.b.$) {
						case 'UserInfoRequested':
							var token = _v0.a.a;
							var _v5 = _v0.b;
							return A2($author$project$StravaAuth$userInfoRequested, model, token);
						case 'GotUserInfo':
							var userInfoResponse = _v0.b.a;
							return A2($author$project$StravaAuth$gotUserInfo, model, userInfoResponse);
						default:
							break _v0$7;
					}
				case 'Done':
					if (_v0.b.$ === 'SignOutRequested') {
						var _v6 = _v0.a;
						var _v7 = _v0.b;
						return $author$project$StravaAuth$signOutRequested(model);
					} else {
						break _v0$7;
					}
				default:
					break _v0$7;
			}
		}
		return $author$project$StravaAuth$noOp(model);
	});
var $author$project$Actions$OneClickQuickFix = {$: 'OneClickQuickFix'};
var $author$project$Tools$OneClickQuickFix$update = F2(
	function (msg, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			var track = _v0.a.a;
			var _v1 = _v0.b;
			return _List_fromArray(
				[$author$project$Actions$OneClickQuickFix, $author$project$Actions$TrackHasChanged]);
		} else {
			return _List_Nil;
		}
	});
var $author$project$ToolsController$isToolOpen = F2(
	function (toolType, entries) {
		return !_Utils_eq(
			A2(
				$elm_community$list_extra$List$Extra$find,
				function (tab) {
					return _Utils_eq(tab.toolType, toolType) && _Utils_eq(tab.state, $author$project$ToolsController$Expanded);
				},
				entries),
			$elm$core$Maybe$Nothing);
	});
var $author$project$ToolsController$setColour = F3(
	function (toolType, colour, tool) {
		return _Utils_eq(tool.toolType, toolType) ? _Utils_update(
			tool,
			{
				tabColour: colour,
				textColour: $author$project$ViewPureStyles$contrastingColour(colour)
			}) : tool;
	});
var $author$project$ToolsController$setDock = F3(
	function (toolType, dock, tool) {
		return _Utils_eq(tool.toolType, toolType) ? _Utils_update(
			tool,
			{dock: dock}) : tool;
	});
var $author$project$ToolsController$setToolState = F3(
	function (toolType, state, tool) {
		return _Utils_eq(tool.toolType, toolType) ? _Utils_update(
			tool,
			{state: state}) : tool;
	});
var $author$project$ToolsController$toggleToolPopup = F2(
	function (toolType, tool) {
		return _Utils_eq(tool.toolType, toolType) ? _Utils_update(
			tool,
			{isPopupOpen: !tool.isPopupOpen}) : tool;
	});
var $author$project$Actions$BendSmootherApplyWithOptions = function (a) {
	return {$: 'BendSmootherApplyWithOptions', a: a};
};
var $author$project$Tools$BendSmoother$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			switch (_v0.b.$) {
				case 'SetBendTrackPointSpacing':
					var track = _v0.a.a;
					var spacing = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$BendSmoother$tryBendSmoother,
						track,
						_Utils_update(
							options,
							{bendTrackPointSpacing: spacing}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$BendSmoother$previewActions, newOptions, previewColour, track));
				case 'ApplySmoothBend':
					var track = _v0.a.a;
					var _v1 = _v0.b;
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$BendSmootherApplyWithOptions(options),
								$author$project$Actions$TrackHasChanged
							]));
				case 'SetMode':
					var track = _v0.a.a;
					var mode = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{mode: mode});
					return _Utils_Tuple2(newOptions, _List_Nil);
				case 'SetSegments':
					var track = _v0.a.a;
					var segments = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{segments: segments});
					return _Utils_Tuple2(newOptions, _List_Nil);
				default:
					var track = _v0.a.a;
					var _v2 = _v0.b;
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$BendSmootherApplyWithOptions(options),
								$author$project$Actions$TrackHasChanged
							]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$BezierApplyWithOptions = function (a) {
	return {$: 'BezierApplyWithOptions', a: a};
};
var $author$project$Tools$BezierSplines$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		_v0$5:
		while (true) {
			if (_v0.a.$ === 'Just') {
				switch (_v0.b.$) {
					case 'SetBezierTension':
						var track = _v0.a.a;
						var tension = _v0.b.a;
						var newOptions = _Utils_update(
							options,
							{bezierTension: tension});
						return _Utils_Tuple2(
							newOptions,
							A3($author$project$Tools$BezierSplines$actions, newOptions, previewColour, track));
					case 'SetBezierTolerance':
						var track = _v0.a.a;
						var tolerance = _v0.b.a;
						var newOptions = _Utils_update(
							options,
							{bezierTolerance: tolerance});
						return _Utils_Tuple2(
							newOptions,
							A3($author$project$Tools$BezierSplines$actions, newOptions, previewColour, track));
					case 'BezierApplyWithOptions':
						var track = _v0.a.a;
						var _v1 = _v0.b;
						return _Utils_Tuple2(
							options,
							_List_fromArray(
								[
									$author$project$Actions$BezierApplyWithOptions(options),
									$author$project$Actions$TrackHasChanged
								]));
					case 'SetBezierStyle':
						var track = _v0.a.a;
						var style = _v0.b.a;
						var newOptions = _Utils_update(
							options,
							{bezierStyle: style});
						return _Utils_Tuple2(
							newOptions,
							A3($author$project$Tools$BezierSplines$actions, newOptions, previewColour, track));
					case 'SetExtent':
						var track = _v0.a.a;
						var extent = _v0.b.a;
						var newOptions = _Utils_update(
							options,
							{extent: extent});
						return _Utils_Tuple2(
							newOptions,
							A3($author$project$Tools$BezierSplines$actions, newOptions, previewColour, track));
					default:
						break _v0$5;
				}
			} else {
				break _v0$5;
			}
		}
		return _Utils_Tuple2(options, _List_Nil);
	});
var $author$project$Actions$CentroidAverageApplyWithOptions = function (a) {
	return {$: 'CentroidAverageApplyWithOptions', a: a};
};
var $author$project$Tools$CentroidAverage$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			switch (_v0.b.$) {
				case 'SetWeighting':
					var track = _v0.a.a;
					var weight = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{weighting: weight});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CentroidAverage$actions, newOptions, previewColour, track));
				case 'ToggleAltitude':
					var track = _v0.a.a;
					var newOptions = _Utils_update(
						options,
						{applyToAltitude: !options.applyToAltitude});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CentroidAverage$actions, newOptions, previewColour, track));
				case 'TogglePosition':
					var track = _v0.a.a;
					var newOptions = _Utils_update(
						options,
						{applyToPosition: !options.applyToPosition});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CentroidAverage$actions, newOptions, previewColour, track));
				case 'SetExtent':
					var track = _v0.a.a;
					var extent = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{extent: extent});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CentroidAverage$actions, newOptions, previewColour, track));
				default:
					var track = _v0.a.a;
					var _v1 = _v0.b;
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$CentroidAverageApplyWithOptions(options),
								$author$project$Actions$TrackHasChanged
							]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$CurveFormerApplyWithOptions = function (a) {
	return {$: 'CurveFormerApplyWithOptions', a: a};
};
var $author$project$Tools$CurveFormer$EntryMode = {$: 'EntryMode'};
var $author$project$Tools$CurveFormer$ExitMode = {$: 'ExitMode'};
var $ianmackenzie$elm_geometry$Point2d$along = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var distance = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var _v3 = axis.direction;
		var d = _v3.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p0.x + (distance * d.x), y: p0.y + (distance * d.y)});
	});
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$List$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$List$cons, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$uniqueBy = F2(
	function (f, list) {
		return A4($elm_community$list_extra$List$Extra$uniqueHelp, f, _List_Nil, list, _List_Nil);
	});
var $elm_community$list_extra$List$Extra$allDifferentBy = F2(
	function (f, list) {
		return _Utils_eq(
			$elm$core$List$length(list),
			$elm$core$List$length(
				A2($elm_community$list_extra$List$Extra$uniqueBy, f, list)));
	});
var $elm_community$list_extra$List$Extra$allDifferent = function (list) {
	return A2($elm_community$list_extra$List$Extra$allDifferentBy, $elm$core$Basics$identity, list);
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Tools$CurveFormer$areContiguous = function (roads) {
	var indices = $elm$core$Dict$keys(roads);
	return (!$elm$core$List$length(indices)) || function () {
		var _v0 = _Utils_Tuple2(
			$elm$core$List$maximum(indices),
			$elm$core$List$minimum(indices));
		if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
			var isMax = _v0.a.a;
			var isMin = _v0.b.a;
			return _Utils_eq(
				isMax - isMin,
				$elm$core$List$length(indices) - 1) && $elm_community$list_extra$List$Extra$allDifferent(indices);
		} else {
			return false;
		}
	}();
};
var $ianmackenzie$elm_geometry$LineSegment2d$endPoint = function (_v0) {
	var _v1 = _v0.a;
	var end = _v1.b;
	return end;
};
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d = function (a) {
	return {$: 'BoundingBox2d', a: a};
};
var $ianmackenzie$elm_geometry$BoundingBox2d$fromExtrema = function (given) {
	return (A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, given.maxX, given.minX) && A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, given.maxY, given.minY)) ? $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(given) : $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(
		{
			maxX: A2($ianmackenzie$elm_units$Quantity$max, given.minX, given.maxX),
			maxY: A2($ianmackenzie$elm_units$Quantity$max, given.minY, given.maxY),
			minX: A2($ianmackenzie$elm_units$Quantity$min, given.minX, given.maxX),
			minY: A2($ianmackenzie$elm_units$Quantity$min, given.minY, given.maxY)
		});
};
var $author$project$UtilsForViews$flatBox = function (box) {
	var _v0 = $ianmackenzie$elm_geometry$BoundingBox3d$extrema(box);
	var minX = _v0.minX;
	var maxX = _v0.maxX;
	var minY = _v0.minY;
	var maxY = _v0.maxY;
	var minZ = _v0.minZ;
	var maxZ = _v0.maxZ;
	return $ianmackenzie$elm_geometry$BoundingBox2d$fromExtrema(
		{maxX: maxX, maxY: maxY, minX: minX, minY: minY});
};
var $ianmackenzie$elm_geometry$Direction2d$from = F2(
	function (firstPoint, secondPoint) {
		return $ianmackenzie$elm_geometry$Vector2d$direction(
			A2($ianmackenzie$elm_geometry$Vector2d$from, firstPoint, secondPoint));
	});
var $ianmackenzie$elm_interval$Interval$Interval = function (a) {
	return {$: 'Interval', a: a};
};
var $ianmackenzie$elm_interval$Interval$from = F2(
	function (firstValue, secondValue) {
		return (_Utils_cmp(firstValue, secondValue) < 1) ? $ianmackenzie$elm_interval$Interval$Interval(
			_Utils_Tuple2(firstValue, secondValue)) : $ianmackenzie$elm_interval$Interval$Interval(
			_Utils_Tuple2(secondValue, firstValue));
	});
var $ianmackenzie$elm_geometry$Point2d$interpolateFrom = F3(
	function (_v0, _v1, t) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		return (t <= 0.5) ? $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p1.x + (t * (p2.x - p1.x)), y: p1.y + (t * (p2.y - p1.y))}) : $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p2.x + ((1 - t) * (p1.x - p2.x)), y: p2.y + ((1 - t) * (p1.y - p2.y))});
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$maxX = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.maxX;
};
var $ianmackenzie$elm_geometry$BoundingBox2d$maxY = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.maxY;
};
var $ianmackenzie$elm_geometry$BoundingBox2d$minX = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.minX;
};
var $ianmackenzie$elm_geometry$BoundingBox2d$minY = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.minY;
};
var $ianmackenzie$elm_geometry$BoundingBox2d$intersects = F2(
	function (other, boundingBox) {
		return A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$maxX(other),
			$ianmackenzie$elm_geometry$BoundingBox2d$minX(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$minX(other),
			$ianmackenzie$elm_geometry$BoundingBox2d$maxX(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$maxY(other),
			$ianmackenzie$elm_geometry$BoundingBox2d$minY(boundingBox)) && A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$minY(other),
			$ianmackenzie$elm_geometry$BoundingBox2d$maxY(boundingBox))));
	});
var $ianmackenzie$elm_interval$Interval$endpoints = function (_v0) {
	var intervalEndpoints = _v0.a;
	return intervalEndpoints;
};
var $ianmackenzie$elm_interval$Interval$intersects = F2(
	function (firstInterval, secondInterval) {
		var _v0 = $ianmackenzie$elm_interval$Interval$endpoints(secondInterval);
		var min2 = _v0.a;
		var max2 = _v0.b;
		var _v1 = $ianmackenzie$elm_interval$Interval$endpoints(firstInterval);
		var min1 = _v1.a;
		var max1 = _v1.b;
		return (_Utils_cmp(min1, max2) < 1) && (_Utils_cmp(max1, min2) > -1);
	});
var $ianmackenzie$elm_geometry$Geometry$Types$LargeNegative = {$: 'LargeNegative'};
var $ianmackenzie$elm_geometry$SweptAngle$largeNegative = $ianmackenzie$elm_geometry$Geometry$Types$LargeNegative;
var $ianmackenzie$elm_geometry$Geometry$Types$LargePositive = {$: 'LargePositive'};
var $ianmackenzie$elm_geometry$SweptAngle$largePositive = $ianmackenzie$elm_geometry$Geometry$Types$LargePositive;
var $author$project$Geometry101$Point = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var $author$project$Geometry101$solveQuadratic = F3(
	function (a, b, c) {
		var disc = (b * b) - ((4 * a) * c);
		return (!disc) ? _List_fromArray(
			[0 - (b / (a + a))]) : ((disc > 0) ? _List_fromArray(
			[
				((0 - b) - $elm$core$Basics$sqrt(disc)) / (a + a),
				((0 - b) + $elm$core$Basics$sqrt(disc)) / (a + a)
			]) : _List_Nil);
	});
var $author$project$Geometry101$lineCircleIntersections = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var b = _v0.b;
		var c = _v0.c;
		var centre = _v1.centre;
		var radius = _v1.radius;
		var shiftedLine = {a: a, b: b, c: c + ((a * centre.x) + (b * centre.y))};
		var xSolutionsShifted = A3($author$project$Geometry101$solveQuadratic, (shiftedLine.a * shiftedLine.a) + (shiftedLine.b * shiftedLine.b), (2.0 * shiftedLine.a) * shiftedLine.c, (shiftedLine.c * shiftedLine.c) - (((shiftedLine.b * shiftedLine.b) * radius) * radius));
		var xSolutions = A2(
			$elm$core$List$map,
			$elm$core$Basics$add(centre.x),
			xSolutionsShifted);
		var ySolutions = A2(
			$elm$core$List$map,
			function (x) {
				return 0 - (((a * x) + c) / b);
			},
			xSolutions);
		return A3($elm$core$List$map2, $author$project$Geometry101$Point, xSolutions, ySolutions);
	});
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $elm_community$list_extra$List$Extra$maximumBy = F2(
	function (f, ls) {
		var maxBy = F2(
			function (x, _v1) {
				var y = _v1.a;
				var fy = _v1.b;
				var fx = f(x);
				return (_Utils_cmp(fx, fy) > 0) ? _Utils_Tuple2(x, fx) : _Utils_Tuple2(y, fy);
			});
		if (ls.b) {
			if (!ls.b.b) {
				var l_ = ls.a;
				return $elm$core$Maybe$Just(l_);
			} else {
				var l_ = ls.a;
				var ls_ = ls.b;
				return $elm$core$Maybe$Just(
					A3(
						$elm$core$List$foldl,
						maxBy,
						_Utils_Tuple2(
							l_,
							f(l_)),
						ls_).a);
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm_community$list_extra$List$Extra$minimumBy = F2(
	function (f, ls) {
		var minBy = F2(
			function (x, _v1) {
				var y = _v1.a;
				var fy = _v1.b;
				var fx = f(x);
				return (_Utils_cmp(fx, fy) < 0) ? _Utils_Tuple2(x, fx) : _Utils_Tuple2(y, fy);
			});
		if (ls.b) {
			if (!ls.b.b) {
				var l_ = ls.a;
				return $elm$core$Maybe$Just(l_);
			} else {
				var l_ = ls.a;
				var ls_ = ls.b;
				return $elm$core$Maybe$Just(
					A3(
						$elm$core$List$foldl,
						minBy,
						_Utils_Tuple2(
							l_,
							f(l_)),
						ls_).a);
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $ianmackenzie$elm_geometry$Vector2d$rotateCounterclockwise = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
		{x: -v.y, y: v.x});
};
var $ianmackenzie$elm_geometry$Vector2d$perpendicularTo = function (givenVector) {
	return $ianmackenzie$elm_geometry$Vector2d$rotateCounterclockwise(givenVector);
};
var $ianmackenzie$elm_geometry$LineSegment2d$perpendicularDirection = function (givenSegment) {
	return $ianmackenzie$elm_geometry$Vector2d$direction(
		$ianmackenzie$elm_geometry$Vector2d$perpendicularTo(
			$ianmackenzie$elm_geometry$LineSegment2d$vector(givenSegment)));
};
var $author$project$DomainModel$queryPointsUsingFilter = F4(
	function (filterFn, treeNode, foldFn, accum) {
		var helper = F4(
			function (starting, ending, someNode, myAccumulator) {
				if (A3(
					filterFn,
					starting,
					ending,
					$author$project$DomainModel$asRecord(treeNode))) {
					if (someNode.$ === 'Leaf') {
						var leaf = someNode.a;
						return A3(foldFn, starting, leaf, myAccumulator);
					} else {
						var node = someNode.a;
						return A4(
							helper,
							starting + $author$project$DomainModel$skipCount(node.left),
							ending,
							node.right,
							A4(
								helper,
								starting,
								ending - $author$project$DomainModel$skipCount(node.right),
								node.left,
								myAccumulator));
					}
				} else {
					return myAccumulator;
				}
			});
		return A4(
			helper,
			0,
			$author$project$DomainModel$skipCount(treeNode),
			treeNode,
			accum);
	});
var $elm_community$list_extra$List$Extra$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				if (accAcc.b) {
					var acc = accAcc.a;
					return A2(
						$elm$core$List$cons,
						A2(f, x, acc),
						accAcc);
				} else {
					return _List_Nil;
				}
			});
		return $elm$core$List$reverse(
			A3(
				$elm$core$List$foldl,
				scan1,
				_List_fromArray(
					[b]),
				xs));
	});
var $ianmackenzie$elm_geometry$Point2d$signedDistanceAlong = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var p = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var _v3 = axis.direction;
		var d = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y));
	});
var $ianmackenzie$elm_geometry$Geometry$Types$SmallNegative = {$: 'SmallNegative'};
var $ianmackenzie$elm_geometry$SweptAngle$smallNegative = $ianmackenzie$elm_geometry$Geometry$Types$SmallNegative;
var $ianmackenzie$elm_geometry$Geometry$Types$SmallPositive = {$: 'SmallPositive'};
var $ianmackenzie$elm_geometry$SweptAngle$smallPositive = $ianmackenzie$elm_geometry$Geometry$Types$SmallPositive;
var $elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
var $elm_community$list_extra$List$Extra$splitAt = F2(
	function (n, xs) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, n, xs),
			A2($elm$core$List$drop, n, xs));
	});
var $elm_community$list_extra$List$Extra$splitWhen = F2(
	function (predicate, list) {
		return A2(
			$elm$core$Maybe$map,
			function (i) {
				return A2($elm_community$list_extra$List$Extra$splitAt, i, list);
			},
			A2($elm_community$list_extra$List$Extra$findIndex, predicate, list));
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Axis2d = function (a) {
	return {$: 'Axis2d', a: a};
};
var $ianmackenzie$elm_geometry$Axis2d$through = F2(
	function (givenPoint, givenDirection) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Axis2d(
			{direction: givenDirection, originPoint: givenPoint});
	});
var $ianmackenzie$elm_geometry$Axis2d$throughPoints = F2(
	function (firstPoint, secondPoint) {
		var _v0 = A2($ianmackenzie$elm_geometry$Direction2d$from, firstPoint, secondPoint);
		if (_v0.$ === 'Just') {
			var axisDirection = _v0.a;
			return $elm$core$Maybe$Just(
				A2($ianmackenzie$elm_geometry$Axis2d$through, firstPoint, axisDirection));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm_community$maybe_extra$Maybe$Extra$toList = function (m) {
	if (m.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var x = m.a;
		return _List_fromArray(
			[x]);
	}
};
var $ianmackenzie$elm_geometry$LineSegment2d$mapEndpoints = F2(
	function (_function, lineSegment) {
		var _v0 = $ianmackenzie$elm_geometry$LineSegment2d$endpoints(lineSegment);
		var p1 = _v0.a;
		var p2 = _v0.b;
		return $ianmackenzie$elm_geometry$LineSegment2d$fromEndpoints(
			_Utils_Tuple2(
				_function(p1),
				_function(p2)));
	});
var $ianmackenzie$elm_geometry$LineSegment2d$translateBy = function (displacementVector) {
	return $ianmackenzie$elm_geometry$LineSegment2d$mapEndpoints(
		$ianmackenzie$elm_geometry$Point2d$translateBy(displacementVector));
};
var $ianmackenzie$elm_geometry$SketchPlane3d$originPoint = function (_v0) {
	var properties = _v0.a;
	return properties.originPoint;
};
var $ianmackenzie$elm_geometry$SketchPlane3d$translateBy = F2(
	function (vector, sketchPlane) {
		return $ianmackenzie$elm_geometry$SketchPlane3d$unsafe(
			{
				originPoint: A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					vector,
					$ianmackenzie$elm_geometry$SketchPlane3d$originPoint(sketchPlane)),
				xDirection: $ianmackenzie$elm_geometry$SketchPlane3d$xDirection(sketchPlane),
				yDirection: $ianmackenzie$elm_geometry$SketchPlane3d$yDirection(sketchPlane)
			});
	});
var $ianmackenzie$elm_geometry$Point2d$coordinates = function (_v0) {
	var p = _v0.a;
	return _Utils_Tuple2(
		$ianmackenzie$elm_units$Quantity$Quantity(p.x),
		$ianmackenzie$elm_units$Quantity$Quantity(p.y));
};
var $ianmackenzie$elm_geometry$BoundingBox2d$withDimensions = F2(
	function (_v0, givenCenterPoint) {
		var givenWidth = _v0.a;
		var givenHeight = _v0.b;
		var halfWidth = $ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$abs(givenWidth));
		var halfHeight = $ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$abs(givenHeight));
		var _v1 = $ianmackenzie$elm_geometry$Point2d$coordinates(givenCenterPoint);
		var x0 = _v1.a;
		var y0 = _v1.b;
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(
			{
				maxX: A2($ianmackenzie$elm_units$Quantity$plus, halfWidth, x0),
				maxY: A2($ianmackenzie$elm_units$Quantity$plus, halfHeight, y0),
				minX: A2($ianmackenzie$elm_units$Quantity$minus, halfWidth, x0),
				minY: A2($ianmackenzie$elm_units$Quantity$minus, halfHeight, y0)
			});
	});
var $ianmackenzie$elm_geometry$Vector2d$withLength = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var d = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: a * d.x, y: a * d.y});
	});
var $elm$core$Basics$asin = _Basics_asin;
var $ianmackenzie$elm_units$Angle$asin = function (x) {
	return $ianmackenzie$elm_units$Quantity$Quantity(
		$elm$core$Basics$asin(x));
};
var $ianmackenzie$elm_geometry$LineSegment2d$interpolate = F2(
	function (lineSegment, t) {
		var _v0 = $ianmackenzie$elm_geometry$LineSegment2d$endpoints(lineSegment);
		var start = _v0.a;
		var end = _v0.b;
		return A3($ianmackenzie$elm_geometry$Point2d$interpolateFrom, start, end, t);
	});
var $ianmackenzie$elm_geometry$LineSegment2d$midpoint = function (lineSegment) {
	return A2($ianmackenzie$elm_geometry$LineSegment2d$interpolate, lineSegment, 0.5);
};
var $ianmackenzie$elm_geometry$Point2d$translateIn = F3(
	function (_v0, _v1, _v2) {
		var d = _v0.a;
		var distance = _v1.a;
		var p = _v2.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p.x + (distance * d.x), y: p.y + (distance * d.y)});
	});
var $ianmackenzie$elm_geometry$Arc2d$withRadius = F4(
	function (givenRadius, givenSweptAngle, givenStartPoint, givenEndPoint) {
		var squaredRadius = $ianmackenzie$elm_units$Quantity$squared(givenRadius);
		var chord = A2($ianmackenzie$elm_geometry$LineSegment2d$from, givenStartPoint, givenEndPoint);
		var squaredHalfLength = $ianmackenzie$elm_units$Quantity$squared(
			A2(
				$ianmackenzie$elm_units$Quantity$multiplyBy,
				0.5,
				$ianmackenzie$elm_geometry$LineSegment2d$length(chord)));
		return A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, squaredHalfLength, squaredRadius) ? A2(
			$elm$core$Maybe$map,
			function (offsetDirection) {
				var offsetMagnitude = $ianmackenzie$elm_units$Quantity$sqrt(
					A2($ianmackenzie$elm_units$Quantity$minus, squaredHalfLength, squaredRadius));
				var offsetDistance = function () {
					switch (givenSweptAngle.$) {
						case 'SmallPositive':
							return offsetMagnitude;
						case 'SmallNegative':
							return $ianmackenzie$elm_units$Quantity$negate(offsetMagnitude);
						case 'LargeNegative':
							return offsetMagnitude;
						default:
							return $ianmackenzie$elm_units$Quantity$negate(offsetMagnitude);
					}
				}();
				var halfLength = $ianmackenzie$elm_units$Quantity$sqrt(squaredHalfLength);
				var shortAngle = A2(
					$ianmackenzie$elm_units$Quantity$multiplyBy,
					2,
					$ianmackenzie$elm_units$Angle$asin(
						A2($ianmackenzie$elm_units$Quantity$ratio, halfLength, givenRadius)));
				var sweptAngleInRadians = function () {
					switch (givenSweptAngle.$) {
						case 'SmallPositive':
							return shortAngle;
						case 'SmallNegative':
							return $ianmackenzie$elm_units$Quantity$negate(shortAngle);
						case 'LargePositive':
							return A2($ianmackenzie$elm_units$Quantity$minus, shortAngle, $ianmackenzie$elm_geometry$Arc2d$twoPi);
						default:
							return A2($ianmackenzie$elm_units$Quantity$minus, $ianmackenzie$elm_geometry$Arc2d$twoPi, shortAngle);
					}
				}();
				var computedCenterPoint = A3(
					$ianmackenzie$elm_geometry$Point2d$translateIn,
					offsetDirection,
					offsetDistance,
					$ianmackenzie$elm_geometry$LineSegment2d$midpoint(chord));
				return A3($ianmackenzie$elm_geometry$Arc2d$sweptAround, computedCenterPoint, sweptAngleInRadians, givenStartPoint);
			},
			$ianmackenzie$elm_geometry$LineSegment2d$perpendicularDirection(chord)) : $elm$core$Maybe$Nothing;
	});
var $author$project$Tools$CurveFormer$makeCurveIfPossible = F2(
	function (track, options) {
		var routeLength = $author$project$DomainModel$skipCount(track.trackTree);
		var circle = A2($author$project$Tools$CurveFormer$getCircle, options, track);
		var arcToSegments = function (arc) {
			var arcLength = $elm$core$Basics$abs(
				$ianmackenzie$elm_units$Length$inMeters(
					$ianmackenzie$elm_geometry$Arc2d$radius(arc)) * $ianmackenzie$elm_units$Angle$inRadians(
					$ianmackenzie$elm_geometry$Arc2d$sweptAngle(arc)));
			var entryArcNumSegments = A2(
				$elm$core$Basics$max,
				1,
				$elm$core$Basics$ceiling(
					arcLength / $ianmackenzie$elm_units$Length$inMeters(options.spacing)));
			return $ianmackenzie$elm_geometry$Polyline2d$segments(
				A2($ianmackenzie$elm_geometry$Arc2d$segments, entryArcNumSegments, arc));
		};
		var _v0 = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(0, 0) : $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var _v1 = _Utils_Tuple2(
			fromStart,
			$author$project$DomainModel$skipCount(track.trackTree) - fromEnd);
		var startRange = _v1.a;
		var endRange = _v1.b;
		var searchInterval = A2($ianmackenzie$elm_interval$Interval$from, startRange, endRange);
		var _v2 = _Utils_Tuple3(
			$ianmackenzie$elm_geometry$Circle3d$centerPoint(circle),
			$ianmackenzie$elm_geometry$Circle3d$axis(circle),
			A2(
				$ianmackenzie$elm_geometry$SketchPlane3d$translateBy,
				A2(
					$ianmackenzie$elm_geometry$Vector3d$withLength,
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(
						$ianmackenzie$elm_geometry$Circle3d$centerPoint(circle)),
					$ianmackenzie$elm_geometry$Direction3d$positiveZ),
				$ianmackenzie$elm_geometry$SketchPlane3d$xy));
		var centre = _v2.a;
		var axis = _v2.b;
		var drawingPlane = _v2.c;
		var isWithinPullRadius = function (pt) {
			return A2(
				$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
				options.pullRadius,
				A2($ianmackenzie$elm_geometry$Point3d$distanceFromAxis, axis, pt));
		};
		var isWithinPushRadius = function (pt) {
			return A2(
				$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
				options.pushRadius,
				A2($ianmackenzie$elm_geometry$Point3d$distanceFromAxis, axis, pt));
		};
		var isWithinDisc = function (pt) {
			return isWithinPullRadius(pt) && (!isWithinPushRadius(pt));
		};
		var centreOnPlane = A2($ianmackenzie$elm_geometry$Point3d$projectInto, drawingPlane, centre);
		var innerBox = A2(
			$ianmackenzie$elm_geometry$BoundingBox2d$withDimensions,
			_Utils_Tuple2(
				$ianmackenzie$elm_units$Quantity$twice(options.pushRadius),
				$ianmackenzie$elm_units$Quantity$twice(options.pushRadius)),
			centreOnPlane);
		var overlapsCircleAndRange = F3(
			function (start, end, road) {
				return A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$intersects,
					innerBox,
					$author$project$UtilsForViews$flatBox(road.boundingBox)) && A2(
					$ianmackenzie$elm_interval$Interval$intersects,
					searchInterval,
					A2($ianmackenzie$elm_interval$Interval$from, start, end));
			});
		var pointsWithinCircle = function () {
			var collector = F3(
				function (index, road, dict) {
					return isWithinPushRadius(road.startPoint) ? A3($elm$core$Dict$insert, index, road, dict) : dict;
				});
			return A4($author$project$DomainModel$queryPointsUsingFilter, overlapsCircleAndRange, track.trackTree, collector, $elm$core$Dict$empty);
		}();
		var outerBox = A2(
			$ianmackenzie$elm_geometry$BoundingBox2d$withDimensions,
			_Utils_Tuple2(
				$ianmackenzie$elm_units$Quantity$twice(options.pullRadius),
				$ianmackenzie$elm_units$Quantity$twice(options.pullRadius)),
			centreOnPlane);
		var overlapsDiscAndRange = F3(
			function (start, end, road) {
				return A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$intersects,
					outerBox,
					$author$project$UtilsForViews$flatBox(road.boundingBox)) && A2(
					$ianmackenzie$elm_interval$Interval$intersects,
					searchInterval,
					A2($ianmackenzie$elm_interval$Interval$from, start, end));
			});
		var pointsWithinDisc = function () {
			var collector = F3(
				function (index, road, dict) {
					return isWithinDisc(road.startPoint) ? A3($elm$core$Dict$insert, index, road, dict) : dict;
				});
			return A4($author$project$DomainModel$queryPointsUsingFilter, overlapsDiscAndRange, track.trackTree, collector, $elm$core$Dict$empty);
		}();
		var capturedRoadSections = A2($elm$core$Dict$union, pointsWithinCircle, pointsWithinDisc);
		var isLeftHandBend = function () {
			var runningAverageDirectionChange = F3(
				function (idx, road, change) {
					if (change.a.$ === 'Nothing') {
						var _v41 = change.a;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(road.directionAtStart),
							0.0);
					} else {
						var previousDirection = change.a.a;
						var prevTotal = change.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(road.directionAtStart),
							prevTotal + $ianmackenzie$elm_units$Angle$inDegrees(
								A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, previousDirection, road.directionAtStart)));
					}
				});
			var _v39 = A3(
				$elm$core$Dict$foldl,
				runningAverageDirectionChange,
				_Utils_Tuple2($elm$core$Maybe$Nothing, 0.0),
				capturedRoadSections);
			var changeInDirection = _v39.b;
			return changeInDirection < 0.0;
		}();
		var findAcceptableTransition = F3(
			function (mode, idx1, idx2) {
				var _v32 = _Utils_Tuple2(
					A2($author$project$DomainModel$earthPointFromIndex, idx1, track.trackTree),
					A2($author$project$DomainModel$earthPointFromIndex, idx2, track.trackTree));
				var tp1 = _v32.a;
				var tp2 = _v32.b;
				var entryLineSegment = A2(
					$ianmackenzie$elm_geometry$LineSegment2d$from,
					A2($ianmackenzie$elm_geometry$Point3d$projectInto, drawingPlane, tp1),
					A2($ianmackenzie$elm_geometry$Point3d$projectInto, drawingPlane, tp2));
				var entryLineAxis = A2(
					$ianmackenzie$elm_geometry$Axis2d$throughPoints,
					$ianmackenzie$elm_geometry$LineSegment2d$startPoint(entryLineSegment),
					$ianmackenzie$elm_geometry$LineSegment2d$endPoint(entryLineSegment));
				var entryLineShiftVector = function () {
					var shiftAmount = isLeftHandBend ? $ianmackenzie$elm_units$Quantity$negate(options.transitionRadius) : options.transitionRadius;
					return A2(
						$elm$core$Maybe$map,
						$ianmackenzie$elm_geometry$Vector2d$withLength(shiftAmount),
						$ianmackenzie$elm_geometry$LineSegment2d$perpendicularDirection(entryLineSegment));
				}();
				var shiftedEntryLine = function () {
					if (entryLineShiftVector.$ === 'Just') {
						var theVector = entryLineShiftVector.a;
						return $elm$core$Maybe$Just(
							A2($ianmackenzie$elm_geometry$LineSegment2d$translateBy, theVector, entryLineSegment));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}();
				var outerCircleIntersections = function () {
					if (shiftedEntryLine.$ === 'Just') {
						var line = shiftedEntryLine.a;
						var outerCircle = {
							centre: A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, centreOnPlane),
							radius: $ianmackenzie$elm_units$Length$inMeters(
								A2($ianmackenzie$elm_units$Quantity$plus, options.pushRadius, options.transitionRadius))
						};
						var lineEqn = A2(
							$author$project$Geometry101$lineEquationFromTwoPoints,
							A2(
								$ianmackenzie$elm_geometry$Point2d$toRecord,
								$ianmackenzie$elm_units$Length$inMeters,
								$ianmackenzie$elm_geometry$LineSegment2d$startPoint(line)),
							A2(
								$ianmackenzie$elm_geometry$Point2d$toRecord,
								$ianmackenzie$elm_units$Length$inMeters,
								$ianmackenzie$elm_geometry$LineSegment2d$endPoint(line)));
						return A2(
							$elm$core$List$map,
							$ianmackenzie$elm_geometry$Point2d$fromRecord($ianmackenzie$elm_units$Length$meters),
							A2($author$project$Geometry101$lineCircleIntersections, lineEqn, outerCircle));
					} else {
						return _List_Nil;
					}
				}();
				var validCounterBendCentresAndTangentPoints = function () {
					if (entryLineAxis.$ === 'Just') {
						var sameOldAxis = entryLineAxis.a;
						var selectionFunction = function () {
							if (mode.$ === 'EntryMode') {
								return $elm_community$list_extra$List$Extra$minimumBy(
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.distanceAlong;
										},
										$ianmackenzie$elm_units$Length$inMeters));
							} else {
								return $elm_community$list_extra$List$Extra$maximumBy(
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.distanceAlong;
										},
										$ianmackenzie$elm_units$Length$inMeters));
							}
						}();
						var elaborateIntersectionPoint = function (i) {
							var distanceAlong = A2($ianmackenzie$elm_geometry$Point2d$signedDistanceAlong, sameOldAxis, i);
							var tangentPoint2d = A2($ianmackenzie$elm_geometry$Point2d$along, sameOldAxis, distanceAlong);
							var bendJoinPoint = A3(
								$ianmackenzie$elm_geometry$Point2d$interpolateFrom,
								centreOnPlane,
								i,
								A2(
									$ianmackenzie$elm_units$Quantity$ratio,
									options.pushRadius,
									A2($ianmackenzie$elm_units$Quantity$plus, options.pushRadius, options.transitionRadius)));
							return {
								distanceAlong: distanceAlong,
								index: function () {
									if (mode.$ === 'EntryMode') {
										return idx1;
									} else {
										return idx2;
									}
								}(),
								intersection: i,
								joinsBendAt: bendJoinPoint,
								originalTrackPoint: function () {
									if (mode.$ === 'EntryMode') {
										return tp1;
									} else {
										return tp2;
									}
								}(),
								tangentPoint: tangentPoint2d
							};
						};
						return A2(
							$elm$core$List$filter,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.distanceAlong;
								},
								$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo(
									$ianmackenzie$elm_geometry$LineSegment2d$length(entryLineSegment))),
							A2(
								$elm$core$List$filter,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.distanceAlong;
									},
									$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo($ianmackenzie$elm_units$Quantity$zero)),
								$elm_community$maybe_extra$Maybe$Extra$toList(
									selectionFunction(
										A2($elm$core$List$map, elaborateIntersectionPoint, outerCircleIntersections)))));
					} else {
						return _List_Nil;
					}
				}();
				return $elm$core$List$head(validCounterBendCentresAndTangentPoints);
			});
		var entryCurveSeeker = F2(
			function (limit, index) {
				entryCurveSeeker:
				while (true) {
					var _v3 = _Utils_Tuple2(
						A2($author$project$DomainModel$earthPointFromIndex, index - 1, track.trackTree),
						A2($author$project$DomainModel$earthPointFromIndex, index, track.trackTree));
					var tp1 = _v3.a;
					var tp2 = _v3.b;
					var _v4 = A3(findAcceptableTransition, $author$project$Tools$CurveFormer$EntryMode, index - 1, index);
					if (_v4.$ === 'Just') {
						var transition = _v4.a;
						return $elm$core$Maybe$Just(transition);
					} else {
						if ((index > 1) && (limit > 0)) {
							var $temp$limit = limit - 1,
								$temp$index = index - 1;
							limit = $temp$limit;
							index = $temp$index;
							continue entryCurveSeeker;
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}
				}
			});
		var exitCurveSeeker = F2(
			function (limit, index) {
				exitCurveSeeker:
				while (true) {
					var _v5 = _Utils_Tuple2(
						A2($author$project$DomainModel$earthPointFromIndex, index, track.trackTree),
						A2($author$project$DomainModel$earthPointFromIndex, index + 1, track.trackTree));
					var tp1 = _v5.a;
					var tp2 = _v5.b;
					var _v6 = A3(findAcceptableTransition, $author$project$Tools$CurveFormer$ExitMode, index, index + 1);
					if (_v6.$ === 'Just') {
						var transition = _v6.a;
						return $elm$core$Maybe$Just(transition);
					} else {
						if ((_Utils_cmp(index, routeLength - 2) < 0) && (limit > 0)) {
							var $temp$limit = limit - 1,
								$temp$index = index + 1;
							limit = $temp$limit;
							index = $temp$index;
							continue exitCurveSeeker;
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}
				}
			});
		var _v7 = _Utils_Tuple2(
			A2(
				$elm$core$Maybe$andThen,
				entryCurveSeeker(100),
				$elm$core$List$head(
					$elm$core$Dict$keys(capturedRoadSections))),
			A2(
				$elm$core$Maybe$andThen,
				exitCurveSeeker(100),
				$elm_community$list_extra$List$Extra$last(
					$elm$core$Dict$keys(capturedRoadSections))));
		var entryInformation = _v7.a;
		var exitInformation = _v7.b;
		var entryCurve = function () {
			if (entryInformation.$ === 'Just') {
				var intersection = entryInformation.a.intersection;
				var distanceAlong = entryInformation.a.distanceAlong;
				var tangentPoint = entryInformation.a.tangentPoint;
				var joinsBendAt = entryInformation.a.joinsBendAt;
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						arcToSegments,
						A4(
							$ianmackenzie$elm_geometry$Arc2d$withRadius,
							options.transitionRadius,
							isLeftHandBend ? $ianmackenzie$elm_geometry$SweptAngle$smallNegative : $ianmackenzie$elm_geometry$SweptAngle$smallPositive,
							tangentPoint,
							joinsBendAt)));
			} else {
				return _List_Nil;
			}
		}();
		var attachmentPoints = function () {
			var _v30 = _Utils_Tuple2(entryInformation, exitInformation);
			if ((_v30.a.$ === 'Just') && (_v30.b.$ === 'Just')) {
				var entry = _v30.a.a;
				var exit = _v30.b.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(entry.index, exit.index));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var prepareOriginalAltitudesForInterpolation = function () {
			if (attachmentPoints.$ === 'Just') {
				var _v29 = attachmentPoints.a;
				var start = _v29.a;
				var end = _v29.b;
				var startDistance = A2($author$project$DomainModel$distanceFromIndex, start, track.trackTree);
				var originalSection = A2(
					$elm$core$List$map,
					$elm$core$Tuple$first,
					A3(
						$author$project$DomainModel$extractPointsInRange,
						start,
						$author$project$DomainModel$skipCount(track.trackTree) - end,
						track.trackTree));
				var endDistance = A2($author$project$DomainModel$distanceFromIndex, end, track.trackTree);
				var length = A2($ianmackenzie$elm_units$Quantity$minus, startDistance, endDistance);
				var altitudesByFraction = A2(
					$elm$core$List$map,
					function (idx) {
						var thisPointDistanceFromStart = A2($author$project$DomainModel$distanceFromIndex, idx, track.trackTree);
						return _Utils_Tuple2(
							A2(
								$ianmackenzie$elm_units$Quantity$ratio,
								A2($ianmackenzie$elm_units$Quantity$minus, startDistance, thisPointDistanceFromStart),
								length),
							$ianmackenzie$elm_geometry$Point3d$zCoordinate(
								A2($author$project$DomainModel$earthPointFromIndex, idx, track.trackTree)));
					},
					A2($elm$core$List$range, start, end));
				return altitudesByFraction;
			} else {
				return _List_Nil;
			}
		}();
		var interpolateOriginalAltitudesByDistance = function (fraction) {
			var twoSides = A2(
				$elm_community$list_extra$List$Extra$splitWhen,
				function (_v27) {
					var k = _v27.a;
					return _Utils_cmp(k, fraction) > -1;
				},
				prepareOriginalAltitudesForInterpolation);
			if (twoSides.$ === 'Just') {
				var _v15 = twoSides.a;
				var beforePairs = _v15.a;
				var afterPairs = _v15.b;
				var _v16 = _Utils_Tuple2(
					$elm_community$list_extra$List$Extra$last(beforePairs),
					$elm$core$List$head(afterPairs));
				var lastBefore = _v16.a;
				var firstAfter = _v16.b;
				var _v17 = _Utils_Tuple2(lastBefore, firstAfter);
				if (_v17.a.$ === 'Just') {
					if (_v17.b.$ === 'Just') {
						var _v18 = _v17.a.a;
						var priorFraction = _v18.a;
						var priorAltitude = _v18.b;
						var _v19 = _v17.b.a;
						var nextFraction = _v19.a;
						var nextAltitude = _v19.b;
						var _v20 = _Utils_Tuple2((nextFraction - fraction) / (nextFraction - priorFraction), (fraction - priorFraction) / (nextFraction - priorFraction));
						var beforeContribution = _v20.a;
						var afterContribution = _v20.b;
						return A2(
							$ianmackenzie$elm_units$Quantity$plus,
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, beforeContribution, priorAltitude),
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, afterContribution, nextAltitude));
					} else {
						var _v21 = _v17.a.a;
						var priorFraction = _v21.a;
						var priorAltitude = _v21.b;
						var _v22 = _v17.b;
						return priorAltitude;
					}
				} else {
					if (_v17.b.$ === 'Just') {
						var _v23 = _v17.a;
						var _v24 = _v17.b.a;
						var nextFraction = _v24.a;
						var nextAltitude = _v24.b;
						return nextAltitude;
					} else {
						var _v25 = _v17.a;
						var _v26 = _v17.b;
						return $ianmackenzie$elm_units$Quantity$zero;
					}
				}
			} else {
				return $ianmackenzie$elm_units$Quantity$zero;
			}
		};
		var exitCurve = function () {
			if (exitInformation.$ === 'Just') {
				var intersection = exitInformation.a.intersection;
				var distanceAlong = exitInformation.a.distanceAlong;
				var tangentPoint = exitInformation.a.tangentPoint;
				var joinsBendAt = exitInformation.a.joinsBendAt;
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						arcToSegments,
						A4(
							$ianmackenzie$elm_geometry$Arc2d$withRadius,
							options.transitionRadius,
							isLeftHandBend ? $ianmackenzie$elm_geometry$SweptAngle$smallNegative : $ianmackenzie$elm_geometry$SweptAngle$smallPositive,
							joinsBendAt,
							tangentPoint)));
			} else {
				return _List_Nil;
			}
		}();
		var theArcItself = function () {
			var _v10 = _Utils_Tuple2(entryInformation, exitInformation);
			if ((_v10.a.$ === 'Just') && (_v10.b.$ === 'Just')) {
				var entry = _v10.a.a;
				var exit = _v10.b.a;
				var _v11 = _Utils_Tuple2(
					A2($ianmackenzie$elm_geometry$Direction2d$from, centreOnPlane, entry.joinsBendAt),
					A2($ianmackenzie$elm_geometry$Direction2d$from, centreOnPlane, exit.joinsBendAt));
				var entryDirection = _v11.a;
				var exitDirection = _v11.b;
				var turn = A3($elm$core$Maybe$map2, $ianmackenzie$elm_geometry$Direction2d$angleFrom, entryDirection, exitDirection);
				if (turn.$ === 'Just') {
					var turnAngle = turn.a;
					return A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$map,
							arcToSegments,
							A4(
								$ianmackenzie$elm_geometry$Arc2d$withRadius,
								options.pushRadius,
								isLeftHandBend ? (A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, turnAngle) ? $ianmackenzie$elm_geometry$SweptAngle$smallPositive : $ianmackenzie$elm_geometry$SweptAngle$largePositive) : (A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, turnAngle) ? $ianmackenzie$elm_geometry$SweptAngle$smallNegative : $ianmackenzie$elm_geometry$SweptAngle$largeNegative),
								entry.joinsBendAt,
								exit.joinsBendAt)));
				} else {
					return _List_Nil;
				}
			} else {
				return _List_Nil;
			}
		}();
		var newBendEntirely = function () {
			var _v8 = _Utils_Tuple2(entryInformation, exitInformation);
			if ((_v8.a.$ === 'Just') && (_v8.b.$ === 'Just')) {
				var entry = _v8.a.a;
				var exit = _v8.b.a;
				var completeSegments = _Utils_ap(
					_List_Nil,
					_Utils_ap(
						entryCurve,
						_Utils_ap(
							theArcItself,
							_Utils_ap(
								exitCurve,
								_List_fromArray(
									[
										A2(
										$ianmackenzie$elm_geometry$LineSegment2d$from,
										exit.tangentPoint,
										A2($ianmackenzie$elm_geometry$Point3d$projectInto, drawingPlane, exit.originalTrackPoint))
									])))));
				var cumulativeDistances = A3(
					$elm_community$list_extra$List$Extra$scanl,
					F2(
						function (seg, run) {
							return A2(
								$ianmackenzie$elm_units$Quantity$plus,
								run,
								$ianmackenzie$elm_geometry$LineSegment2d$length(seg));
						}),
					$ianmackenzie$elm_units$Quantity$zero,
					completeSegments);
				var altitudeChange = A2(
					$ianmackenzie$elm_units$Quantity$minus,
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(entry.originalTrackPoint),
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(exit.originalTrackPoint));
				var actualNewLength = $ianmackenzie$elm_units$Quantity$sum(
					A2($elm$core$List$map, $ianmackenzie$elm_geometry$LineSegment2d$length, completeSegments));
				var adjustedAltitudes = A3(
					$elm$core$List$map2,
					F2(
						function (seg, dist) {
							var proportionalDistance = A2($ianmackenzie$elm_units$Quantity$ratio, dist, actualNewLength);
							var originalSegmentStart = $ianmackenzie$elm_geometry$LineSegment2d$startPoint(seg);
							var adjustment = A2($ianmackenzie$elm_units$Quantity$multiplyBy, proportionalDistance, altitudeChange);
							var newAltitude = function () {
								var _v9 = options.smoothGradient;
								if (_v9.$ === 'Holistic') {
									return A2(
										$ianmackenzie$elm_units$Quantity$plus,
										adjustment,
										$ianmackenzie$elm_geometry$Point3d$zCoordinate(entry.originalTrackPoint));
								} else {
									return interpolateOriginalAltitudesByDistance(proportionalDistance);
								}
							}();
							return A3(
								$ianmackenzie$elm_geometry$Point3d$xyz,
								$ianmackenzie$elm_geometry$Point2d$xCoordinate(originalSegmentStart),
								$ianmackenzie$elm_geometry$Point2d$yCoordinate(originalSegmentStart),
								newAltitude);
						}),
					A2($elm$core$List$drop, 0, completeSegments),
					cumulativeDistances);
				return adjustedAltitudes;
			} else {
				return _List_Nil;
			}
		}();
		return _Utils_update(
			options,
			{
				fixedAttachmentPoints: attachmentPoints,
				newTrackPoints: newBendEntirely,
				pointsAreContiguous: $author$project$Tools$CurveFormer$areContiguous(capturedRoadSections),
				pointsWithinCircle: pointsWithinCircle,
				pointsWithinDisc: pointsWithinDisc
			});
	});
var $ianmackenzie$elm_geometry$Vector2d$plus = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: v1.x + v2.x, y: v1.y + v2.y});
	});
var $author$project$Tools$CurveFormer$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			switch (_v0.b.$) {
				case 'SetPushRadius':
					var track = _v0.a.a;
					var radius = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{
								pushRadius: $ianmackenzie$elm_units$Length$meters(radius)
							}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'SetDiscWidth':
					var track = _v0.a.a;
					var width = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{
								pullRadius: A2(
									$ianmackenzie$elm_units$Quantity$plus,
									$ianmackenzie$elm_units$Length$meters(width),
									options.pushRadius)
							}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'SetTransitionRadius':
					var track = _v0.a.a;
					var radius = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{
								transitionRadius: $ianmackenzie$elm_units$Length$meters(radius)
							}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'SetSpacing':
					var track = _v0.a.a;
					var spacing = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{
								spacing: $ianmackenzie$elm_units$Length$meters(spacing)
							}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'ToggleUsePullRadius':
					var track = _v0.a.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{usePullRadius: !options.usePullRadius}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'SetGradientSmoothingMode':
					var track = _v0.a.a;
					var mode = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{smoothGradient: mode}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'DraggerGrab':
					var track = _v0.a.a;
					var offset = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{
							dragging: $elm$core$Maybe$Just(offset)
						});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'DraggerMove':
					var track = _v0.a.a;
					var offset = _v0.b.a;
					var _v1 = options.dragging;
					if (_v1.$ === 'Nothing') {
						return _Utils_Tuple2(options, _List_Nil);
					} else {
						var dragStart = _v1.a;
						var newVector = A2(
							$ianmackenzie$elm_geometry$Vector2d$plus,
							A2($ianmackenzie$elm_geometry$Vector2d$from, dragStart, offset),
							options.lastVector);
						var newOptions = A2(
							$author$project$Tools$CurveFormer$makeCurveIfPossible,
							track,
							_Utils_update(
								options,
								{
									referencePoint: _Utils_eq(options.referencePoint, $elm$core$Maybe$Nothing) ? $elm$core$Maybe$Just(
										A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree)) : options.referencePoint,
									vector: newVector
								}));
						return _Utils_Tuple2(
							newOptions,
							A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
					}
				case 'DraggerRelease':
					var track = _v0.a.a;
					var newOptions = _Utils_update(
						options,
						{dragging: $elm$core$Maybe$Nothing, lastVector: options.vector});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'DraggerReset':
					var track = _v0.a.a;
					var _v2 = _v0.b;
					var newOptions = _Utils_update(
						options,
						{dragging: $elm$core$Maybe$Nothing, lastVector: $ianmackenzie$elm_geometry$Vector2d$zero, referencePoint: $elm$core$Maybe$Nothing, vector: $ianmackenzie$elm_geometry$Vector2d$zero});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				default:
					var track = _v0.a.a;
					var _v3 = _v0.b;
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$CurveFormerApplyWithOptions(options),
								$author$project$Actions$TrackHasChanged
							]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$DeletePointsBetween = F2(
	function (a, b) {
		return {$: 'DeletePointsBetween', a: a, b: b};
	});
var $author$project$Actions$DeleteSinglePoint = F2(
	function (a, b) {
		return {$: 'DeleteSinglePoint', a: a, b: b};
	});
var $author$project$Tools$DeletePoints$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			var track = _v0.a.a;
			var _v1 = _v0.b;
			var _v2 = $author$project$TrackLoaded$getRangeFromMarkers(track);
			var fromStart = _v2.a;
			var fromEnd = _v2.b;
			var action = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? A2($author$project$Actions$DeleteSinglePoint, fromStart, fromEnd) : A2($author$project$Actions$DeletePointsBetween, fromStart, fromEnd);
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[action, $author$project$Actions$TrackHasChanged]));
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Tools$DirectionChanges$actions = F3(
	function (options, previewColour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: previewColour,
					points: A2(
						$author$project$DomainModel$buildPreview,
						A2($elm$core$List$map, $elm$core$Tuple$first, options.breaches),
						track.trackTree),
					shape: $author$project$Actions$PreviewCircle,
					tag: 'kinks'
				})
			]);
	});
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $author$project$Tools$DirectionChanges$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(msg, hasTrack);
		_v0$6:
		while (true) {
			switch (_v0.a.$) {
				case 'SetMode':
					if (_v0.b.$ === 'Just') {
						var mode = _v0.a.a;
						var track = _v0.b.a;
						var newOptions = _Utils_update(
							options,
							{breaches: _List_Nil, mode: mode});
						var populatedOptions = A2($author$project$Tools$DirectionChanges$findDirectionChanges, newOptions, track.trackTree);
						return _Utils_Tuple2(
							populatedOptions,
							A3($author$project$Tools$DirectionChanges$actions, populatedOptions, previewColour, track));
					} else {
						break _v0$6;
					}
				case 'ViewNext':
					var _v1 = _v0.a;
					var breachIndex = A2(
						$elm$core$Basics$min,
						$elm$core$List$length(options.breaches) - 1,
						options.currentBreach + 1);
					var newOptions = _Utils_update(
						options,
						{currentBreach: breachIndex});
					var _v2 = A2(
						$elm$core$Maybe$withDefault,
						_Utils_Tuple2(
							0,
							$ianmackenzie$elm_units$Angle$degrees(0)),
						A2($elm_community$list_extra$List$Extra$getAt, breachIndex, newOptions.breaches));
					var position = _v2.a;
					return _Utils_Tuple2(
						newOptions,
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position)
							]));
				case 'ViewPrevious':
					var _v3 = _v0.a;
					var breachIndex = A2($elm$core$Basics$max, 0, options.currentBreach - 1);
					var newOptions = _Utils_update(
						options,
						{currentBreach: breachIndex});
					var _v4 = A2(
						$elm$core$Maybe$withDefault,
						_Utils_Tuple2(
							0,
							$ianmackenzie$elm_units$Angle$degrees(0)),
						A2($elm_community$list_extra$List$Extra$getAt, breachIndex, newOptions.breaches));
					var position = _v4.a;
					return _Utils_Tuple2(
						newOptions,
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position)
							]));
				case 'SetCurrentPosition':
					var position = _v0.a.a;
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position)
							]));
				case 'SetThreshold':
					if (_v0.b.$ === 'Just') {
						var angle = _v0.a.a;
						var track = _v0.b.a;
						var newOptions = _Utils_update(
							options,
							{threshold: angle});
						var populatedOptions = A2($author$project$Tools$DirectionChanges$findDirectionChanges, newOptions, track.trackTree);
						return _Utils_Tuple2(
							populatedOptions,
							A3($author$project$Tools$DirectionChanges$actions, options, previewColour, track));
					} else {
						break _v0$6;
					}
				default:
					if (_v0.b.$ === 'Just') {
						var radius = _v0.a.a;
						var track = _v0.b.a;
						var newOptions = _Utils_update(
							options,
							{radius: radius});
						var populatedOptions = A2($author$project$Tools$DirectionChanges$findDirectionChanges, newOptions, track.trackTree);
						return _Utils_Tuple2(
							populatedOptions,
							A3($author$project$Tools$DirectionChanges$actions, options, previewColour, track));
					} else {
						break _v0$6;
					}
			}
		}
		return _Utils_Tuple2(options, _List_Nil);
	});
var $author$project$Tools$DisplaySettingsOptions$encodeCurtain = function (style) {
	return $elm$json$Json$Encode$string(
		function () {
			switch (style.$) {
				case 'NoCurtain':
					return 'NoCurtain';
				case 'PlainCurtain':
					return 'PlainCurtain';
				default:
					return 'PastelCurtain';
			}
		}());
};
var $author$project$Tools$DisplaySettingsOptions$encode = function (options) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'surface',
				$elm$json$Json$Encode$bool(options.roadSurface)),
				_Utils_Tuple2(
				'ground',
				$elm$json$Json$Encode$bool(options.groundPlane)),
				_Utils_Tuple2(
				'centre',
				$elm$json$Json$Encode$bool(options.centreLine)),
				_Utils_Tuple2(
				'curtain',
				$author$project$Tools$DisplaySettingsOptions$encodeCurtain(options.curtainStyle))
			]));
};
var $author$project$Tools$DisplaySettings$update = F2(
	function (msg, options) {
		var actions = function (newOptions) {
			return _List_fromArray(
				[
					A2(
					$author$project$Actions$StoreLocally,
					'visuals',
					$author$project$Tools$DisplaySettingsOptions$encode(newOptions))
				]);
		};
		switch (msg.$) {
			case 'SetCentreLine':
				var state = msg.a;
				var newOptions = _Utils_update(
					options,
					{centreLine: state});
				return _Utils_Tuple2(
					newOptions,
					actions(newOptions));
			case 'SetGroundPlane':
				var state = msg.a;
				var newOptions = _Utils_update(
					options,
					{groundPlane: state});
				return _Utils_Tuple2(
					newOptions,
					actions(newOptions));
			case 'SetRoadSurface':
				var state = msg.a;
				var newOptions = _Utils_update(
					options,
					{roadSurface: state});
				return _Utils_Tuple2(
					newOptions,
					actions(newOptions));
			default:
				var curtainStyle = msg.a;
				var newOptions = _Utils_update(
					options,
					{curtainStyle: curtainStyle});
				return _Utils_Tuple2(
					newOptions,
					actions(newOptions));
		}
	});
var $author$project$Tools$GradientProblems$findSteepClimbs = F2(
	function (options, tree) {
		var foldFn = F2(
			function (road, _v1) {
				var index = _v1.a;
				var outputs = _v1.b;
				return (_Utils_cmp(road.gradientAtStart, options.threshold) > 0) ? _Utils_Tuple2(
					index + 1,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(index, road.gradientAtStart),
						outputs)) : _Utils_Tuple2(index + 1, outputs);
			});
		var _v0 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(tree),
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			tree,
			foldFn,
			_Utils_Tuple2(0, _List_Nil));
		var breaches = _v0.b;
		return _Utils_update(
			options,
			{
				breaches: $elm$core$List$reverse(breaches),
				currentBreach: 0
			});
	});
var $author$project$Tools$GradientProblems$findSteepDescents = F2(
	function (options, tree) {
		var foldFn = F2(
			function (road, _v1) {
				var index = _v1.a;
				var outputs = _v1.b;
				return (_Utils_cmp(0.0 - road.gradientAtStart, options.threshold) > 0) ? _Utils_Tuple2(
					index + 1,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(index, road.gradientAtStart),
						outputs)) : _Utils_Tuple2(index + 1, outputs);
			});
		var _v0 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(tree),
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			tree,
			foldFn,
			_Utils_Tuple2(0, _List_Nil));
		var breaches = _v0.b;
		return _Utils_update(
			options,
			{
				breaches: $elm$core$List$reverse(breaches),
				currentBreach: 0
			});
	});
var $author$project$Tools$GradientProblems$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var populateOptions = F2(
			function (opts, track) {
				var _v5 = opts.mode;
				switch (_v5.$) {
					case 'AbruptChange':
						return A2($author$project$Tools$GradientProblems$findAbruptDirectionChanges, opts, track.trackTree);
					case 'SteepClimb':
						return A2($author$project$Tools$GradientProblems$findSteepClimbs, opts, track.trackTree);
					default:
						return A2($author$project$Tools$GradientProblems$findSteepDescents, opts, track.trackTree);
				}
			});
		var actions = F2(
			function (opts, track) {
				return _List_fromArray(
					[
						$author$project$Actions$ShowPreview(
						{
							colour: previewColour,
							points: A2(
								$author$project$DomainModel$buildPreview,
								A2($elm$core$List$map, $elm$core$Tuple$first, opts.breaches),
								track.trackTree),
							shape: $author$project$Actions$PreviewCircle,
							tag: 'ridge'
						})
					]);
			});
		switch (msg.$) {
			case 'ViewNext':
				var breachIndex = A2(
					$elm$core$Basics$min,
					$elm$core$List$length(options.breaches) - 1,
					options.currentBreach + 1);
				var newOptions = _Utils_update(
					options,
					{currentBreach: breachIndex});
				var _v1 = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(0, 0),
					A2($elm_community$list_extra$List$Extra$getAt, breachIndex, newOptions.breaches));
				var position = _v1.a;
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(position)
						]));
			case 'ViewPrevious':
				var breachIndex = A2($elm$core$Basics$max, 0, options.currentBreach - 1);
				var newOptions = _Utils_update(
					options,
					{currentBreach: breachIndex});
				var _v2 = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(0, 0),
					A2($elm_community$list_extra$List$Extra$getAt, breachIndex, newOptions.breaches));
				var position = _v2.a;
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(position)
						]));
			case 'SetCurrentPosition':
				var position = msg.a;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(position)
						]));
			case 'SetThreshold':
				var value = msg.a;
				var newOptions = _Utils_update(
					options,
					{breaches: _List_Nil, threshold: value});
				if (hasTrack.$ === 'Just') {
					var track = hasTrack.a;
					var populatedOptions = A2(populateOptions, newOptions, track);
					return _Utils_Tuple2(
						populatedOptions,
						A2(actions, populatedOptions, track));
				} else {
					return _Utils_Tuple2(newOptions, _List_Nil);
				}
			default:
				var mode = msg.a;
				var newOptions = _Utils_update(
					options,
					{breaches: _List_Nil, mode: mode});
				if (hasTrack.$ === 'Just') {
					var track = hasTrack.a;
					var populatedOptions = A2(populateOptions, newOptions, track);
					return _Utils_Tuple2(
						populatedOptions,
						A2(actions, populatedOptions, track));
				} else {
					return _Utils_Tuple2(newOptions, _List_Nil);
				}
		}
	});
var $author$project$Actions$ApplyInterpolateWithOptions = function (a) {
	return {$: 'ApplyInterpolateWithOptions', a: a};
};
var $author$project$Tools$Interpolate$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			switch (_v0.b.$) {
				case 'SetSpacing':
					var track = _v0.a.a;
					var spacing = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{
							minimumSpacing: $ianmackenzie$elm_units$Length$meters(spacing)
						});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$Interpolate$actions, newOptions, previewColour, track));
				case 'SetExtent':
					var track = _v0.a.a;
					var extent = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{extent: extent});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$Interpolate$actions, newOptions, previewColour, track));
				default:
					var track = _v0.a.a;
					var _v1 = _v0.b;
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$ApplyInterpolateWithOptions(options),
								$author$project$Actions$TrackHasChanged
							]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$LimitGradientWithOptions = function (a) {
	return {$: 'LimitGradientWithOptions', a: a};
};
var $author$project$Tools$LimitGradients$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(msg, hasTrack);
		if (_v0.b.$ === 'Just') {
			switch (_v0.a.$) {
				case 'SetExtent':
					var extent = _v0.a.a;
					var track = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$LimitGradients$putPreviewInOptions,
						track,
						_Utils_update(
							options,
							{extent: extent}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$LimitGradients$actions, newOptions, previewColour, track));
				case 'SetMaximumAscent':
					var up = _v0.a.a;
					var track = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$LimitGradients$putPreviewInOptions,
						track,
						_Utils_update(
							options,
							{maximumAscent: up}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$LimitGradients$actions, newOptions, previewColour, track));
				case 'SetMaximumDescent':
					var down = _v0.a.a;
					var track = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$LimitGradients$putPreviewInOptions,
						track,
						_Utils_update(
							options,
							{maximumDescent: down}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$LimitGradients$actions, newOptions, previewColour, track));
				default:
					var _v1 = _v0.a;
					var track = _v0.b.a;
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$LimitGradientWithOptions(options),
								$author$project$Actions$TrackHasChanged
							]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$NudgeApplyWithOptions = function (a) {
	return {$: 'NudgeApplyWithOptions', a: a};
};
var $author$project$Tools$Nudge$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			switch (_v0.b.$) {
				case 'SetHorizontalNudgeFactor':
					var track = _v0.a.a;
					var value = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{horizontal: value});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$Nudge$previewActions, newOptions, previewColour, track));
				case 'SetVerticalNudgeFactor':
					var track = _v0.a.a;
					var value = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{vertical: value});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$Nudge$previewActions, newOptions, previewColour, track));
				case 'SetFadeExtent':
					var track = _v0.a.a;
					var value = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{fadeExtent: value});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$Nudge$previewActions, newOptions, previewColour, track));
				case 'ZeroNudgeFactors':
					var track = _v0.a.a;
					var _v1 = _v0.b;
					return _Utils_Tuple2(
						$author$project$Tools$Nudge$defaultOptions,
						_List_fromArray(
							[
								$author$project$Actions$HidePreview('nudge')
							]));
				default:
					var track = _v0.a.a;
					var _v2 = _v0.b;
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$NudgeApplyWithOptions(options),
								$author$project$Actions$TrackHasChanged
							]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$OutAndBackApplyWithOptions = function (a) {
	return {$: 'OutAndBackApplyWithOptions', a: a};
};
var $author$project$Tools$OutAndBack$update = F3(
	function (msg, options, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			if (_v0.b.$ === 'SetOffset') {
				var track = _v0.a.a;
				var offset = _v0.b.a;
				var newOptions = _Utils_update(
					options,
					{offset: offset});
				return _Utils_Tuple2(newOptions, _List_Nil);
			} else {
				var track = _v0.a.a;
				var _v1 = _v0.b;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$OutAndBackApplyWithOptions(options),
							$author$project$Actions$TrackHasChanged
						]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$SetMarker = function (a) {
	return {$: 'SetMarker', a: a};
};
var $author$project$Tools$Pointers$update = F4(
	function (msg, options, previewColour, hasTrack) {
		if (hasTrack.$ === 'Nothing') {
			return _Utils_Tuple2(options, _List_Nil);
		} else {
			var track = hasTrack.a;
			var restrictToTrack = F2(
				function (value, increment) {
					return A3(
						$elm$core$Basics$clamp,
						0,
						$author$project$DomainModel$skipCount(track.trackTree),
						value + increment);
				});
			var orange = track.currentPosition;
			switch (msg.$) {
				case 'PointerForwardOne':
					var position = A2(restrictToTrack, orange, 1);
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{orange: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$TrackHasChanged
							]));
				case 'PointerBackwardOne':
					var position = A2(restrictToTrack, orange, -1);
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{orange: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$TrackHasChanged
							]));
				case 'PointerFastForward':
					var position = A2(
						restrictToTrack,
						orange,
						($author$project$DomainModel$skipCount(track.trackTree) / 20) | 0);
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{orange: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$TrackHasChanged
							]));
				case 'PointerRewind':
					var position = A2(
						restrictToTrack,
						orange,
						0 - (($author$project$DomainModel$skipCount(track.trackTree) / 20) | 0));
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{orange: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$TrackHasChanged
							]));
				case 'DropMarker':
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{
								purple: $elm$core$Maybe$Just(orange)
							}),
						_List_fromArray(
							[
								$author$project$Actions$SetMarker(
								$elm$core$Maybe$Just(orange)),
								$author$project$Actions$TrackHasChanged
							]));
				case 'LiftMarker':
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{purple: $elm$core$Maybe$Nothing}),
						_List_fromArray(
							[
								$author$project$Actions$SetMarker($elm$core$Maybe$Nothing),
								$author$project$Actions$TrackHasChanged
							]));
				case 'MarkerForwardOne':
					var position = function () {
						var _v2 = options.purple;
						if (_v2.$ === 'Just') {
							var something = _v2.a;
							return $elm$core$Maybe$Just(
								A2(restrictToTrack, something, 1));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{purple: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetMarker(position),
								$author$project$Actions$TrackHasChanged
							]));
				default:
					var position = function () {
						var _v3 = options.purple;
						if (_v3.$ === 'Just') {
							var something = _v3.a;
							return $elm$core$Maybe$Just(
								A2(restrictToTrack, something, -1));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{purple: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetMarker(position),
								$author$project$Actions$TrackHasChanged
							]));
			}
		}
	});
var $author$project$Actions$ApplySimplify = {$: 'ApplySimplify'};
var $author$project$Tools$Simplify$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(msg, hasTrack);
		_v0$2:
		while (true) {
			if (_v0.a.$ === 'Seek') {
				if (_v0.b.$ === 'Just') {
					var _v1 = _v0.a;
					var track = _v0.b.a;
					var newOptions = A2($author$project$Tools$Simplify$findSimplifications, options, track.trackTree);
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$Simplify$actions, previewColour, newOptions, track));
				} else {
					break _v0$2;
				}
			} else {
				if (_v0.b.$ === 'Just') {
					var _v2 = _v0.a;
					var track = _v0.b.a;
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[$author$project$Actions$ApplySimplify, $author$project$Actions$TrackHasChanged]));
				} else {
					break _v0$2;
				}
			}
		}
		return _Utils_Tuple2(options, _List_Nil);
	});
var $author$project$Tools$TrackInfoBox$update = F2(
	function (msg, options) {
		var mode = msg.a;
		return _Utils_update(
			options,
			{displayMode: mode});
	});
var $author$project$Actions$RedoUndoneAction = {$: 'RedoUndoneAction'};
var $author$project$Actions$UndoLastAction = {$: 'UndoLastAction'};
var $author$project$Tools$UndoRedo$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			if (_v0.b.$ === 'Undo') {
				var track = _v0.a.a;
				var _v1 = _v0.b;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[$author$project$Actions$UndoLastAction, $author$project$Actions$TrackHasChanged]));
			} else {
				var track = _v0.a.a;
				var _v2 = _v0.b;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[$author$project$Actions$RedoUndoneAction, $author$project$Actions$TrackHasChanged]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$ToolsController$update = F4(
	function (toolMsg, isTrack, msgWrapper, options) {
		switch (toolMsg.$) {
			case 'ToolNoOp':
				return _Utils_Tuple2(options, _List_Nil);
			case 'ToolPopupToggle':
				var toolType = toolMsg.a;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{
							tools: A2(
								$elm$core$List$map,
								$author$project$ToolsController$toggleToolPopup(toolType),
								options.tools)
						}),
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolDockSelect':
				var toolType = toolMsg.a;
				var toolDock = toolMsg.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{
							tools: A2(
								$elm$core$List$map,
								A2($author$project$ToolsController$setDock, toolType, toolDock),
								options.tools)
						}),
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolColourSelect':
				var toolType = toolMsg.a;
				var color = toolMsg.b;
				var newOptions = _Utils_update(
					options,
					{
						tools: A2(
							$elm$core$List$map,
							A2($author$project$ToolsController$setColour, toolType, color),
							options.tools)
					});
				return A2($author$project$ToolsController$isToolOpen, toolType, options.tools) ? A4($author$project$ToolsController$toolStateHasChanged, toolType, $author$project$ToolsController$Expanded, isTrack, newOptions) : _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolStateToggle':
				var toolType = toolMsg.a;
				var newState = toolMsg.b;
				return A4(
					$author$project$ToolsController$toolStateHasChanged,
					toolType,
					newState,
					isTrack,
					_Utils_update(
						options,
						{
							tools: A2(
								$elm$core$List$map,
								A2($author$project$ToolsController$setToolState, toolType, newState),
								options.tools)
						}));
			case 'DirectionChanges':
				var msg = toolMsg.a;
				var _v1 = A4(
					$author$project$Tools$DirectionChanges$update,
					msg,
					options.directionChangeOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolAbruptDirectionChanges, options.tools),
					isTrack);
				var newOptions = _v1.a;
				var actions = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{directionChangeOptions: newOptions}),
					actions);
			case 'ToolGradientChangeMsg':
				var msg = toolMsg.a;
				var _v2 = A4(
					$author$project$Tools$GradientProblems$update,
					msg,
					options.gradientProblemOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolGradientProblems, options.tools),
					isTrack);
				var newOptions = _v2.a;
				var actions = _v2.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{gradientProblemOptions: newOptions}),
					actions);
			case 'DeletePoints':
				var msg = toolMsg.a;
				var _v3 = A4(
					$author$project$Tools$DeletePoints$update,
					msg,
					options.deleteOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolDeletePoints, options.tools),
					isTrack);
				var newOptions = _v3.a;
				var actions = _v3.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{deleteOptions: newOptions}),
					actions);
			case 'PointerMsg':
				var msg = toolMsg.a;
				var _v4 = A4(
					$author$project$Tools$Pointers$update,
					msg,
					options.pointerOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolPointers, options.tools),
					isTrack);
				var newOptions = _v4.a;
				var actions = _v4.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{pointerOptions: newOptions}),
					actions);
			case 'UndoRedoMsg':
				var msg = toolMsg.a;
				var _v5 = A4(
					$author$project$Tools$UndoRedo$update,
					msg,
					options.undoRedoOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolUndoRedo, options.tools),
					isTrack);
				var newOptions = _v5.a;
				var actions = _v5.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{undoRedoOptions: newOptions}),
					actions);
			case 'ToolBezierMsg':
				var msg = toolMsg.a;
				var _v6 = A4(
					$author$project$Tools$BezierSplines$update,
					msg,
					options.bezierSplineOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolBezierSplines, options.tools),
					isTrack);
				var newOptions = _v6.a;
				var actions = _v6.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{bezierSplineOptions: newOptions}),
					actions);
			case 'ToolCentroidMsg':
				var msg = toolMsg.a;
				var _v7 = A4(
					$author$project$Tools$CentroidAverage$update,
					msg,
					options.centroidAverageOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolCentroidAverage, options.tools),
					isTrack);
				var newOptions = _v7.a;
				var actions = _v7.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{centroidAverageOptions: newOptions}),
					actions);
			case 'ToolCurveFormerMsg':
				var msg = toolMsg.a;
				var _v8 = A4(
					$author$project$Tools$CurveFormer$update,
					msg,
					options.curveFormerOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolCurveFormer, options.tools),
					isTrack);
				var newOptions = _v8.a;
				var actions = _v8.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{curveFormerOptions: newOptions}),
					actions);
			case 'ToolBendSmootherMsg':
				var msg = toolMsg.a;
				var _v9 = A4(
					$author$project$Tools$BendSmoother$update,
					msg,
					options.bendSmootherOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolBendSmoother, options.tools),
					isTrack);
				var newOptions = _v9.a;
				var actions = _v9.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{bendSmootherOptions: newOptions}),
					actions);
			case 'ToolNudgeMsg':
				var msg = toolMsg.a;
				var _v10 = A4(
					$author$project$Tools$Nudge$update,
					msg,
					options.nudgeOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolNudge, options.tools),
					isTrack);
				var newOptions = _v10.a;
				var actions = _v10.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{nudgeOptions: newOptions}),
					actions);
			case 'ToggleImperial':
				var newOptions = _Utils_update(
					options,
					{imperial: !options.imperial});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'measure',
							$elm$json$Json$Encode$bool(newOptions.imperial))
						]));
			case 'ToolInfoMsg':
				var infoMsg = toolMsg.a;
				var newOptions = A2($author$project$Tools$TrackInfoBox$update, infoMsg, options.infoOptions);
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{infoOptions: newOptions}),
					_List_Nil);
			case 'ToolDisplaySettingMsg':
				var m = toolMsg.a;
				var _v11 = A2($author$project$Tools$DisplaySettings$update, m, options.displaySettings);
				var newOptions = _v11.a;
				var actions = _v11.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{displaySettings: newOptions}),
					actions);
			case 'ToolOutAndBackMsg':
				var msg = toolMsg.a;
				var _v12 = A3($author$project$Tools$OutAndBack$update, msg, options.outAndBackSettings, isTrack);
				var newOptions = _v12.a;
				var actions = _v12.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{outAndBackSettings: newOptions}),
					actions);
			case 'ToolSimplifyMsg':
				var msg = toolMsg.a;
				var _v13 = A4(
					$author$project$Tools$Simplify$update,
					msg,
					options.simplifySettings,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolSimplify, options.tools),
					isTrack);
				var newOptions = _v13.a;
				var actions = _v13.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{simplifySettings: newOptions}),
					actions);
			case 'ToolInterpolateMsg':
				var msg = toolMsg.a;
				var _v14 = A4(
					$author$project$Tools$Interpolate$update,
					msg,
					options.interpolateSettings,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolInterpolate, options.tools),
					isTrack);
				var newOptions = _v14.a;
				var actions = _v14.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{interpolateSettings: newOptions}),
					actions);
			default:
				var msg = toolMsg.a;
				var _v15 = A4(
					$author$project$Tools$LimitGradients$update,
					msg,
					options.limitGradientSettings,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolLimitGradient, options.tools),
					isTrack);
				var newOptions = _v15.a;
				var actions = _v15.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{limitGradientSettings: newOptions}),
					actions);
		}
	});
var $author$project$WriteGPX$writeFooter = '</gpx>';
var $author$project$WriteGPX$preamble = '<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<gpx version="1.1"\n  creator="https://www.stepwiserefinement.co.uk"\n  xmlns="http://www.topografix.com/GPX/1/1"\n  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xsi:schemaLocation="http://www.topografix.com/GPX/1/1\n  http://www.topografix.com/GPX/1/1/gpx.xsd">\n  <metadata>\n    <name>Cycling</name>\n    <author>\n      <link href="https://www.stepwiserefinement.co.uk">\n        <text>GPXmagic 2.0</text>\n        <type>text/html</type>\n      </link>\n    </author>\n  </metadata>\n';
var $author$project$WriteGPX$writePreamble = $author$project$WriteGPX$preamble;
var $elm$core$String$fromFloat = _String_fromNumber;
var $author$project$WriteGPX$writeTrackPoint = function (gpx) {
	return '<trkpt lat=\"' + ($elm$core$String$fromFloat(
		$ianmackenzie$elm_units$Angle$inDegrees(gpx.latitude)) + ('\" lon=\"' + ($elm$core$String$fromFloat(
		$ianmackenzie$elm_units$Angle$inDegrees(
			$ianmackenzie$elm_geometry$Direction2d$toAngle(gpx.longitude))) + ('\">' + ('<ele>' + ($elm$core$String$fromFloat(
		$ianmackenzie$elm_units$Length$inMeters(gpx.altitude)) + ('</ele>' + '</trkpt>\n')))))));
};
var $author$project$WriteGPX$writeTrack = F2(
	function (name, trackPoints) {
		return '\n  <trk>\n    <name>' + (name + ('</name>\n    <trkseg>\n' + ($elm$core$String$concat(
			A2($elm$core$List$map, $author$project$WriteGPX$writeTrackPoint, trackPoints)) + '    </trkseg>\n  </trk>\n ')));
	});
var $author$project$WriteGPX$writeGPX = F2(
	function (name, track) {
		var useName = function () {
			if (name.$ === 'Just') {
				var n = name.a;
				return n;
			} else {
				return 'A track from GPXmagic';
			}
		}();
		var points = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
		return _Utils_ap(
			$author$project$WriteGPX$writePreamble,
			_Utils_ap(
				A2($author$project$WriteGPX$writeTrack, useName, points),
				$author$project$WriteGPX$writeFooter));
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'AdjustTimeZone':
				var newZone = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{zone: newZone}),
					$author$project$MyIP$requestIpInformation($author$project$Main$ReceivedIpDetails));
			case 'DismissModalMessage':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{modalMessage: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 'ReceivedIpDetails':
				var response = msg.a;
				var ipInfo = $author$project$MyIP$processIpInfo(response);
				var mapInfoWithLocation = function () {
					if (ipInfo.$ === 'Just') {
						var ip = ipInfo.a;
						return {centreLat: ip.latitude, centreLon: ip.longitude, mapZoom: 10.0};
					} else {
						return {centreLat: 0.0, centreLon: 0.0, mapZoom: 1.0};
					}
				}();
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ipInfo: ipInfo}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$MapPortController$createMap(mapInfoWithLocation),
								A3($author$project$MyIP$sendIpInfo, model.time, $author$project$Main$IpInfoAcknowledged, ipInfo)
							])));
			case 'IpInfoAcknowledged':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GpxRequested':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							modalMessage: $elm$core$Maybe$Just('Select GPX file')
						}),
					A2(
						$elm$file$File$Select$file,
						_List_fromArray(
							['text/gpx']),
						$author$project$Main$GpxSelected));
			case 'GpxSelected':
				var file = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							filename: $elm$core$Maybe$Just(
								$elm$file$File$name(file)),
							modalMessage: $elm$core$Maybe$Just(
								'Loading ' + $elm$file$File$name(file))
						}),
					A2(
						$elm$core$Task$perform,
						$author$project$Main$GpxLoaded,
						$elm$file$File$toString(file)));
			case 'GpxLoaded':
				var content = msg.a;
				var gpxTrack = $author$project$GpxParser$parseGPXPoints(content);
				var trackTree = $author$project$DomainModel$treeFromSourcePoints(gpxTrack);
				if (trackTree.$ === 'Just') {
					var aTree = trackTree.a;
					var newTrack = {
						currentPosition: 0,
						markerPosition: $elm$core$Maybe$Nothing,
						redos: _List_Nil,
						referenceLonLat: A2(
							$elm$core$Maybe$withDefault,
							A3($author$project$DomainModel$GPXSource, $ianmackenzie$elm_geometry$Direction2d$x, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero),
							$elm$core$List$head(gpxTrack)),
						renderDepth: 10,
						trackName: $author$project$GpxParser$parseTrackName(content),
						trackTree: aTree,
						undos: _List_Nil
					};
					var modelWithTrack = _Utils_update(
						model,
						{
							modalMessage: $elm$core$Maybe$Nothing,
							paneLayoutOptions: A2($author$project$PaneLayoutManager$initialise, newTrack, model.paneLayoutOptions),
							track: $elm$core$Maybe$Just(newTrack)
						});
					var actions = _List_fromArray(
						[$author$project$Actions$TrackHasChanged, $author$project$Actions$MapRefresh]);
					var modelAfterActions = A2($author$project$Main$performActionsOnModel, actions, modelWithTrack);
					return _Utils_Tuple2(
						modelAfterActions,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									$author$project$Main$showTrackOnMapCentered(newTrack)
								])));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								modalMessage: $elm$core$Maybe$Just('Sorry, unable to make a track.\nPlease check the file contains GPX data.')
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'SetRenderDepth':
				var depth = msg.a;
				var _v3 = model.track;
				if (_v3.$ === 'Just') {
					var track = _v3.a;
					var newTrack = _Utils_update(
						track,
						{renderDepth: depth});
					var newModel = _Utils_update(
						model,
						{
							track: $elm$core$Maybe$Just(track)
						});
					return _Utils_Tuple2(
						newModel,
						$author$project$Main$showTrackOnMapCentered(newTrack));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'OAuthMessage':
				var authMsg = msg.a;
				var _v4 = A2($author$project$StravaAuth$update, authMsg, model.stravaAuthentication);
				var newAuthData = _v4.a;
				var authCmd = _v4.b;
				var isToken = $author$project$StravaAuth$getStravaToken(newAuthData);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{stravaAuthentication: newAuthData}),
					A2($elm$core$Platform$Cmd$map, $author$project$Main$OAuthMessage, authCmd));
			case 'StorageMessage':
				var json = msg.a;
				var actions = A2($author$project$LocalStorage$processStoragePortMessage, json, model);
				var newModel = A2($author$project$Main$performActionsOnModel, actions, model);
				return _Utils_Tuple2(
					newModel,
					A2($author$project$Main$performActionCommands, actions, model));
			case 'SplitLeftDockRightEdge':
				var m = msg.a;
				var newModel = $author$project$Main$adjustSpaceForContent(
					_Utils_update(
						model,
						{
							leftDockRightEdge: A2($author$project$SplitPane$SplitPane$update, m, model.leftDockRightEdge)
						}));
				return _Utils_Tuple2(
					newModel,
					A2(
						$author$project$Main$performActionCommands,
						_List_fromArray(
							[
								$author$project$Actions$MapRefresh,
								A2(
								$author$project$Actions$StoreLocally,
								'splits',
								$author$project$Main$encodeSplitValues(model))
							]),
						newModel));
			case 'SplitLeftDockInternal':
				var m = msg.a;
				var newModel = $author$project$Main$adjustSpaceForContent(
					_Utils_update(
						model,
						{
							leftDockInternal: A2($author$project$SplitPane$SplitPane$update, m, model.leftDockInternal)
						}));
				return _Utils_Tuple2(
					newModel,
					A2(
						$author$project$Main$performActionCommands,
						_List_fromArray(
							[
								$author$project$Actions$MapRefresh,
								A2(
								$author$project$Actions$StoreLocally,
								'splits',
								$author$project$Main$encodeSplitValues(model))
							]),
						newModel));
			case 'SplitRightDockLeftEdge':
				var m = msg.a;
				var newModel = $author$project$Main$adjustSpaceForContent(
					_Utils_update(
						model,
						{
							rightDockLeftEdge: A2($author$project$SplitPane$SplitPane$update, m, model.rightDockLeftEdge)
						}));
				return _Utils_Tuple2(
					newModel,
					A2(
						$author$project$Main$performActionCommands,
						_List_fromArray(
							[
								$author$project$Actions$MapRefresh,
								A2(
								$author$project$Actions$StoreLocally,
								'splits',
								$author$project$Main$encodeSplitValues(model))
							]),
						newModel));
			case 'SplitRightDockInternal':
				var m = msg.a;
				var newModel = $author$project$Main$adjustSpaceForContent(
					_Utils_update(
						model,
						{
							rightDockInternal: A2($author$project$SplitPane$SplitPane$update, m, model.rightDockInternal)
						}));
				return _Utils_Tuple2(
					newModel,
					A2(
						$author$project$Main$performActionCommands,
						_List_fromArray(
							[
								$author$project$Actions$MapRefresh,
								A2(
								$author$project$Actions$StoreLocally,
								'splits',
								$author$project$Main$encodeSplitValues(model))
							]),
						newModel));
			case 'SplitBottomDockTopEdge':
				var m = msg.a;
				var newModel = $author$project$Main$adjustSpaceForContent(
					_Utils_update(
						model,
						{
							bottomDockTopEdge: A2($author$project$SplitPane$SplitPane$update, m, model.bottomDockTopEdge)
						}));
				return _Utils_Tuple2(
					newModel,
					A2(
						$author$project$Main$performActionCommands,
						_List_fromArray(
							[
								$author$project$Actions$MapRefresh,
								A2(
								$author$project$Actions$StoreLocally,
								'splits',
								$author$project$Main$encodeSplitValues(model))
							]),
						newModel));
			case 'Resize':
				var width = msg.a;
				var height = msg.b;
				var newModel = A3($author$project$Main$allocateSpaceForDocksAndContent, width, height, model);
				return _Utils_Tuple2(
					newModel,
					A2(
						$author$project$Main$performActionCommands,
						_List_fromArray(
							[
								$author$project$Actions$MapRefresh,
								A2(
								$author$project$Actions$StoreLocally,
								'splits',
								$author$project$Main$encodeSplitValues(model))
							]),
						newModel));
			case 'GotWindowSize':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var info = result.a;
					var newModel = A3($author$project$Main$allocateSpaceForDocksAndContent, info.viewport.width | 0, info.viewport.height | 0, model);
					return _Utils_Tuple2(
						newModel,
						A2(
							$author$project$Main$performActionCommands,
							_List_fromArray(
								[$author$project$Actions$MapRefresh]),
							newModel));
				} else {
					var error = result.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'ToolsMsg':
				var toolMsg = msg.a;
				var _v6 = A4($author$project$ToolsController$update, toolMsg, model.track, $author$project$Main$ToolsMsg, model.toolOptions);
				var newToolOptions = _v6.a;
				var actions = _v6.b;
				var newModel = _Utils_update(
					model,
					{toolOptions: newToolOptions});
				var modelAfterActions = A2($author$project$Main$performActionsOnModel, actions, newModel);
				return _Utils_Tuple2(
					modelAfterActions,
					A2($author$project$Main$performActionCommands, actions, modelAfterActions));
			case 'PaneMsg':
				var paneMsg = msg.a;
				var _v7 = A5($author$project$PaneLayoutManager$update, paneMsg, $author$project$Main$PaneMsg, model.track, model.contentArea, model.paneLayoutOptions);
				var newOptions = _v7.a;
				var actions = _v7.b;
				var newModel = A2(
					$author$project$Main$performActionsOnModel,
					actions,
					_Utils_update(
						model,
						{paneLayoutOptions: newOptions}));
				return _Utils_Tuple2(
					newModel,
					A2($author$project$Main$performActionCommands, actions, newModel));
			case 'RepaintMap':
				return _Utils_Tuple2(model, $author$project$MapPortController$refreshMap);
			case 'ToggleToolPopup':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isPopupOpen: !model.isPopupOpen}),
					$elm$core$Platform$Cmd$none);
			case 'BackgroundColour':
				var colour = msg.a;
				var newModel = _Utils_update(
					model,
					{backgroundColour: colour});
				var actions = _List_fromArray(
					[
						A2(
						$author$project$Actions$StoreLocally,
						'background',
						$author$project$ToolsController$encodeColour(colour))
					]);
				return _Utils_Tuple2(
					newModel,
					A2($author$project$Main$performActionCommands, actions, newModel));
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'RestoreDefaultToolLayout':
				var newModel = _Utils_update(
					model,
					{toolOptions: $author$project$ToolsController$defaultOptions});
				var actions = _List_fromArray(
					[
						A2(
						$author$project$Actions$StoreLocally,
						'tools',
						$author$project$ToolsController$encodeToolState(newModel.toolOptions))
					]);
				return _Utils_Tuple2(
					newModel,
					A2($author$project$Main$performActionCommands, actions, newModel));
			case 'WriteGpxFile':
				var outputFilename = function () {
					var _v9 = model.filename;
					if (_v9.$ === 'Just') {
						var filename = _v9.a;
						return _Utils_ap(
							filename,
							(!A2(
								$elm$core$String$endsWith,
								'.GPX',
								$elm$core$String$toUpper(filename))) ? '.gpx' : '');
					} else {
						return 'NOFILENAME';
					}
				}();
				var _v8 = model.track;
				if (_v8.$ === 'Just') {
					var track = _v8.a;
					return _Utils_Tuple2(
						model,
						A3(
							$elm$file$File$Download$string,
							outputFilename,
							'text/gpx',
							A2($author$project$WriteGPX$writeGPX, model.filename, track)));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								modalMessage: $elm$core$Maybe$Just('Sorry, unable to write the file')
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'FilenameChange':
				var filename = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							filename: $elm$core$Maybe$Just(filename)
						}),
					$elm$core$Platform$Cmd$none);
			case 'TimeToUpdateMemory':
				return _Utils_Tuple2(model, $author$project$LocalStorage$storageGetMemoryUsage);
			default:
				var oneClickMsg = msg.a;
				var actions = A2($author$project$Tools$OneClickQuickFix$update, oneClickMsg, model.track);
				var modelAfterActions = A2($author$project$Main$performActionsOnModel, actions, model);
				return _Utils_Tuple2(
					modelAfterActions,
					A2($author$project$Main$performActionCommands, actions, modelAfterActions));
		}
	});
var $author$project$Main$DismissModalMessage = {$: 'DismissModalMessage'};
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputLabel: 'lbl', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 'AllChildren', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'AllChildren':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var topLevel = _v0.topLevel;
		var rules = _v0.rules;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Element$Font$sansSerif = $mdgriffith$elm_ui$Internal$Model$SansSerif;
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $author$project$ViewPureStyles$commonLayoutStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(2),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$Font$size(14),
		$mdgriffith$elm_ui$Element$Font$family(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$typeface('Open Sans'),
				$mdgriffith$elm_ui$Element$Font$sansSerif
			]))
	]);
var $author$project$Main$bestTrackName = function (model) {
	var _v0 = model.track;
	if (_v0.$ === 'Nothing') {
		return 'no track';
	} else {
		var track = _v0.a;
		var _v1 = track.trackName;
		if (_v1.$ === 'Just') {
			var trackname = _v1.a;
			return trackname;
		} else {
			var _v2 = model.filename;
			if (_v2.$ === 'Just') {
				var filename = _v2.a;
				return filename;
			} else {
				return 'unnamed track';
			}
		}
	}
};
var $author$project$Main$composeTitle = function (model) {
	var _v0 = model.track;
	if (_v0.$ === 'Nothing') {
		return 'GPXmagic Labs V3 concepts';
	} else {
		var track = _v0.a;
		return 'GPXmagic - ' + $author$project$Main$bestTrackName(model);
	}
};
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var $ianmackenzie$elm_units$Pixels$inPixels = function (_v0) {
	var numPixels = _v0.a;
	return numPixels;
};
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $mdgriffith$elm_ui$Element$layout = $mdgriffith$elm_ui$Element$layoutWith(
	{options: _List_Nil});
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $author$project$SplitPane$SplitPane$ViewConfig = function (a) {
	return {$: 'ViewConfig', a: a};
};
var $author$project$SplitPane$SplitPane$createViewConfig = function (_v0) {
	var toMsg = _v0.toMsg;
	var customSplitter = _v0.customSplitter;
	return $author$project$SplitPane$SplitPane$ViewConfig(
		{splitter: customSplitter, toMsg: toMsg});
};
var $author$project$Main$bottomDockConfig = $author$project$SplitPane$SplitPane$createViewConfig(
	{customSplitter: $elm$core$Maybe$Nothing, toMsg: $author$project$Main$SplitBottomDockTopEdge});
var $mdgriffith$elm_ui$Internal$Model$NoStaticStyleSheet = {$: 'NoStaticStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$RenderModeOption = function (a) {
	return {$: 'RenderModeOption', a: a};
};
var $mdgriffith$elm_ui$Element$noStaticStyleSheet = $mdgriffith$elm_ui$Internal$Model$RenderModeOption($mdgriffith$elm_ui$Internal$Model$NoStaticStyleSheet);
var $author$project$ToolsController$ToolNoOp = {$: 'ToolNoOp'};
var $author$project$ToolsController$ToolPopupToggle = function (a) {
	return {$: 'ToolPopupToggle', a: a};
};
var $author$project$ToolsController$ToolStateToggle = F2(
	function (a, b) {
		return {$: 'ToolStateToggle', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Top);
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 'Nothing') {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'keydown',
			A2(
				$elm$json$Json$Decode$map,
				function (fired) {
					return _Utils_Tuple2(fired, true);
				},
				isKey)));
};
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.onPress;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onKeyLookup(
															function (code) {
																return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing);
															}),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveDown = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(y));
};
var $author$project$ToolsController$nextToolState = function (state) {
	switch (state.$) {
		case 'Expanded':
			return $author$project$ToolsController$Contracted;
		case 'Contracted':
			return $author$project$ToolsController$Expanded;
		default:
			return $author$project$ToolsController$Disabled;
	}
};
var $elm$virtual_dom$VirtualDom$Custom = function (a) {
	return {$: 'Custom', a: a};
};
var $elm$html$Html$Events$custom = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Custom(decoder));
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$Event = F6(
	function (keys, button, clientPos, offsetPos, pagePos, screenPos) {
		return {button: button, clientPos: clientPos, keys: keys, offsetPos: offsetPos, pagePos: pagePos, screenPos: screenPos};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$BackButton = {$: 'BackButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ErrorButton = {$: 'ErrorButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ForwardButton = {$: 'ForwardButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MainButton = {$: 'MainButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MiddleButton = {$: 'MiddleButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonFromId = function (id) {
	switch (id) {
		case 0:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MainButton;
		case 1:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MiddleButton;
		case 2:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$SecondButton;
		case 3:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$BackButton;
		case 4:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ForwardButton;
		default:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ErrorButton;
	}
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonDecoder = A2(
	$elm$json$Json$Decode$map,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonFromId,
	A2($elm$json$Json$Decode$field, 'button', $elm$json$Json$Decode$int));
var $mpizenberg$elm_pointer_events$Internal$Decode$clientPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'clientX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'clientY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$Keys = F3(
	function (alt, ctrl, shift) {
		return {alt: alt, ctrl: ctrl, shift: shift};
	});
var $mpizenberg$elm_pointer_events$Internal$Decode$keys = A4(
	$elm$json$Json$Decode$map3,
	$mpizenberg$elm_pointer_events$Internal$Decode$Keys,
	A2($elm$json$Json$Decode$field, 'altKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'ctrlKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'shiftKey', $elm$json$Json$Decode$bool));
var $elm$json$Json$Decode$map6 = _Json_map6;
var $mpizenberg$elm_pointer_events$Internal$Decode$offsetPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'offsetX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'offsetY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$pagePos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$screenPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'screenX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'screenY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder = A7($elm$json$Json$Decode$map6, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$Event, $mpizenberg$elm_pointer_events$Internal$Decode$keys, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonDecoder, $mpizenberg$elm_pointer_events$Internal$Decode$clientPos, $mpizenberg$elm_pointer_events$Internal$Decode$offsetPos, $mpizenberg$elm_pointer_events$Internal$Decode$pagePos, $mpizenberg$elm_pointer_events$Internal$Decode$screenPos);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions = F3(
	function (event, options, tag) {
		return A2(
			$elm$html$Html$Events$custom,
			event,
			A2(
				$elm$json$Json$Decode$map,
				function (ev) {
					return {
						message: tag(ev),
						preventDefault: options.preventDefault,
						stopPropagation: options.stopPropagation
					};
				},
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder));
	});
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $feathericons$elm_feather$FeatherIcons$Icon = function (a) {
	return {$: 'Icon', a: a};
};
var $feathericons$elm_feather$FeatherIcons$defaultAttributes = function (name) {
	return {
		_class: $elm$core$Maybe$Just('feather feather-' + name),
		size: 24,
		sizeUnit: '',
		strokeWidth: 2,
		viewBox: '0 0 24 24'
	};
};
var $feathericons$elm_feather$FeatherIcons$makeBuilder = F2(
	function (name, src) {
		return $feathericons$elm_feather$FeatherIcons$Icon(
			{
				attrs: $feathericons$elm_feather$FeatherIcons$defaultAttributes(name),
				src: src
			});
	});
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $feathericons$elm_feather$FeatherIcons$settings = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'settings',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$circle,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$cx('12'),
					$elm$svg$Svg$Attributes$cy('12'),
					$elm$svg$Svg$Attributes$r('3')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z')
				]),
			_List_Nil)
		]));
var $author$project$ToolsController$ToolColourSelect = F2(
	function (a, b) {
		return {$: 'ToolColourSelect', a: a, b: b};
	});
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$alizarin = A3($mdgriffith$elm_ui$Element$rgb255, 231, 76, 60);
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$asbestos = A3($mdgriffith$elm_ui$Element$rgb255, 127, 140, 141);
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$belizeHole = A3($mdgriffith$elm_ui$Element$rgb255, 41, 128, 185);
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$carrot = A3($mdgriffith$elm_ui$Element$rgb255, 230, 126, 34);
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$clouds = A3($mdgriffith$elm_ui$Element$rgb255, 236, 240, 241);
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$emerald = A3($mdgriffith$elm_ui$Element$rgb255, 46, 204, 113);
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$midnightBlue = A3($mdgriffith$elm_ui$Element$rgb255, 44, 62, 80);
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite = A3($mdgriffith$elm_ui$Element$rgb255, 241, 242, 246);
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$bruschettaTomato = A3($mdgriffith$elm_ui$Element$rgb255, 255, 99, 72);
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $author$project$ViewPureStyles$neatToolsBorder = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
		$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$bruschettaTomato),
		$mdgriffith$elm_ui$Element$Border$rounded(4),
		$mdgriffith$elm_ui$Element$Border$width(2),
		$mdgriffith$elm_ui$Element$padding(3)
	]);
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$nephritis = A3($mdgriffith$elm_ui$Element$rgb255, 39, 174, 96);
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$pomegranate = A3($mdgriffith$elm_ui$Element$rgb255, 192, 57, 43);
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$pumpkin = A3($mdgriffith$elm_ui$Element$rgb255, 211, 84, 0);
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$wetAsphalt = A3($mdgriffith$elm_ui$Element$rgb255, 52, 73, 94);
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$wisteria = A3($mdgriffith$elm_ui$Element$rgb255, 142, 68, 173);
var $author$project$ToolsController$showColourOptions = F2(
	function (msgWrapper, toolEntry) {
		var colourBlock = function (colour) {
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(colour),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(20)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(20))
					]),
				{
					label: $mdgriffith$elm_ui$Element$none,
					onPress: $elm$core$Maybe$Just(
						msgWrapper(
							A2($author$project$ToolsController$ToolColourSelect, toolEntry.toolType, colour)))
				});
		};
		return toolEntry.isPopupOpen ? A2(
			$mdgriffith$elm_ui$Element$column,
			A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignRight, $author$project$ViewPureStyles$neatToolsBorder),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$turquoise),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$emerald),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$wetAsphalt)
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$greenSea),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$nephritis),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$belizeHole),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$wisteria),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$midnightBlue)
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$sunFlower),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$carrot),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$alizarin),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$clouds),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete)
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$orange),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$pumpkin),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$pomegranate),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$silver),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$asbestos)
						]))
				])) : $mdgriffith$elm_ui$Element$none;
	});
var $author$project$ToolsController$ToolDockSelect = F2(
	function (a, b) {
		return {$: 'ToolDockSelect', a: a, b: b};
	});
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $elm$svg$Svg$Attributes$points = _VirtualDom_attribute('points');
var $elm$svg$Svg$polyline = $elm$svg$Svg$trustedNode('polyline');
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $feathericons$elm_feather$FeatherIcons$arrowDown = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'arrow-down',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('5'),
					$elm$svg$Svg$Attributes$x2('12'),
					$elm$svg$Svg$Attributes$y2('19')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('19 12 12 19 5 12')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$arrowDownLeft = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'arrow-down-left',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('17'),
					$elm$svg$Svg$Attributes$y1('7'),
					$elm$svg$Svg$Attributes$x2('7'),
					$elm$svg$Svg$Attributes$y2('17')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('17 17 7 17 7 7')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$arrowDownRight = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'arrow-down-right',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('7'),
					$elm$svg$Svg$Attributes$y1('7'),
					$elm$svg$Svg$Attributes$x2('17'),
					$elm$svg$Svg$Attributes$y2('17')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('17 7 17 17 7 17')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$arrowUpLeft = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'arrow-up-left',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('17'),
					$elm$svg$Svg$Attributes$y1('17'),
					$elm$svg$Svg$Attributes$x2('7'),
					$elm$svg$Svg$Attributes$y2('7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('7 17 7 7 17 7')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$arrowUpRight = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'arrow-up-right',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('7'),
					$elm$svg$Svg$Attributes$y1('17'),
					$elm$svg$Svg$Attributes$x2('17'),
					$elm$svg$Svg$Attributes$y2('7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('7 7 17 7 17 17')
				]),
			_List_Nil)
		]));
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$svg$Svg$map = $elm$virtual_dom$VirtualDom$map;
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute('stroke-linecap');
var $elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute('stroke-linejoin');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $feathericons$elm_feather$FeatherIcons$toHtml = F2(
	function (attributes, _v0) {
		var src = _v0.a.src;
		var attrs = _v0.a.attrs;
		var strSize = $elm$core$String$fromFloat(attrs.size);
		var baseAttributes = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$fill('none'),
				$elm$svg$Svg$Attributes$height(
				_Utils_ap(strSize, attrs.sizeUnit)),
				$elm$svg$Svg$Attributes$width(
				_Utils_ap(strSize, attrs.sizeUnit)),
				$elm$svg$Svg$Attributes$stroke('currentColor'),
				$elm$svg$Svg$Attributes$strokeLinecap('round'),
				$elm$svg$Svg$Attributes$strokeLinejoin('round'),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(attrs.strokeWidth)),
				$elm$svg$Svg$Attributes$viewBox(attrs.viewBox)
			]);
		var combinedAttributes = _Utils_ap(
			function () {
				var _v1 = attrs._class;
				if (_v1.$ === 'Just') {
					var c = _v1.a;
					return A2(
						$elm$core$List$cons,
						$elm$svg$Svg$Attributes$class(c),
						baseAttributes);
				} else {
					return baseAttributes;
				}
			}(),
			attributes);
		return A2(
			$elm$svg$Svg$svg,
			combinedAttributes,
			A2(
				$elm$core$List$map,
				$elm$svg$Svg$map($elm$core$Basics$never),
				src));
	});
var $feathericons$elm_feather$FeatherIcons$withSize = F2(
	function (size, _v0) {
		var attrs = _v0.a.attrs;
		var src = _v0.a.src;
		return $feathericons$elm_feather$FeatherIcons$Icon(
			{
				attrs: _Utils_update(
					attrs,
					{size: size}),
				src: src
			});
	});
var $author$project$ViewPureStyles$useIcon = A2(
	$elm$core$Basics$composeL,
	A2(
		$elm$core$Basics$composeL,
		$mdgriffith$elm_ui$Element$html,
		$feathericons$elm_feather$FeatherIcons$toHtml(_List_Nil)),
	$feathericons$elm_feather$FeatherIcons$withSize(20));
var $author$project$ToolsController$showDockOptions = F2(
	function (msgWrapper, toolEntry) {
		return toolEntry.isPopupOpen ? A2(
			$mdgriffith$elm_ui$Element$row,
			$author$project$ViewPureStyles$neatToolsBorder,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$arrowUpLeft),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								A2($author$project$ToolsController$ToolDockSelect, toolEntry.toolType, $author$project$ToolsController$DockUpperLeft)))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$arrowDownLeft),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								A2($author$project$ToolsController$ToolDockSelect, toolEntry.toolType, $author$project$ToolsController$DockLowerLeft)))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$arrowDown),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								A2($author$project$ToolsController$ToolDockSelect, toolEntry.toolType, $author$project$ToolsController$DockBottom)))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$arrowDownRight),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								A2($author$project$ToolsController$ToolDockSelect, toolEntry.toolType, $author$project$ToolsController$DockLowerRight)))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$arrowUpRight),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								A2($author$project$ToolsController$ToolDockSelect, toolEntry.toolType, $author$project$ToolsController$DockUpperRight)))
					})
				])) : $mdgriffith$elm_ui$Element$none;
	});
var $author$project$ViewThirdPerson$stopProp = {preventDefault: false, stopPropagation: true};
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $author$project$ToolsController$DeletePoints = function (a) {
	return {$: 'DeletePoints', a: a};
};
var $author$project$ToolsController$DirectionChanges = function (a) {
	return {$: 'DirectionChanges', a: a};
};
var $author$project$ToolsController$PointerMsg = function (a) {
	return {$: 'PointerMsg', a: a};
};
var $author$project$ToolsController$ToolBendSmootherMsg = function (a) {
	return {$: 'ToolBendSmootherMsg', a: a};
};
var $author$project$ToolsController$ToolBezierMsg = function (a) {
	return {$: 'ToolBezierMsg', a: a};
};
var $author$project$ToolsController$ToolCentroidMsg = function (a) {
	return {$: 'ToolCentroidMsg', a: a};
};
var $author$project$ToolsController$ToolCurveFormerMsg = function (a) {
	return {$: 'ToolCurveFormerMsg', a: a};
};
var $author$project$ToolsController$ToolDisplaySettingMsg = function (a) {
	return {$: 'ToolDisplaySettingMsg', a: a};
};
var $author$project$ToolsController$ToolGradientChangeMsg = function (a) {
	return {$: 'ToolGradientChangeMsg', a: a};
};
var $author$project$ToolsController$ToolInfoMsg = function (a) {
	return {$: 'ToolInfoMsg', a: a};
};
var $author$project$ToolsController$ToolInterpolateMsg = function (a) {
	return {$: 'ToolInterpolateMsg', a: a};
};
var $author$project$ToolsController$ToolLimitGradientMsg = function (a) {
	return {$: 'ToolLimitGradientMsg', a: a};
};
var $author$project$ToolsController$ToolNudgeMsg = function (a) {
	return {$: 'ToolNudgeMsg', a: a};
};
var $author$project$ToolsController$ToolOutAndBackMsg = function (a) {
	return {$: 'ToolOutAndBackMsg', a: a};
};
var $author$project$ToolsController$ToolSimplifyMsg = function (a) {
	return {$: 'ToolSimplifyMsg', a: a};
};
var $author$project$ToolsController$UndoRedoMsg = function (a) {
	return {$: 'UndoRedoMsg', a: a};
};
var $author$project$Tools$BendSmoother$SetMode = function (a) {
	return {$: 'SetMode', a: a};
};
var $author$project$Tools$BendSmootherOptions$SmoothPoint = {$: 'SmoothPoint'};
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 'HiddenLabel', a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $mdgriffith$elm_ui$Element$Input$Option = F2(
	function (a, b) {
		return {$: 'Option', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Element$Input$defaultRadioOption = F2(
	function (optionLabel, status) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(14)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(14)),
							$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
							$mdgriffith$elm_ui$Element$Border$rounded(7),
							function () {
							if (status.$ === 'Selected') {
								return $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
							} else {
								return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
							}
						}(),
							$mdgriffith$elm_ui$Element$Border$width(
							function () {
								switch (status.$) {
									case 'Idle':
										return 1;
									case 'Focused':
										return 1;
									default:
										return 5;
								}
							}()),
							$mdgriffith$elm_ui$Element$Border$color(
							function () {
								switch (status.$) {
									case 'Idle':
										return A3($mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									case 'Focused':
										return A3($mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									default:
										return A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255);
								}
							}())
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Internal$Model$htmlClass('unfocusable')
						]),
					optionLabel)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$option = F2(
	function (val, txt) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$Option,
			val,
			$mdgriffith$elm_ui$Element$Input$defaultRadioOption(txt));
	});
var $mdgriffith$elm_ui$Element$Input$Row = {$: 'Row'};
var $mdgriffith$elm_ui$Element$Input$AfterFound = {$: 'AfterFound'};
var $mdgriffith$elm_ui$Element$Input$BeforeFound = {$: 'BeforeFound'};
var $mdgriffith$elm_ui$Element$Input$Idle = {$: 'Idle'};
var $mdgriffith$elm_ui$Element$Input$NotFound = {$: 'NotFound'};
var $mdgriffith$elm_ui$Element$Input$Selected = {$: 'Selected'};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 'LivePolite'};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 'HiddenLabel') {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position.$) {
				case 'Above':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 'Below':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 'OnRight':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $mdgriffith$elm_ui$Element$Input$column = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					attributes)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$downArrow = 'ArrowDown';
var $mdgriffith$elm_ui$Internal$Model$filter = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (x, _v0) {
				var found = _v0.a;
				var has = _v0.b;
				switch (x.$) {
					case 'NoAttribute':
						return _Utils_Tuple2(found, has);
					case 'Class':
						var key = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'Attr':
						var attr = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'StyleClass':
						var style = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'Width':
						var width = x.a;
						return A2($elm$core$Set$member, 'width', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'width', has));
					case 'Height':
						var height = x.a;
						return A2($elm$core$Set$member, 'height', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'height', has));
					case 'Describe':
						var description = x.a;
						return A2($elm$core$Set$member, 'described', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'described', has));
					case 'Nearby':
						var location = x.a;
						var elem = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'AlignX':
						return A2($elm$core$Set$member, 'align-x', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-x', has));
					case 'AlignY':
						return A2($elm$core$Set$member, 'align-y', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-y', has));
					default:
						return A2($elm$core$Set$member, 'transform', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'transform', has));
				}
			}),
		_Utils_Tuple2(_List_Nil, $elm$core$Set$empty),
		attrs).a;
};
var $mdgriffith$elm_ui$Internal$Model$get = F2(
	function (attrs, isAttr) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, found) {
					return isAttr(x) ? A2($elm$core$List$cons, x, found) : found;
				}),
			_List_Nil,
			$mdgriffith$elm_ui$Internal$Model$filter(attrs));
	});
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 'HiddenLabel') {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Element$Input$leftArrow = 'ArrowLeft';
var $mdgriffith$elm_ui$Element$Input$rightArrow = 'ArrowRight';
var $mdgriffith$elm_ui$Element$Input$row = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				attributes),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$tabindex = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$tabindex);
var $mdgriffith$elm_ui$Element$Input$upArrow = 'ArrowUp';
var $mdgriffith$elm_ui$Element$Input$radioHelper = F3(
	function (orientation, attrs, input) {
		var track = F2(
			function (opt, _v14) {
				var found = _v14.a;
				var prev = _v14.b;
				var nxt = _v14.c;
				var val = opt.a;
				switch (found.$) {
					case 'NotFound':
						return _Utils_eq(
							$elm$core$Maybe$Just(val),
							input.selected) ? _Utils_Tuple3($mdgriffith$elm_ui$Element$Input$BeforeFound, prev, nxt) : _Utils_Tuple3(found, val, nxt);
					case 'BeforeFound':
						return _Utils_Tuple3($mdgriffith$elm_ui$Element$Input$AfterFound, prev, val);
					default:
						return _Utils_Tuple3(found, prev, nxt);
				}
			});
		var renderOption = function (_v11) {
			var val = _v11.a;
			var view = _v11.b;
			var status = _Utils_eq(
				$elm$core$Maybe$Just(val),
				input.selected) ? $mdgriffith$elm_ui$Element$Input$Selected : $mdgriffith$elm_ui$Element$Input$Idle;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$pointer,
						function () {
						if (orientation.$ === 'Row') {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink);
						} else {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
						}
					}(),
						$mdgriffith$elm_ui$Element$Events$onClick(
						input.onChange(val)),
						function () {
						if (status.$ === 'Selected') {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'true'));
						} else {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'false'));
						}
					}(),
						$mdgriffith$elm_ui$Internal$Model$Attr(
						A2($elm$html$Html$Attributes$attribute, 'role', 'radio'))
					]),
				view(status));
		};
		var prevNext = function () {
			var _v5 = input.options;
			if (!_v5.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var _v6 = _v5.a;
				var val = _v6.a;
				return function (_v7) {
					var found = _v7.a;
					var b = _v7.b;
					var a = _v7.c;
					switch (found.$) {
						case 'NotFound':
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						case 'BeforeFound':
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						default:
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, a));
					}
				}(
					A3(
						$elm$core$List$foldl,
						track,
						_Utils_Tuple3($mdgriffith$elm_ui$Element$Input$NotFound, val, val),
						input.options));
			}
		}();
		var optionArea = function () {
			if (orientation.$ === 'Row') {
				return A2(
					$mdgriffith$elm_ui$Element$Input$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2($elm$core$List$map, renderOption, input.options));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$Input$column,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2($elm$core$List$map, renderOption, input.options));
			}
		}();
		var events = A2(
			$mdgriffith$elm_ui$Internal$Model$get,
			attrs,
			function (attr) {
				_v3$3:
				while (true) {
					switch (attr.$) {
						case 'Width':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _v3$3;
							}
						case 'Height':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _v3$3;
							}
						case 'Attr':
							return true;
						default:
							break _v3$3;
					}
				}
				return false;
			});
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_Utils_ap(
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$alignLeft),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Element$Input$tabindex(0)),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$htmlClass('focus')),
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$Region$announce),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'role', 'radiogroup'))),
							function () {
							if (prevNext.$ === 'Nothing') {
								return $elm$core$Maybe$Nothing;
							} else {
								var _v1 = prevNext.a;
								var prev = _v1.a;
								var next = _v1.b;
								return $elm$core$Maybe$Just(
									$mdgriffith$elm_ui$Element$Input$onKeyLookup(
										function (code) {
											if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$leftArrow)) {
												return $elm$core$Maybe$Just(
													input.onChange(prev));
											} else {
												if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$upArrow)) {
													return $elm$core$Maybe$Just(
														input.onChange(prev));
												} else {
													if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$rightArrow)) {
														return $elm$core$Maybe$Just(
															input.onChange(next));
													} else {
														if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$downArrow)) {
															return $elm$core$Maybe$Just(
																input.onChange(next));
														} else {
															if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space)) {
																var _v2 = input.selected;
																if (_v2.$ === 'Nothing') {
																	return $elm$core$Maybe$Just(
																		input.onChange(prev));
																} else {
																	return $elm$core$Maybe$Nothing;
																}
															} else {
																return $elm$core$Maybe$Nothing;
															}
														}
													}
												}
											}
										}));
							}
						}()
						])),
				events),
			input.label,
			optionArea);
	});
var $mdgriffith$elm_ui$Element$Input$radioRow = $mdgriffith$elm_ui$Element$Input$radioHelper($mdgriffith$elm_ui$Element$Input$Row);
var $author$project$Tools$BendSmoother$ApplySmoothBend = {$: 'ApplySmoothBend'};
var $author$project$Tools$BendSmoother$SetBendTrackPointSpacing = function (a) {
	return {$: 'SetBendTrackPointSpacing', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Behind, element);
};
var $mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
var $author$project$ColourPalette$scrollbarBackground = $smucode$elm_flat_colors$FlatColors$FlatUIPalette$asbestos;
var $author$project$ViewPureStyles$commonShortHorizontalSliderStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$height(
		$mdgriffith$elm_ui$Element$px(20)),
		$mdgriffith$elm_ui$Element$width(
		$mdgriffith$elm_ui$Element$px(150)),
		$mdgriffith$elm_ui$Element$centerY,
		$mdgriffith$elm_ui$Element$centerX,
		$mdgriffith$elm_ui$Element$behindContent(
		A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(150)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(2)),
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Background$color($author$project$ColourPalette$scrollbarBackground),
					$mdgriffith$elm_ui$Element$Border$rounded(6)
				]),
			$mdgriffith$elm_ui$Element$none))
	]);
var $mdgriffith$elm_ui$Element$Input$Thumb = function (a) {
	return {$: 'Thumb', a: a};
};
var $mdgriffith$elm_ui$Element$Input$defaultThumb = $mdgriffith$elm_ui$Element$Input$Thumb(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width(
			$mdgriffith$elm_ui$Element$px(16)),
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(16)),
			$mdgriffith$elm_ui$Element$Border$rounded(8),
			$mdgriffith$elm_ui$Element$Border$width(1),
			$mdgriffith$elm_ui$Element$Border$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5)),
			$mdgriffith$elm_ui$Element$Background$color(
			A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
		]));
var $ianmackenzie$elm_units$Length$feet = function (numFeet) {
	return $ianmackenzie$elm_units$Length$meters($ianmackenzie$elm_units$Constants$foot * numFeet);
};
var $mdgriffith$elm_ui$Element$Input$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Element$Input$Label = F3(
	function (a, b, c) {
		return {$: 'Label', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Element$Input$labelBelow = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$Below);
var $cuducos$elm_format_number$FormatNumber$Locales$Exact = function (a) {
	return {$: 'Exact', a: a};
};
var $cuducos$elm_format_number$FormatNumber$Parser$FormattedNumber = F5(
	function (original, integers, decimals, prefix, suffix) {
		return {decimals: decimals, integers: integers, original: original, prefix: prefix, suffix: suffix};
	});
var $cuducos$elm_format_number$FormatNumber$Parser$Negative = {$: 'Negative'};
var $cuducos$elm_format_number$FormatNumber$Parser$Positive = {$: 'Positive'};
var $cuducos$elm_format_number$FormatNumber$Parser$Zero = {$: 'Zero'};
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $cuducos$elm_format_number$FormatNumber$Parser$classify = function (formatted) {
	var onlyZeros = A2(
		$elm$core$String$all,
		function (_char) {
			return _Utils_eq(
				_char,
				_Utils_chr('0'));
		},
		$elm$core$String$concat(
			A2(
				$elm$core$List$append,
				formatted.integers,
				$elm$core$List$singleton(formatted.decimals))));
	return onlyZeros ? $cuducos$elm_format_number$FormatNumber$Parser$Zero : ((formatted.original < 0) ? $cuducos$elm_format_number$FormatNumber$Parser$Negative : $cuducos$elm_format_number$FormatNumber$Parser$Positive);
};
var $elm$core$String$filter = _String_filter;
var $cuducos$elm_format_number$FormatNumber$Parser$addZerosToFit = F2(
	function (desiredLength, value) {
		var length = $elm$core$String$length(value);
		var missing = (_Utils_cmp(length, desiredLength) < 0) ? $elm$core$Basics$abs(desiredLength - length) : 0;
		return _Utils_ap(
			value,
			A2($elm$core$String$repeat, missing, '0'));
	});
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $cuducos$elm_format_number$FormatNumber$Parser$removeZeros = function (decimals) {
	return (A2($elm$core$String$right, 1, decimals) !== '0') ? decimals : $cuducos$elm_format_number$FormatNumber$Parser$removeZeros(
		A2($elm$core$String$dropRight, 1, decimals));
};
var $cuducos$elm_format_number$FormatNumber$Parser$getDecimals = F2(
	function (locale, digits) {
		var _v0 = locale.decimals;
		switch (_v0.$) {
			case 'Max':
				return $cuducos$elm_format_number$FormatNumber$Parser$removeZeros(digits);
			case 'Exact':
				return digits;
			default:
				var min = _v0.a;
				return A2($cuducos$elm_format_number$FormatNumber$Parser$addZerosToFit, min, digits);
		}
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			$elm$core$List$any,
			function (c) {
				return (!_Utils_eq(
					c,
					_Utils_chr('0'))) && (!_Utils_eq(
					c,
					_Utils_chr('.')));
			},
			$elm$core$String$toList(str));
		return _Utils_ap(
			(signed && isNotZero) ? '-' : '',
			str);
	});
var $elm$core$Char$fromCode = _Char_fromCode;
var $myrho$elm_round$Round$increaseNum = function (_v0) {
	var head = _v0.a;
	var tail = _v0.b;
	if (_Utils_eq(
		head,
		_Utils_chr('9'))) {
		var _v1 = $elm$core$String$uncons(tail);
		if (_v1.$ === 'Nothing') {
			return '01';
		} else {
			var headtail = _v1.a;
			return A2(
				$elm$core$String$cons,
				_Utils_chr('0'),
				$myrho$elm_round$Round$increaseNum(headtail));
		}
	} else {
		var c = $elm$core$Char$toCode(head);
		return ((c >= 48) && (c < 57)) ? A2(
			$elm$core$String$cons,
			$elm$core$Char$fromCode(c + 1),
			tail) : '0';
	}
};
var $elm$core$Basics$isInfinite = _Basics_isInfinite;
var $elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $elm$core$String$reverse = _String_reverse;
var $myrho$elm_round$Round$splitComma = function (str) {
	var _v0 = A2($elm$core$String$split, '.', str);
	if (_v0.b) {
		if (_v0.b.b) {
			var before = _v0.a;
			var _v1 = _v0.b;
			var after = _v1.a;
			return _Utils_Tuple2(before, after);
		} else {
			var before = _v0.a;
			return _Utils_Tuple2(before, '0');
		}
	} else {
		return _Utils_Tuple2('0', '0');
	}
};
var $myrho$elm_round$Round$toDecimal = function (fl) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(
			$elm$core$Basics$abs(fl)));
	if (_v0.b) {
		if (_v0.b.b) {
			var num = _v0.a;
			var _v1 = _v0.b;
			var exp = _v1.a;
			var e = A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(
					A2($elm$core$String$startsWith, '+', exp) ? A2($elm$core$String$dropLeft, 1, exp) : exp));
			var _v2 = $myrho$elm_round$Round$splitComma(num);
			var before = _v2.a;
			var after = _v2.b;
			var total = _Utils_ap(before, after);
			var zeroed = (e < 0) ? A2(
				$elm$core$Maybe$withDefault,
				'0',
				A2(
					$elm$core$Maybe$map,
					function (_v3) {
						var a = _v3.a;
						var b = _v3.b;
						return a + ('.' + b);
					},
					A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$mapFirst($elm$core$String$fromChar),
						$elm$core$String$uncons(
							_Utils_ap(
								A2(
									$elm$core$String$repeat,
									$elm$core$Basics$abs(e),
									'0'),
								total))))) : A3(
				$elm$core$String$padRight,
				e + 1,
				_Utils_chr('0'),
				total);
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				zeroed);
		} else {
			var num = _v0.a;
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				num);
		}
	} else {
		return '';
	}
};
var $myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if ($elm$core$Basics$isInfinite(fl) || $elm$core$Basics$isNaN(fl)) {
			return $elm$core$String$fromFloat(fl);
		} else {
			var signed = fl < 0;
			var _v0 = $myrho$elm_round$Round$splitComma(
				$myrho$elm_round$Round$toDecimal(
					$elm$core$Basics$abs(fl)));
			var before = _v0.a;
			var after = _v0.b;
			var r = $elm$core$String$length(before) + s;
			var normalized = _Utils_ap(
				A2($elm$core$String$repeat, (-r) + 1, '0'),
				A3(
					$elm$core$String$padRight,
					r,
					_Utils_chr('0'),
					_Utils_ap(before, after)));
			var totalLen = $elm$core$String$length(normalized);
			var roundDigitIndex = A2($elm$core$Basics$max, 1, r);
			var increase = A2(
				functor,
				signed,
				A3($elm$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3($elm$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? $elm$core$String$reverse(
				A2(
					$elm$core$Maybe$withDefault,
					'1',
					A2(
						$elm$core$Maybe$map,
						$myrho$elm_round$Round$increaseNum,
						$elm$core$String$uncons(
							$elm$core$String$reverse(remains))))) : remains;
			var numLen = $elm$core$String$length(num);
			var numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(
				num,
				A2(
					$elm$core$String$repeat,
					$elm$core$Basics$abs(s),
					'0')) : ((_Utils_cmp(
				s,
				$elm$core$String$length(after)) < 0) ? (A3($elm$core$String$slice, 0, numLen - s, num) + ('.' + A3($elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(
				before + '.',
				A3(
					$elm$core$String$padRight,
					s,
					_Utils_chr('0'),
					after))));
			return A2($myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var $myrho$elm_round$Round$round = $myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _v0 = $elm$core$String$uncons(str);
			if (_v0.$ === 'Nothing') {
				return false;
			} else {
				if ('5' === _v0.a.a.valueOf()) {
					if (_v0.a.b === '') {
						var _v1 = _v0.a;
						return !signed;
					} else {
						var _v2 = _v0.a;
						return true;
					}
				} else {
					var _v3 = _v0.a;
					var _int = _v3.a;
					return function (i) {
						return ((i > 53) && signed) || ((i >= 53) && (!signed));
					}(
						$elm$core$Char$toCode(_int));
				}
			}
		}));
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $cuducos$elm_format_number$FormatNumber$Parser$splitInParts = F2(
	function (locale, value) {
		var toString = function () {
			var _v1 = locale.decimals;
			switch (_v1.$) {
				case 'Max':
					var max = _v1.a;
					return $myrho$elm_round$Round$round(max);
				case 'Min':
					return $elm$core$String$fromFloat;
				default:
					var exact = _v1.a;
					return $myrho$elm_round$Round$round(exact);
			}
		}();
		var asList = A2(
			$elm$core$String$split,
			'.',
			toString(value));
		var decimals = function () {
			var _v0 = $elm$core$List$tail(asList);
			if (_v0.$ === 'Just') {
				var values = _v0.a;
				return A2(
					$elm$core$Maybe$withDefault,
					'',
					$elm$core$List$head(values));
			} else {
				return '';
			}
		}();
		var integers = A2(
			$elm$core$Maybe$withDefault,
			'',
			$elm$core$List$head(asList));
		return _Utils_Tuple2(integers, decimals);
	});
var $cuducos$elm_format_number$FormatNumber$Parser$splitByIndian = function (integers) {
	var thousand = ($elm$core$String$length(integers) > 3) ? A2($elm$core$String$right, 3, integers) : integers;
	var reversedSplitHundreds = function (value) {
		return ($elm$core$String$length(value) > 2) ? A2(
			$elm$core$List$cons,
			A2($elm$core$String$right, 2, value),
			reversedSplitHundreds(
				A2($elm$core$String$dropRight, 2, value))) : ((!$elm$core$String$length(value)) ? _List_Nil : _List_fromArray(
			[value]));
	};
	return $elm$core$List$reverse(
		A2(
			$elm$core$List$cons,
			thousand,
			reversedSplitHundreds(
				A2($elm$core$String$dropRight, 3, integers))));
};
var $cuducos$elm_format_number$FormatNumber$Parser$splitByWestern = function (integers) {
	var reversedSplitThousands = function (value) {
		return ($elm$core$String$length(value) > 3) ? A2(
			$elm$core$List$cons,
			A2($elm$core$String$right, 3, value),
			reversedSplitThousands(
				A2($elm$core$String$dropRight, 3, value))) : _List_fromArray(
			[value]);
	};
	return $elm$core$List$reverse(
		reversedSplitThousands(integers));
};
var $cuducos$elm_format_number$FormatNumber$Parser$splitIntegers = F2(
	function (system, integers) {
		if (system.$ === 'Western') {
			return $cuducos$elm_format_number$FormatNumber$Parser$splitByWestern(
				A2($elm$core$String$filter, $elm$core$Char$isDigit, integers));
		} else {
			return $cuducos$elm_format_number$FormatNumber$Parser$splitByIndian(
				A2($elm$core$String$filter, $elm$core$Char$isDigit, integers));
		}
	});
var $cuducos$elm_format_number$FormatNumber$Parser$parse = F2(
	function (locale, original) {
		var parts = A2($cuducos$elm_format_number$FormatNumber$Parser$splitInParts, locale, original);
		var integers = A2(
			$cuducos$elm_format_number$FormatNumber$Parser$splitIntegers,
			locale.system,
			A2($elm$core$String$filter, $elm$core$Char$isDigit, parts.a));
		var decimals = A2($cuducos$elm_format_number$FormatNumber$Parser$getDecimals, locale, parts.b);
		var partial = A5($cuducos$elm_format_number$FormatNumber$Parser$FormattedNumber, original, integers, decimals, '', '');
		var _v0 = $cuducos$elm_format_number$FormatNumber$Parser$classify(partial);
		switch (_v0.$) {
			case 'Negative':
				return _Utils_update(
					partial,
					{prefix: locale.negativePrefix, suffix: locale.negativeSuffix});
			case 'Positive':
				return _Utils_update(
					partial,
					{prefix: locale.positivePrefix, suffix: locale.positiveSuffix});
			default:
				return _Utils_update(
					partial,
					{prefix: locale.zeroPrefix, suffix: locale.zeroSuffix});
		}
	});
var $cuducos$elm_format_number$FormatNumber$Stringfy$formatDecimals = F2(
	function (locale, decimals) {
		return (decimals === '') ? '' : _Utils_ap(locale.decimalSeparator, decimals);
	});
var $cuducos$elm_format_number$FormatNumber$Stringfy$stringfy = F2(
	function (locale, formatted) {
		var stringfyDecimals = $cuducos$elm_format_number$FormatNumber$Stringfy$formatDecimals(locale);
		var integers = A2($elm$core$String$join, locale.thousandSeparator, formatted.integers);
		var decimals = stringfyDecimals(formatted.decimals);
		return $elm$core$String$concat(
			_List_fromArray(
				[formatted.prefix, integers, decimals, formatted.suffix]));
	});
var $cuducos$elm_format_number$FormatNumber$format = F2(
	function (locale, number_) {
		return A2(
			$cuducos$elm_format_number$FormatNumber$Stringfy$stringfy,
			locale,
			A2($cuducos$elm_format_number$FormatNumber$Parser$parse, locale, number_));
	});
var $cuducos$elm_format_number$FormatNumber$Locales$Min = function (a) {
	return {$: 'Min', a: a};
};
var $cuducos$elm_format_number$FormatNumber$Locales$Western = {$: 'Western'};
var $cuducos$elm_format_number$FormatNumber$Locales$base = {
	decimalSeparator: '.',
	decimals: $cuducos$elm_format_number$FormatNumber$Locales$Min(0),
	negativePrefix: '−',
	negativeSuffix: '',
	positivePrefix: '',
	positiveSuffix: '',
	system: $cuducos$elm_format_number$FormatNumber$Locales$Western,
	thousandSeparator: '',
	zeroPrefix: '',
	zeroSuffix: ''
};
var $cuducos$elm_format_number$FormatNumber$Locales$usLocale = _Utils_update(
	$cuducos$elm_format_number$FormatNumber$Locales$base,
	{
		decimals: $cuducos$elm_format_number$FormatNumber$Locales$Exact(2),
		thousandSeparator: ','
	});
var $author$project$UtilsForViews$showDecimal2 = function (x) {
	var locale = _Utils_update(
		$cuducos$elm_format_number$FormatNumber$Locales$usLocale,
		{
			decimals: $cuducos$elm_format_number$FormatNumber$Locales$Exact(2),
			negativePrefix: '-',
			thousandSeparator: ''
		});
	return A2($cuducos$elm_format_number$FormatNumber$format, locale, x);
};
var $author$project$UtilsForViews$showShortMeasure = F2(
	function (imperial, distance) {
		return imperial ? ($author$project$UtilsForViews$showDecimal2(
			$ianmackenzie$elm_units$Length$inFeet(distance)) + ' feet') : ($author$project$UtilsForViews$showDecimal2(
			$ianmackenzie$elm_units$Length$inMeters(distance)) + 'm');
	});
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Internal$Flag$focus = $mdgriffith$elm_ui$Internal$Flag$flag(31);
var $mdgriffith$elm_ui$Internal$Model$getHeight = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (acc.$ === 'Just') {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 'Height') {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $mdgriffith$elm_ui$Internal$Model$getSpacing = F2(
	function (attrs, _default) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A3(
				$elm$core$List$foldr,
				F2(
					function (attr, acc) {
						if (acc.$ === 'Just') {
							var x = acc.a;
							return $elm$core$Maybe$Just(x);
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v2 = attr.b;
								var x = _v2.b;
								var y = _v2.c;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}),
				$elm$core$Maybe$Nothing,
				attrs));
	});
var $mdgriffith$elm_ui$Internal$Model$getWidth = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (acc.$ === 'Just') {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 'Width') {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 'HiddenLabel') {
		return true;
	} else {
		return false;
	}
};
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $mdgriffith$elm_ui$Element$spacingXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$spacing,
			A3(
				$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
				A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, y),
				x,
				y));
	});
var $elm$html$Html$Attributes$step = function (n) {
	return A2($elm$html$Html$Attributes$stringProperty, 'step', n);
};
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Element$fillPortion = $mdgriffith$elm_ui$Internal$Model$Fill;
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 'Styled':
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.html, add, context));
							}),
						styles: styled.styles
					});
			case 'Unstyled':
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 'Text':
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttr = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Element$Input$viewHorizontalThumb = F3(
	function (factor, thumbAttributes, trackHeight) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackHeight)),
					$mdgriffith$elm_ui$Element$centerY
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerY,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$viewVerticalThumb = F3(
	function (factor, thumbAttributes, trackWidth) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
					$mdgriffith$elm_ui$Element$centerX
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerX,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$slider = F2(
	function (attributes, input) {
		var trackWidth = $mdgriffith$elm_ui$Internal$Model$getWidth(attributes);
		var trackHeight = $mdgriffith$elm_ui$Internal$Model$getHeight(attributes);
		var vertical = function () {
			var _v8 = _Utils_Tuple2(trackWidth, trackHeight);
			_v8$3:
			while (true) {
				if (_v8.a.$ === 'Nothing') {
					if (_v8.b.$ === 'Nothing') {
						var _v9 = _v8.a;
						var _v10 = _v8.b;
						return false;
					} else {
						break _v8$3;
					}
				} else {
					if ((_v8.a.a.$ === 'Px') && (_v8.b.$ === 'Just')) {
						switch (_v8.b.a.$) {
							case 'Px':
								var w = _v8.a.a.a;
								var h = _v8.b.a.a;
								return _Utils_cmp(h, w) > 0;
							case 'Fill':
								return true;
							default:
								break _v8$3;
						}
					} else {
						break _v8$3;
					}
				}
			}
			return false;
		}();
		var factor = (input.value - input.min) / (input.max - input.min);
		var _v0 = input.thumb;
		var thumbAttributes = _v0.a;
		var height = $mdgriffith$elm_ui$Internal$Model$getHeight(thumbAttributes);
		var thumbHeightString = function () {
			if (height.$ === 'Nothing') {
				return '20px';
			} else {
				if (height.a.$ === 'Px') {
					var px = height.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var width = $mdgriffith$elm_ui$Internal$Model$getWidth(thumbAttributes);
		var thumbWidthString = function () {
			if (width.$ === 'Nothing') {
				return '20px';
			} else {
				if (width.a.$ === 'Px') {
					var px = width.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var className = 'thmb-' + (thumbWidthString + ('-' + thumbHeightString));
		var thumbShadowStyle = _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', thumbWidthString),
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', thumbHeightString)
			]);
		var _v1 = A2(
			$mdgriffith$elm_ui$Internal$Model$getSpacing,
			attributes,
			_Utils_Tuple2(5, 5));
		var spacingX = _v1.a;
		var spacingY = _v1.b;
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(input.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : A2($mdgriffith$elm_ui$Element$spacingXY, spacingX, spacingY),
					$mdgriffith$elm_ui$Element$Region$announce,
					$mdgriffith$elm_ui$Element$width(
					function () {
						if (trackWidth.$ === 'Nothing') {
							return $mdgriffith$elm_ui$Element$fill;
						} else {
							if (trackWidth.a.$ === 'Px') {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackWidth.a;
								return x;
							}
						}
					}()),
					$mdgriffith$elm_ui$Element$height(
					function () {
						if (trackHeight.$ === 'Nothing') {
							return $mdgriffith$elm_ui$Element$shrink;
						} else {
							if (trackHeight.a.$ === 'Px') {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackHeight.a;
								return x;
							}
						}
					}())
				]),
			input.label,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
						$mdgriffith$elm_ui$Element$height(
						A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$px(20),
							trackHeight))
					]),
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('input'),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$active,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-moz-range-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$hover,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-webkit-slider-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$focus,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-ms-thumb'), thumbShadowStyle)),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$class(className + ' ui-slide-bar focusable-parent')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Events$onInput(
									function (str) {
										var _v4 = $elm$core$String$toFloat(str);
										if (_v4.$ === 'Nothing') {
											return input.onChange(0);
										} else {
											var val = _v4.a;
											return input.onChange(val);
										}
									})),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_('range')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$step(
									function () {
										var _v5 = input.step;
										if (_v5.$ === 'Nothing') {
											return 'any';
										} else {
											var step = _v5.a;
											return $elm$core$String$fromFloat(step);
										}
									}())),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$min(
									$elm$core$String$fromFloat(input.min))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$max(
									$elm$core$String$fromFloat(input.max))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$value(
									$elm$core$String$fromFloat(input.value))),
								vertical ? $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'orient', 'vertical')) : $mdgriffith$elm_ui$Internal$Model$NoAttribute,
								$mdgriffith$elm_ui$Element$width(
								vertical ? A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight) : A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
								$mdgriffith$elm_ui$Element$height(
								vertical ? A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth) : A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight))
							]),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width(
								A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height(
									A2(
										$elm$core$Maybe$withDefault,
										$mdgriffith$elm_ui$Element$px(20),
										trackHeight)),
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$behindContent(
											vertical ? A3(
												$mdgriffith$elm_ui$Element$Input$viewVerticalThumb,
												factor,
												A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable-thumb'),
													thumbAttributes),
												trackWidth) : A3(
												$mdgriffith$elm_ui$Element$Input$viewHorizontalThumb,
												factor,
												A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable-thumb'),
													thumbAttributes),
												trackHeight))
										])))),
						$mdgriffith$elm_ui$Element$none)
					])));
	});
var $author$project$Tools$BendSmoother$bendSmoothnessSlider = F3(
	function (imperial, options, wrap) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						'Spacing: ' + A2(
							$author$project$UtilsForViews$showShortMeasure,
							imperial,
							$ianmackenzie$elm_units$Length$meters(options.bendTrackPointSpacing)))),
				max: $ianmackenzie$elm_units$Length$inMeters(
					imperial ? $ianmackenzie$elm_units$Length$feet(30.0) : $ianmackenzie$elm_units$Length$meters(10.0)),
				min: $ianmackenzie$elm_units$Length$inMeters(
					imperial ? $ianmackenzie$elm_units$Length$feet(3.0) : $ianmackenzie$elm_units$Length$meters(1.0)),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$BendSmoother$SetBendTrackPointSpacing),
				step: $elm$core$Maybe$Nothing,
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: options.bendTrackPointSpacing
			});
	});
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$ViewPureStyles$noTrackMessage = A2(
	$mdgriffith$elm_ui$Element$paragraph,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$padding(20),
			$mdgriffith$elm_ui$Element$spacing(5),
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$centerY,
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(100))
		]),
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$text('Controls will appear here when a track is loaded.')
		]));
var $author$project$Tools$BendSmoother$viewBendControls = F4(
	function (imperial, wrapper, options, track) {
		var fixBendButton = function (smooth) {
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: function () {
						if (smooth.$ === 'Just') {
							var isSmooth = smooth.a;
							return A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(
										'Smooth between markers\nRadius ' + A2(
											$author$project$UtilsForViews$showShortMeasure,
											imperial,
											$ianmackenzie$elm_units$Length$meters(isSmooth.radius)))
									]));
						} else {
							return $mdgriffith$elm_ui$Element$text('No bend found');
						}
					}(),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$BendSmoother$ApplySmoothBend))
				});
		};
		if (track.$ === 'Just') {
			var isTrack = track.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A3($author$project$Tools$BendSmoother$bendSmoothnessSlider, imperial, options, wrapper)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						fixBendButton(options.smoothedBend))
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage;
		}
	});
var $author$project$Tools$BendSmoother$SetSegments = function (a) {
	return {$: 'SetSegments', a: a};
};
var $author$project$Tools$BendSmoother$segmentSlider = F3(
	function (imperial, options, wrap) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						'Segments: ' + $elm$core$String$fromInt(options.segments))),
				max: 7.0,
				min: 1.0,
				onChange: A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, wrap, $author$project$Tools$BendSmoother$SetSegments),
					$elm$core$Basics$round),
				step: $elm$core$Maybe$Just(1.0),
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: options.segments
			});
	});
var $author$project$Tools$BendSmoother$viewPointControls = F4(
	function (imperial, wrapper, options, track) {
		var fixButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			{
				label: $mdgriffith$elm_ui$Element$text('Smooth points'),
				onPress: $elm$core$Maybe$Just(
					wrapper($author$project$Tools$BendSmoother$ApplySmoothBend))
			});
		if (track.$ === 'Just') {
			var isTrack = track.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A3($author$project$Tools$BendSmoother$segmentSlider, imperial, options, wrapper)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						fixButton)
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage;
		}
	});
var $author$project$Tools$BendSmoother$view = F4(
	function (imperial, wrapper, options, track) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					A2(
						$mdgriffith$elm_ui$Element$Input$radioRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						{
							label: $mdgriffith$elm_ui$Element$Input$labelHidden('mode'),
							onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$BendSmoother$SetMode),
							options: _List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$option,
									$author$project$Tools$BendSmootherOptions$SmoothBend,
									$mdgriffith$elm_ui$Element$text('Bend')),
									A2(
									$mdgriffith$elm_ui$Element$Input$option,
									$author$project$Tools$BendSmootherOptions$SmoothPoint,
									$mdgriffith$elm_ui$Element$text('Point'))
								]),
							selected: $elm$core$Maybe$Just(options.mode)
						})),
					function () {
					var _v0 = options.mode;
					if (_v0.$ === 'SmoothBend') {
						return A4($author$project$Tools$BendSmoother$viewBendControls, imperial, wrapper, options, track);
					} else {
						return A4($author$project$Tools$BendSmoother$viewPointControls, imperial, wrapper, options, track);
					}
				}()
				]));
	});
var $author$project$Tools$BezierSplines$BezierApplyWithOptions = {$: 'BezierApplyWithOptions'};
var $author$project$Tools$BezierOptions$ExtentIsTrack = {$: 'ExtentIsTrack'};
var $author$project$Tools$BezierSplines$SetBezierStyle = function (a) {
	return {$: 'SetBezierStyle', a: a};
};
var $author$project$Tools$BezierSplines$SetBezierTension = function (a) {
	return {$: 'SetBezierTension', a: a};
};
var $author$project$Tools$BezierSplines$SetBezierTolerance = function (a) {
	return {$: 'SetBezierTolerance', a: a};
};
var $author$project$Tools$BezierSplines$SetExtent = function (a) {
	return {$: 'SetExtent', a: a};
};
var $author$project$Tools$BezierOptions$ThroughExisting = {$: 'ThroughExisting'};
var $mdgriffith$elm_ui$Element$Input$Column = {$: 'Column'};
var $mdgriffith$elm_ui$Element$Input$radio = $mdgriffith$elm_ui$Element$Input$radioHelper($mdgriffith$elm_ui$Element$Input$Column);
var $author$project$Tools$BezierSplines$view = F2(
	function (wrap, options) {
		var sliders = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelBelow,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(
								'Tension ' + $author$project$UtilsForViews$showDecimal2(options.bezierTension))),
						max: 1.0,
						min: 0.0,
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$BezierSplines$SetBezierTension),
						step: $elm$core$Maybe$Nothing,
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: options.bezierTension
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelBelow,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(
								'Tolerance ' + $author$project$UtilsForViews$showDecimal2(options.bezierTolerance))),
						max: 10.0,
						min: 1.0,
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$BezierSplines$SetBezierTolerance),
						step: $elm$core$Maybe$Just(0.5),
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: options.bezierTolerance
					})
				]));
		var modeChoice = A2(
			$mdgriffith$elm_ui$Element$Input$radio,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Style'),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$BezierSplines$SetBezierStyle),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$BezierOptions$ThroughExisting,
						$mdgriffith$elm_ui$Element$text('Through existing points')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$BezierOptions$Approximated,
						$mdgriffith$elm_ui$Element$text('Approximating existing points'))
					]),
				selected: $elm$core$Maybe$Just(options.bezierStyle)
			});
		var extent = A2(
			$mdgriffith$elm_ui$Element$Input$radioRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Style'),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$BezierSplines$SetExtent),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$BezierOptions$ExtentIsRange,
						$mdgriffith$elm_ui$Element$text('Selected range\n(preview)')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$BezierOptions$ExtentIsTrack,
						$mdgriffith$elm_ui$Element$text('Whole track\n(no preview)'))
					]),
				selected: $elm$core$Maybe$Just(options.extent)
			});
		var actionButton = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			A2(
				$mdgriffith$elm_ui$Element$Input$button,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$author$project$ViewPureStyles$neatToolsBorder),
				{
					label: A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Apply')
							])),
					onPress: $elm$core$Maybe$Just(
						wrap($author$project$Tools$BezierSplines$BezierApplyWithOptions))
				}));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					sliders),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					modeChoice),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					extent),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					actionButton)
				]));
	});
var $author$project$Tools$CentroidAverage$ApplyWithOptions = {$: 'ApplyWithOptions'};
var $author$project$Tools$CentroidAverageOptions$ExtentTrack = {$: 'ExtentTrack'};
var $author$project$Tools$CentroidAverage$SetExtent = function (a) {
	return {$: 'SetExtent', a: a};
};
var $author$project$Tools$CentroidAverage$SetWeighting = function (a) {
	return {$: 'SetWeighting', a: a};
};
var $author$project$Tools$CentroidAverage$ToggleAltitude = function (a) {
	return {$: 'ToggleAltitude', a: a};
};
var $author$project$Tools$CentroidAverage$TogglePosition = function (a) {
	return {$: 'TogglePosition', a: a};
};
var $mdgriffith$elm_ui$Element$Input$checkbox = F2(
	function (attrs, _v0) {
		var label = _v0.label;
		var icon = _v0.icon;
		var checked = _v0.checked;
		var onChange = _v0.onChange;
		var attributes = _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(6),
					$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Events$onClick(
						onChange(!checked))),
					$mdgriffith$elm_ui$Element$Region$announce,
					$mdgriffith$elm_ui$Element$Input$onKeyLookup(
					function (code) {
						return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(
							onChange(!checked)) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(
							onChange(!checked)) : $elm$core$Maybe$Nothing);
					}),
					$mdgriffith$elm_ui$Element$Input$tabindex(0),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			attrs);
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$html$Html$Attributes$attribute, 'role', 'checkbox')),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						A2(
							$elm$html$Html$Attributes$attribute,
							'aria-checked',
							checked ? 'true' : 'false')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(label),
						attributes))),
			label,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
					]),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[
							icon(checked)
						]))));
	});
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textCenter);
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Internal$Model$Rotate = F2(
	function (a, b) {
		return {$: 'Rotate', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$rotate = $mdgriffith$elm_ui$Internal$Flag$flag(24);
var $mdgriffith$elm_ui$Element$rotate = function (angle) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$rotate,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Rotate,
			_Utils_Tuple3(0, 0, 1),
			angle));
};
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.inset ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.blur) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.size) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: false, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 'Transparency', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$transparent = function (on) {
	return on ? A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'transparent', 1.0)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'visible', 0.0));
};
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.bottom;
	var top = _v0.top;
	var left = _v0.left;
	var right = _v0.right;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $mdgriffith$elm_ui$Element$Input$defaultCheckbox = function (checked) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable'),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(14)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(14)),
				$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$white),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Font$size(9),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$Border$rounded(3),
				$mdgriffith$elm_ui$Element$Border$color(
				checked ? A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255) : A3($mdgriffith$elm_ui$Element$rgb, 211 / 255, 211 / 255, 211 / 255)),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 1,
					color: checked ? A4($mdgriffith$elm_ui$Element$rgba, 238 / 255, 238 / 255, 238 / 255, 0) : A3($mdgriffith$elm_ui$Element$rgb, 238 / 255, 238 / 255, 238 / 255),
					offset: _Utils_Tuple2(0, 0),
					size: 1
				}),
				$mdgriffith$elm_ui$Element$Background$color(
				checked ? A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255) : $mdgriffith$elm_ui$Element$Input$white),
				$mdgriffith$elm_ui$Element$Border$width(
				checked ? 0 : 1),
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$white),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(6)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(9)),
							$mdgriffith$elm_ui$Element$rotate(
							$elm$core$Basics$degrees(-45)),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$moveUp(1),
							$mdgriffith$elm_ui$Element$transparent(!checked),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 2, left: 2, right: 0, top: 0})
						]),
					$mdgriffith$elm_ui$Element$none))
			]),
		$mdgriffith$elm_ui$Element$none);
};
var $mdgriffith$elm_ui$Element$Input$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Element$Input$labelLeft = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$OnLeft);
var $mdgriffith$elm_ui$Element$Input$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Element$Input$labelRight = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$OnRight);
var $author$project$Tools$CentroidAverage$view = F2(
	function (wrap, options) {
		var sliders = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelBelow,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(
								'Weighting ' + $author$project$UtilsForViews$showDecimal2(options.weighting))),
						max: 1.0,
						min: 0.0,
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$CentroidAverage$SetWeighting),
						step: $elm$core$Maybe$Nothing,
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: options.weighting
					})
				]));
		var modeChoices = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$checkbox,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(10),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					{
						checked: options.applyToPosition,
						icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('Position')),
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$CentroidAverage$TogglePosition)
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$checkbox,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(10),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					{
						checked: options.applyToAltitude,
						icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelRight,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('Altitude')),
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$CentroidAverage$ToggleAltitude)
					})
				]));
		var extent = A2(
			$mdgriffith$elm_ui$Element$Input$radioRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Style'),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$CentroidAverage$SetExtent),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$CentroidAverageOptions$ExtentRange,
						$mdgriffith$elm_ui$Element$text('Selected range\n(preview)')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$CentroidAverageOptions$ExtentTrack,
						$mdgriffith$elm_ui$Element$text('Whole track\n(no preview)'))
					]),
				selected: $elm$core$Maybe$Just(options.extent)
			});
		var actionButton = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			A2(
				$mdgriffith$elm_ui$Element$Input$button,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$author$project$ViewPureStyles$neatToolsBorder),
				{
					label: A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Apply')
							])),
					onPress: $elm$core$Maybe$Just(
						wrap($author$project$Tools$CentroidAverage$ApplyWithOptions))
				}));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					sliders),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					modeChoices),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					extent),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					actionButton)
				]));
	});
var $author$project$Tools$CurveFormer$ApplyWithOptions = {$: 'ApplyWithOptions'};
var $author$project$Tools$CurveFormer$DraggerReset = {$: 'DraggerReset'};
var $author$project$Tools$CurveFormerOptions$Piecewise = {$: 'Piecewise'};
var $author$project$Tools$CurveFormer$SetDiscWidth = function (a) {
	return {$: 'SetDiscWidth', a: a};
};
var $author$project$Tools$CurveFormer$SetGradientSmoothingMode = function (a) {
	return {$: 'SetGradientSmoothingMode', a: a};
};
var $author$project$Tools$CurveFormer$SetPushRadius = function (a) {
	return {$: 'SetPushRadius', a: a};
};
var $author$project$Tools$CurveFormer$SetSpacing = function (a) {
	return {$: 'SetSpacing', a: a};
};
var $author$project$Tools$CurveFormer$SetTransitionRadius = function (a) {
	return {$: 'SetTransitionRadius', a: a};
};
var $author$project$Tools$CurveFormer$ToggleUsePullRadius = function (a) {
	return {$: 'ToggleUsePullRadius', a: a};
};
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$peace = A3($mdgriffith$elm_ui$Element$rgb255, 164, 176, 190);
var $author$project$ViewPureStyles$disabledToolsBorder = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
		$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
		$mdgriffith$elm_ui$Element$Border$rounded(4),
		$mdgriffith$elm_ui$Element$Border$width(2),
		$mdgriffith$elm_ui$Element$padding(3)
	]);
var $author$project$ViewPureStyles$edges = {bottom: 0, left: 0, right: 0, top: 0};
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $author$project$Tools$CurveFormer$DraggerGrab = function (a) {
	return {$: 'DraggerGrab', a: a};
};
var $author$project$Tools$CurveFormer$DraggerMove = function (a) {
	return {$: 'DraggerMove', a: a};
};
var $author$project$Tools$CurveFormer$DraggerRelease = function (a) {
	return {$: 'DraggerRelease', a: a};
};
var $ianmackenzie$elm_geometry$Vector2d$components = function (_v0) {
	var v = _v0.a;
	return _Utils_Tuple2(
		$ianmackenzie$elm_units$Quantity$Quantity(v.x),
		$ianmackenzie$elm_units$Quantity$Quantity(v.y));
};
var $author$project$Tools$CurveFormer$controlSvgRadius = 100;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$defaultOptions = {preventDefault: true, stopPropagation: false};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$Event = F5(
	function (pointerType, pointer, pointerId, isPrimary, contactDetails) {
		return {contactDetails: contactDetails, isPrimary: isPrimary, pointer: pointer, pointerId: pointerId, pointerType: pointerType};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$ContactDetails = F5(
	function (width, height, pressure, tiltX, tiltY) {
		return {height: height, pressure: pressure, tiltX: tiltX, tiltY: tiltY, width: width};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$contactDetailsDecoder = A6(
	$elm$json$Json$Decode$map5,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$ContactDetails,
	A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'pressure', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'tiltX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'tiltY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$MouseType = {$: 'MouseType'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$PenType = {$: 'PenType'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$TouchType = {$: 'TouchType'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$stringToPointerType = function (str) {
	switch (str) {
		case 'pen':
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$PenType;
		case 'touch':
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$TouchType;
		default:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$MouseType;
	}
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$pointerTypeDecoder = A2($elm$json$Json$Decode$map, $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$stringToPointerType, $elm$json$Json$Decode$string);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$eventDecoder = A6(
	$elm$json$Json$Decode$map5,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$Event,
	A2($elm$json$Json$Decode$field, 'pointerType', $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$pointerTypeDecoder),
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder,
	A2($elm$json$Json$Decode$field, 'pointerId', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'isPrimary', $elm$json$Json$Decode$bool),
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$contactDetailsDecoder);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onWithOptions = F3(
	function (event, options, tag) {
		return A2(
			$elm$html$Html$Events$custom,
			event,
			A2(
				$elm$json$Json$Decode$map,
				function (ev) {
					return {
						message: tag(ev),
						preventDefault: options.preventDefault,
						stopPropagation: options.stopPropagation
					};
				},
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$eventDecoder));
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onDown = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onWithOptions, 'pointerdown', $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onMove = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onWithOptions, 'pointermove', $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onUp = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onWithOptions, 'pointerup', $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$defaultOptions);
var $ianmackenzie$elm_geometry$Point2d$fromMeters = function (givenCoordinates) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(givenCoordinates);
};
var $author$project$Tools$CurveFormer$point = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return $ianmackenzie$elm_geometry$Point2d$fromMeters(
		{x: x, y: y});
};
var $author$project$Tools$CurveFormer$twoWayDragControl = F2(
	function (options, wrapper) {
		var clickableContainer = A2(
			$elm$core$Basics$composeL,
			A2(
				$elm$core$Basics$composeL,
				$mdgriffith$elm_ui$Element$el(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onDown(
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.pointer;
									},
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.offsetPos;
										},
										A2(
											$elm$core$Basics$composeR,
											$author$project$Tools$CurveFormer$point,
											A2($elm$core$Basics$composeR, $author$project$Tools$CurveFormer$DraggerGrab, wrapper)))))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onMove(
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.pointer;
									},
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.offsetPos;
										},
										A2(
											$elm$core$Basics$composeR,
											$author$project$Tools$CurveFormer$point,
											A2($elm$core$Basics$composeR, $author$project$Tools$CurveFormer$DraggerMove, wrapper)))))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onUp(
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.pointer;
									},
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.offsetPos;
										},
										A2(
											$elm$core$Basics$composeR,
											$author$project$Tools$CurveFormer$point,
											A2($elm$core$Basics$composeR, $author$project$Tools$CurveFormer$DraggerRelease, wrapper)))))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'touch-action', 'none')),
							$mdgriffith$elm_ui$Element$pointer,
							$mdgriffith$elm_ui$Element$alignLeft
						])),
				$mdgriffith$elm_ui$Element$html),
			$elm$svg$Svg$svg(
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$viewBox('-150 -150 300 300'),
						$elm$svg$Svg$Attributes$width('140px'),
						$elm$svg$Svg$Attributes$height('140px')
					])));
		var _v0 = $ianmackenzie$elm_geometry$Vector2d$components(options.vector);
		var x = _v0.a;
		var y = _v0.b;
		var _v1 = _Utils_Tuple2(
			$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Length$inMeters(x)),
			$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Length$inMeters(y)));
		var xPoint = _v1.a;
		var yPoint = _v1.b;
		return clickableContainer(
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$circle,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$cx('0'),
							$elm$svg$Svg$Attributes$cy('0'),
							$elm$svg$Svg$Attributes$r(
							$elm$core$String$fromInt($author$project$Tools$CurveFormer$controlSvgRadius)),
							$elm$svg$Svg$Attributes$stroke('black'),
							$elm$svg$Svg$Attributes$strokeWidth('1'),
							$elm$svg$Svg$Attributes$fill('darkslategrey')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$line,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$x1('0'),
							$elm$svg$Svg$Attributes$y1('0'),
							$elm$svg$Svg$Attributes$x2(xPoint),
							$elm$svg$Svg$Attributes$y2(yPoint),
							$elm$svg$Svg$Attributes$stroke('orange'),
							$elm$svg$Svg$Attributes$strokeWidth('10'),
							$elm$svg$Svg$Attributes$strokeLinecap('round')
						]),
					_List_Nil)
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 'Padding', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 'Spaced', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, _v0) {
				var pad = _v0.a;
				var spacing = _v0.b;
				return _Utils_Tuple2(
					function () {
						if (pad.$ === 'Just') {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
								var _v3 = attr.b;
								var name = _v3.a;
								var t = _v3.b;
								var r = _v3.c;
								var b = _v3.d;
								var l = _v3.e;
								return $elm$core$Maybe$Just(
									A5($mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (spacing.$ === 'Just') {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v6 = attr.b;
								var name = _v6.a;
								var x = _v6.b;
								var y = _v6.c;
								return $elm$core$Maybe$Just(
									A3($mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		attrs);
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _v0 = $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _v0.a;
		var spaced = _v0.b;
		if (spaced.$ === 'Nothing') {
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asRow,
				$mdgriffith$elm_ui$Internal$Model$div,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							attrs))),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _v2 = spaced.a;
			var spaceName = _v2.a;
			var x = _v2.b;
			var y = _v2.c;
			var newPadding = function () {
				if (padded.$ === 'Just') {
					var _v5 = padded.a;
					var name = _v5.a;
					var t = _v5.b;
					var r = _v5.c;
					var b = _v5.d;
					var l = _v5.e;
					if ((_Utils_cmp(r, x / 2) > -1) && (_Utils_cmp(b, y / 2) > -1)) {
						var newTop = t - (y / 2);
						var newRight = r - (x / 2);
						var newLeft = l - (x / 2);
						var newBottom = b - (y / 2);
						return $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, newRight, newBottom, newLeft),
									newTop,
									newRight,
									newBottom,
									newLeft)));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (newPadding.$ === 'Just') {
				var pad = newPadding.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asRow,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asRow,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												$elm$html$Html$Attributes$style,
												'margin',
												$elm$core$String$fromFloat(halfY) + ('px' + (' ' + ($elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													$elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + ($elm$core$String$fromInt(x) + 'px)'))),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														$elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))),
												A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Internal$Model$StyleClass,
														$mdgriffith$elm_ui$Internal$Flag$spacing,
														A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var $author$project$Tools$CurveFormer$view = F4(
	function (imperial, wrapper, options, track) {
		var squared = function (x) {
			return x * x;
		};
		var showTransitionRadiusSlider = A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						'Joining radius ' + A2($author$project$UtilsForViews$showShortMeasure, imperial, options.transitionRadius))),
				max: 10.0,
				min: 2.0,
				onChange: A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$SetTransitionRadius),
					squared),
				step: $elm$core$Maybe$Nothing,
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: $elm$core$Basics$sqrt(
					$ianmackenzie$elm_units$Length$inMeters(options.transitionRadius))
			});
		var showSpacingSlider = A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						'Spacing ' + A2($author$project$UtilsForViews$showShortMeasure, imperial, options.spacing))),
				max: 10.0,
				min: 2.0,
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$SetSpacing),
				step: $elm$core$Maybe$Nothing,
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: $ianmackenzie$elm_units$Length$inMeters(options.spacing)
			});
		var showPushRadiusSlider = A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						'Bend radius ' + A2($author$project$UtilsForViews$showShortMeasure, imperial, options.pushRadius))),
				max: 10.0,
				min: 2.0,
				onChange: A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$SetPushRadius),
					squared),
				step: $elm$core$Maybe$Nothing,
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: $elm$core$Basics$sqrt(
					$ianmackenzie$elm_units$Length$inMeters(options.pushRadius))
			});
		var showPullSelection = A2(
			$mdgriffith$elm_ui$Element$Input$checkbox,
			_List_Nil,
			{
				checked: options.usePullRadius,
				icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelRight,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY]),
					$mdgriffith$elm_ui$Element$text('Include outliers')),
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$ToggleUsePullRadius)
			});
		var showPullRadiusSlider = A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						'Inclusion zone ' + A2($author$project$UtilsForViews$showShortMeasure, imperial, options.pullRadius))),
				max: 40.0,
				min: 1.0,
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$SetDiscWidth),
				step: $elm$core$Maybe$Nothing,
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: $ianmackenzie$elm_units$Length$inMeters(
					A2($ianmackenzie$elm_units$Quantity$minus, options.pushRadius, options.pullRadius))
			});
		var showModeSelection = A2(
			$mdgriffith$elm_ui$Element$Input$checkbox,
			_List_Nil,
			{
				checked: _Utils_eq(options.smoothGradient, $author$project$Tools$CurveFormerOptions$Holistic),
				icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelRight,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY]),
					$mdgriffith$elm_ui$Element$text('Smooth gradient')),
				onChange: A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$SetGradientSmoothingMode),
					function (check) {
						return check ? $author$project$Tools$CurveFormerOptions$Holistic : $author$project$Tools$CurveFormerOptions$Piecewise;
					})
			});
		var showActionButtons = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$ViewPureStyles$neatToolsBorder,
					{
						label: $mdgriffith$elm_ui$Element$text('Reset'),
						onPress: $elm$core$Maybe$Just(
							wrapper($author$project$Tools$CurveFormer$DraggerReset))
					}),
					function () {
					var _v1 = _Utils_Tuple2(
						$elm$core$List$length(options.newTrackPoints) >= 3,
						options.pointsAreContiguous);
					if (_v1.b) {
						return A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$ViewPureStyles$neatToolsBorder,
							{
								label: $mdgriffith$elm_ui$Element$text('Apply'),
								onPress: $elm$core$Maybe$Just(
									wrapper($author$project$Tools$CurveFormer$ApplyWithOptions))
							});
					} else {
						return A2(
							$mdgriffith$elm_ui$Element$Input$button,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$author$project$ViewPureStyles$disabledToolsBorder),
							{
								label: A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text('Not found')
										])),
								onPress: $elm$core$Maybe$Nothing
							});
					}
				}()
				]));
		if (track.$ === 'Just') {
			var isTrack = track.a;
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$paddingEach(
						_Utils_update(
							$author$project$ViewPureStyles$edges,
							{right: 10})),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				_List_fromArray(
					[
						A2($author$project$Tools$CurveFormer$twoWayDragControl, options, wrapper),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$wrappedRow,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignLeft,
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										showPushRadiusSlider,
										showTransitionRadiusSlider,
										showSpacingSlider,
										showPullSelection,
										options.usePullRadius ? showPullRadiusSlider : $mdgriffith$elm_ui$Element$none
									])),
								showModeSelection,
								showActionButtons
							]))
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage;
		}
	});
var $author$project$Tools$DeletePoints$DeletePointOrPoints = {$: 'DeletePointOrPoints'};
var $author$project$Tools$DeletePoints$view = F2(
	function (msgWrapper, options) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$padding(4),
						$mdgriffith$elm_ui$Element$spacing(4),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(50))
					]),
				A2(
					$mdgriffith$elm_ui$Element$Input$button,
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, $author$project$ViewPureStyles$neatToolsBorder),
					{
						label: options.singlePoint ? $mdgriffith$elm_ui$Element$text('Delete single point') : $mdgriffith$elm_ui$Element$text('Delete between markers'),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$Tools$DeletePoints$DeletePointOrPoints))
					})));
	});
var $author$project$Tools$DirectionChanges$DirectionChangeWithRadius = {$: 'DirectionChangeWithRadius'};
var $author$project$Tools$DirectionChanges$SetCurrentPosition = function (a) {
	return {$: 'SetCurrentPosition', a: a};
};
var $author$project$Tools$DirectionChanges$SetMode = function (a) {
	return {$: 'SetMode', a: a};
};
var $author$project$Tools$DirectionChanges$SetRadius = function (a) {
	return {$: 'SetRadius', a: a};
};
var $author$project$Tools$DirectionChanges$SetThreshold = function (a) {
	return {$: 'SetThreshold', a: a};
};
var $author$project$Tools$DirectionChanges$ViewNext = {$: 'ViewNext'};
var $author$project$Tools$DirectionChanges$ViewPrevious = {$: 'ViewPrevious'};
var $feathericons$elm_feather$FeatherIcons$chevronLeft = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevron-left',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('15 18 9 12 15 6')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$chevronRight = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevron-right',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('9 18 15 12 9 6')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$mousePointer = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'mouse-pointer',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M3 3l7.07 16.97 2.51-7.39 7.39-2.51L3 3z')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M13 13l6 6')
				]),
			_List_Nil)
		]));
var $author$project$ViewPureStyles$shortSliderStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$height(
		$mdgriffith$elm_ui$Element$px(24)),
		$mdgriffith$elm_ui$Element$width(
		$mdgriffith$elm_ui$Element$px(150)),
		$mdgriffith$elm_ui$Element$centerY,
		$mdgriffith$elm_ui$Element$centerX,
		$mdgriffith$elm_ui$Element$behindContent(
		A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(150)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(2)),
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Background$color($author$project$ColourPalette$scrollbarBackground),
					$mdgriffith$elm_ui$Element$Border$rounded(6)
				]),
			$mdgriffith$elm_ui$Element$none))
	]);
var $author$project$UtilsForViews$showDecimal0 = function (x) {
	var locale = _Utils_update(
		$cuducos$elm_format_number$FormatNumber$Locales$usLocale,
		{
			decimals: $cuducos$elm_format_number$FormatNumber$Locales$Exact(0),
			negativePrefix: '-',
			thousandSeparator: ''
		});
	return A2($cuducos$elm_format_number$FormatNumber$format, locale, x);
};
var $author$project$UtilsForViews$showAngle = function (angle) {
	return $author$project$UtilsForViews$showDecimal0(
		$ianmackenzie$elm_units$Angle$inDegrees(angle));
};
var $mdgriffith$elm_ui$Element$Input$thumb = $mdgriffith$elm_ui$Element$Input$Thumb;
var $author$project$ViewPureStyles$sliderThumb = $mdgriffith$elm_ui$Element$Input$thumb(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width(
			$mdgriffith$elm_ui$Element$px(16)),
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(16)),
			$mdgriffith$elm_ui$Element$Border$rounded(4),
			$mdgriffith$elm_ui$Element$Border$width(1),
			$mdgriffith$elm_ui$Element$Border$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5)),
			$mdgriffith$elm_ui$Element$Background$color(
			A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
		]));
var $author$project$Tools$DirectionChanges$view = F4(
	function (imperial, msgWrapper, options, isTrack) {
		if (isTrack.$ === 'Just') {
			var track = isTrack.a;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$padding(4),
							$mdgriffith$elm_ui$Element$spacing(4)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$radio,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							{
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('Mode'),
								onChange: A2($elm$core$Basics$composeL, msgWrapper, $author$project$Tools$DirectionChanges$SetMode),
								options: _List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$Input$option,
										$author$project$Tools$DirectionChanges$DirectionChangeAbrupt,
										$mdgriffith$elm_ui$Element$text('Abrupt changes')),
										A2(
										$mdgriffith$elm_ui$Element$Input$option,
										$author$project$Tools$DirectionChanges$DirectionChangeWithRadius,
										$mdgriffith$elm_ui$Element$text('Significant bends'))
									]),
								selected: $elm$core$Maybe$Just(options.mode)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$slider,
							$author$project$ViewPureStyles$shortSliderStyles,
							{
								label: A2(
									$mdgriffith$elm_ui$Element$Input$labelBelow,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text(
										'Direction change ' + ($elm$core$String$fromInt(
											$elm$core$Basics$round(
												$ianmackenzie$elm_units$Angle$inDegrees(options.threshold))) + 'º'))),
								max: 170,
								min: 30,
								onChange: A2(
									$elm$core$Basics$composeR,
									$ianmackenzie$elm_units$Angle$degrees,
									A2($elm$core$Basics$composeR, $author$project$Tools$DirectionChanges$SetThreshold, msgWrapper)),
								step: $elm$core$Maybe$Just(1),
								thumb: $author$project$ViewPureStyles$sliderThumb,
								value: $ianmackenzie$elm_units$Angle$inDegrees(options.threshold)
							}),
							_Utils_eq(options.mode, $author$project$Tools$DirectionChanges$DirectionChangeWithRadius) ? A2(
							$mdgriffith$elm_ui$Element$Input$slider,
							$author$project$ViewPureStyles$shortSliderStyles,
							{
								label: A2(
									$mdgriffith$elm_ui$Element$Input$labelBelow,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text(
										'Radius ' + A2($author$project$UtilsForViews$showShortMeasure, imperial, options.radius))),
								max: 50.0,
								min: 4.0,
								onChange: A2(
									$elm$core$Basics$composeR,
									$ianmackenzie$elm_units$Length$meters,
									A2($elm$core$Basics$composeR, $author$project$Tools$DirectionChanges$SetRadius, msgWrapper)),
								step: $elm$core$Maybe$Just(1),
								thumb: $author$project$ViewPureStyles$sliderThumb,
								value: $ianmackenzie$elm_units$Length$inMeters(options.radius)
							}) : $mdgriffith$elm_ui$Element$none,
							function () {
							var _v1 = options.breaches;
							if (!_v1.b) {
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
									$mdgriffith$elm_ui$Element$text('None found'));
							} else {
								var a = _v1.a;
								var b = _v1.b;
								var _v2 = A2(
									$elm$core$Maybe$withDefault,
									_Utils_Tuple2(
										0,
										$ianmackenzie$elm_units$Angle$degrees(0)),
									A2($elm_community$list_extra$List$Extra$getAt, options.currentBreach, options.breaches));
								var position = _v2.a;
								var turn = _v2.b;
								return A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(4),
											$mdgriffith$elm_ui$Element$centerX
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX]),
											$mdgriffith$elm_ui$Element$text(
												$elm$core$String$fromInt(options.currentBreach + 1) + (' of ' + ($elm$core$String$fromInt(
													$elm$core$List$length(options.breaches)) + (' is ' + ($author$project$UtilsForViews$showAngle(turn) + 'º')))))),
											A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$Input$button,
													$author$project$ViewPureStyles$neatToolsBorder,
													{
														label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronLeft),
														onPress: $elm$core$Maybe$Just(
															msgWrapper($author$project$Tools$DirectionChanges$ViewPrevious))
													}),
													A2(
													$mdgriffith$elm_ui$Element$Input$button,
													$author$project$ViewPureStyles$neatToolsBorder,
													{
														label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$mousePointer),
														onPress: $elm$core$Maybe$Just(
															msgWrapper(
																$author$project$Tools$DirectionChanges$SetCurrentPosition(position)))
													}),
													A2(
													$mdgriffith$elm_ui$Element$Input$button,
													$author$project$ViewPureStyles$neatToolsBorder,
													{
														label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronRight),
														onPress: $elm$core$Maybe$Just(
															msgWrapper($author$project$Tools$DirectionChanges$ViewNext))
													})
												]))
										]));
							}
						}()
						])));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage;
		}
	});
var $author$project$Tools$DisplaySettings$SetCentreLine = function (a) {
	return {$: 'SetCentreLine', a: a};
};
var $author$project$Tools$DisplaySettings$SetCurtainStyle = function (a) {
	return {$: 'SetCurtainStyle', a: a};
};
var $author$project$Tools$DisplaySettings$SetGroundPlane = function (a) {
	return {$: 'SetGroundPlane', a: a};
};
var $author$project$Tools$DisplaySettings$SetRoadSurface = function (a) {
	return {$: 'SetRoadSurface', a: a};
};
var $author$project$Tools$DisplaySettings$view = F2(
	function (wrap, options) {
		var curtainChoice = A2(
			$mdgriffith$elm_ui$Element$Input$radio,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Curtain'),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$DisplaySettings$SetCurtainStyle),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$DisplaySettingsOptions$NoCurtain,
						$mdgriffith$elm_ui$Element$text('No curtain')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$DisplaySettingsOptions$PlainCurtain,
						$mdgriffith$elm_ui$Element$text('Plain')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$DisplaySettingsOptions$PastelCurtain,
						$mdgriffith$elm_ui$Element$text('Coloured'))
					]),
				selected: $elm$core$Maybe$Just(options.curtainStyle)
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					curtainChoice),
					A2(
					$mdgriffith$elm_ui$Element$Input$checkbox,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					{
						checked: options.roadSurface,
						icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('Road surface')),
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$DisplaySettings$SetRoadSurface)
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$checkbox,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					{
						checked: options.groundPlane,
						icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('Ground')),
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$DisplaySettings$SetGroundPlane)
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$checkbox,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					{
						checked: options.centreLine,
						icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('Centre line')),
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$DisplaySettings$SetCentreLine)
					})
				]));
	});
var $author$project$Tools$GradientProblems$SetCurrentPosition = function (a) {
	return {$: 'SetCurrentPosition', a: a};
};
var $author$project$Tools$GradientProblems$SetMode = function (a) {
	return {$: 'SetMode', a: a};
};
var $author$project$Tools$GradientProblems$SetThreshold = function (a) {
	return {$: 'SetThreshold', a: a};
};
var $author$project$Tools$GradientProblems$SteepClimb = {$: 'SteepClimb'};
var $author$project$Tools$GradientProblems$SteepDescent = {$: 'SteepDescent'};
var $author$project$Tools$GradientProblems$ViewNext = {$: 'ViewNext'};
var $author$project$Tools$GradientProblems$ViewPrevious = {$: 'ViewPrevious'};
var $author$project$Tools$GradientProblems$view = F3(
	function (msgWrapper, options, isTrack) {
		if (isTrack.$ === 'Just') {
			var track = isTrack.a;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$padding(4),
							$mdgriffith$elm_ui$Element$spacing(4)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$radio,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							{
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('Mode'),
								onChange: A2($elm$core$Basics$composeL, msgWrapper, $author$project$Tools$GradientProblems$SetMode),
								options: _List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$Input$option,
										$author$project$Tools$GradientProblems$AbruptChange,
										$mdgriffith$elm_ui$Element$text('Abrupt changes')),
										A2(
										$mdgriffith$elm_ui$Element$Input$option,
										$author$project$Tools$GradientProblems$SteepClimb,
										$mdgriffith$elm_ui$Element$text('Steep climbs')),
										A2(
										$mdgriffith$elm_ui$Element$Input$option,
										$author$project$Tools$GradientProblems$SteepDescent,
										$mdgriffith$elm_ui$Element$text('Steep descents'))
									]),
								selected: $elm$core$Maybe$Just(options.mode)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$slider,
							$author$project$ViewPureStyles$shortSliderStyles,
							{
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('Threshold'),
								max: 20,
								min: 3,
								onChange: A2($elm$core$Basics$composeR, $author$project$Tools$GradientProblems$SetThreshold, msgWrapper),
								step: $elm$core$Maybe$Just(1),
								thumb: $author$project$ViewPureStyles$sliderThumb,
								value: options.threshold
							}),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								'Threshold ' + ($author$project$UtilsForViews$showDecimal2(options.threshold) + '%'))),
							function () {
							var _v1 = options.breaches;
							if (!_v1.b) {
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
									$mdgriffith$elm_ui$Element$text('None found'));
							} else {
								var a = _v1.a;
								var b = _v1.b;
								var _v2 = A2(
									$elm$core$Maybe$withDefault,
									_Utils_Tuple2(0, 0),
									A2($elm_community$list_extra$List$Extra$getAt, options.currentBreach, options.breaches));
								var position = _v2.a;
								var turn = _v2.b;
								return A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(4),
											$mdgriffith$elm_ui$Element$centerX
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX]),
											$mdgriffith$elm_ui$Element$text(
												$elm$core$String$fromInt(options.currentBreach + 1) + (' of ' + ($elm$core$String$fromInt(
													$elm$core$List$length(options.breaches)) + (' is ' + ($author$project$UtilsForViews$showDecimal2(turn) + '%')))))),
											A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$Input$button,
													$author$project$ViewPureStyles$neatToolsBorder,
													{
														label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronLeft),
														onPress: $elm$core$Maybe$Just(
															msgWrapper($author$project$Tools$GradientProblems$ViewPrevious))
													}),
													A2(
													$mdgriffith$elm_ui$Element$Input$button,
													$author$project$ViewPureStyles$neatToolsBorder,
													{
														label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$mousePointer),
														onPress: $elm$core$Maybe$Just(
															msgWrapper(
																$author$project$Tools$GradientProblems$SetCurrentPosition(position)))
													}),
													A2(
													$mdgriffith$elm_ui$Element$Input$button,
													$author$project$ViewPureStyles$neatToolsBorder,
													{
														label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronRight),
														onPress: $elm$core$Maybe$Just(
															msgWrapper($author$project$Tools$GradientProblems$ViewNext))
													})
												]))
										]));
							}
						}()
						])));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage;
		}
	});
var $author$project$Tools$Interpolate$Apply = {$: 'Apply'};
var $author$project$Tools$InterpolateOptions$ExtentIsTrack = {$: 'ExtentIsTrack'};
var $author$project$Tools$Interpolate$SetExtent = function (a) {
	return {$: 'SetExtent', a: a};
};
var $author$project$Tools$Interpolate$SetSpacing = function (a) {
	return {$: 'SetSpacing', a: a};
};
var $author$project$Tools$Interpolate$spacingSlider = F3(
	function (imperial, options, wrap) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						'Spacing: ' + A2($author$project$UtilsForViews$showShortMeasure, imperial, options.minimumSpacing))),
				max: 50.0,
				min: 1.0,
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$Interpolate$SetSpacing),
				step: $elm$core$Maybe$Just(0.5),
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: $ianmackenzie$elm_units$Length$inMeters(options.minimumSpacing)
			});
	});
var $author$project$Tools$Interpolate$view = F4(
	function (imperial, wrapper, options, track) {
		var fixButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			{
				label: $mdgriffith$elm_ui$Element$text('Interpolate'),
				onPress: $elm$core$Maybe$Just(
					wrapper($author$project$Tools$Interpolate$Apply))
			});
		var extent = A2(
			$mdgriffith$elm_ui$Element$Input$radioRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Style'),
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$Interpolate$SetExtent),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$InterpolateOptions$ExtentIsRange,
						$mdgriffith$elm_ui$Element$text('Selected range\n(preview)')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$InterpolateOptions$ExtentIsTrack,
						$mdgriffith$elm_ui$Element$text('Whole track\n(no preview)'))
					]),
				selected: $elm$core$Maybe$Just(options.extent)
			});
		if (track.$ === 'Just') {
			var isTrack = track.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A3($author$project$Tools$Interpolate$spacingSlider, imperial, options, wrapper)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						extent),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						fixButton)
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage;
		}
	});
var $author$project$Tools$LimitGradientOptions$ExtentIsTrack = {$: 'ExtentIsTrack'};
var $author$project$Tools$LimitGradients$LimitGradient = {$: 'LimitGradient'};
var $author$project$Tools$LimitGradients$SetExtent = function (a) {
	return {$: 'SetExtent', a: a};
};
var $author$project$Tools$LimitGradients$SetMaximumAscent = function (a) {
	return {$: 'SetMaximumAscent', a: a};
};
var $author$project$Tools$LimitGradients$SetMaximumDescent = function (a) {
	return {$: 'SetMaximumDescent', a: a};
};
var $author$project$Tools$LimitGradients$view = F2(
	function (options, wrapper) {
		var maxDescentSlider = A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						'Downhill: ' + ($author$project$UtilsForViews$showDecimal0(options.maximumDescent) + '%'))),
				max: 25.0,
				min: 10.0,
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$LimitGradients$SetMaximumDescent),
				step: $elm$core$Maybe$Just(1.0),
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: options.maximumDescent
			});
		var maxAscentSlider = A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						'Uphill: ' + ($author$project$UtilsForViews$showDecimal0(options.maximumAscent) + '%'))),
				max: 25.0,
				min: 10.0,
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$LimitGradients$SetMaximumAscent),
				step: $elm$core$Maybe$Just(1.0),
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: options.maximumAscent
			});
		var extent = A2(
			$mdgriffith$elm_ui$Element$Input$radioRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Style'),
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$LimitGradients$SetExtent),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$LimitGradientOptions$ExtentIsRange,
						$mdgriffith$elm_ui$Element$text('Selected range\n(preview)')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$LimitGradientOptions$ExtentIsTrack,
						$mdgriffith$elm_ui$Element$text('Whole track\n(no preview)'))
					]),
				selected: $elm$core$Maybe$Just(options.extent)
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(6),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					maxAscentSlider),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					maxDescentSlider),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					extent),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$ViewPureStyles$neatToolsBorder,
						{
							label: $mdgriffith$elm_ui$Element$text('Apply limits'),
							onPress: $elm$core$Maybe$Just(
								wrapper($author$project$Tools$LimitGradients$LimitGradient))
						}))
				]));
	});
var $author$project$Tools$Nudge$SetFadeExtent = function (a) {
	return {$: 'SetFadeExtent', a: a};
};
var $author$project$Tools$Nudge$fadeSlider = F3(
	function (imperial, value, wrap) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					$mdgriffith$elm_ui$Element$text(
						A2($author$project$UtilsForViews$showShortMeasure, imperial, value))),
				max: $ianmackenzie$elm_units$Length$inMeters(
					imperial ? $ianmackenzie$elm_units$Length$feet(160.0) : $ianmackenzie$elm_units$Length$meters(50.0)),
				min: 0.0,
				onChange: A2(
					$elm$core$Basics$composeR,
					$ianmackenzie$elm_units$Length$meters,
					A2($elm$core$Basics$composeR, $author$project$Tools$Nudge$SetFadeExtent, wrap)),
				step: $elm$core$Maybe$Nothing,
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: $ianmackenzie$elm_units$Length$inMeters(value)
			});
	});
var $author$project$Tools$Nudge$SetHorizontalNudgeFactor = function (a) {
	return {$: 'SetHorizontalNudgeFactor', a: a};
};
var $author$project$Tools$Nudge$horizontalNudgeSlider = F3(
	function (imperial, value, wrap) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					$mdgriffith$elm_ui$Element$text(
						A2($author$project$UtilsForViews$showShortMeasure, imperial, value))),
				max: $ianmackenzie$elm_units$Length$inMeters(
					imperial ? $ianmackenzie$elm_units$Length$feet(16.0) : $ianmackenzie$elm_units$Length$meters(5.0)),
				min: $ianmackenzie$elm_units$Length$inMeters(
					imperial ? $ianmackenzie$elm_units$Length$feet(-16.0) : $ianmackenzie$elm_units$Length$meters(-5.0)),
				onChange: A2(
					$elm$core$Basics$composeR,
					$ianmackenzie$elm_units$Length$meters,
					A2($elm$core$Basics$composeR, $author$project$Tools$Nudge$SetHorizontalNudgeFactor, wrap)),
				step: $elm$core$Maybe$Nothing,
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: $ianmackenzie$elm_units$Length$inMeters(value)
			});
	});
var $author$project$Tools$Nudge$ApplyWithOptions = {$: 'ApplyWithOptions'};
var $author$project$Tools$Nudge$nudgeButton = F2(
	function (settings, wrap) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			{
				label: $mdgriffith$elm_ui$Element$text('Apply'),
				onPress: $elm$core$Maybe$Just(
					wrap($author$project$Tools$Nudge$ApplyWithOptions))
			});
	});
var $author$project$Tools$Nudge$SetVerticalNudgeFactor = function (a) {
	return {$: 'SetVerticalNudgeFactor', a: a};
};
var $author$project$ViewPureStyles$commonShortVerticalSliderStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$height(
		$mdgriffith$elm_ui$Element$px(150)),
		$mdgriffith$elm_ui$Element$width(
		$mdgriffith$elm_ui$Element$px(20)),
		$mdgriffith$elm_ui$Element$centerY,
		$mdgriffith$elm_ui$Element$centerX,
		$mdgriffith$elm_ui$Element$behindContent(
		A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(2)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(150)),
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Background$color($author$project$ColourPalette$scrollbarBackground),
					$mdgriffith$elm_ui$Element$Border$rounded(6)
				]),
			$mdgriffith$elm_ui$Element$none))
	]);
var $author$project$Tools$Nudge$verticalNudgeSlider = F3(
	function (imperial, value, wrap) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$paddingEach(
					_Utils_update(
						$author$project$ViewPureStyles$edges,
						{left: 10}))
				]),
			A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$commonShortVerticalSliderStyles,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelBelow,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerY]),
						$mdgriffith$elm_ui$Element$text(
							A2($author$project$UtilsForViews$showShortMeasure, imperial, value))),
					max: $ianmackenzie$elm_units$Length$inMeters(
						imperial ? $ianmackenzie$elm_units$Length$feet(16.0) : $ianmackenzie$elm_units$Length$meters(5.0)),
					min: $ianmackenzie$elm_units$Length$inMeters(
						imperial ? $ianmackenzie$elm_units$Length$feet(-16.0) : $ianmackenzie$elm_units$Length$meters(-5.0)),
					onChange: A2(
						$elm$core$Basics$composeR,
						$ianmackenzie$elm_units$Length$meters,
						A2($elm$core$Basics$composeR, $author$project$Tools$Nudge$SetVerticalNudgeFactor, wrap)),
					step: $elm$core$Maybe$Nothing,
					thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
					value: $ianmackenzie$elm_units$Length$inMeters(value)
				}));
	});
var $author$project$Tools$Nudge$ZeroNudgeFactors = {$: 'ZeroNudgeFactors'};
var $author$project$Tools$Nudge$zeroButton = function (wrap) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		$author$project$ViewPureStyles$neatToolsBorder,
		{
			label: $mdgriffith$elm_ui$Element$text('Zero sliders'),
			onPress: $elm$core$Maybe$Just(
				wrap($author$project$Tools$Nudge$ZeroNudgeFactors))
		});
};
var $author$project$Tools$Nudge$view = F4(
	function (imperial, options, msgWrapper, track) {
		if (track.$ === 'Nothing') {
			return $author$project$ViewPureStyles$noTrackMessage;
		} else {
			var isTrack = track.a;
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				_List_fromArray(
					[
						A3($author$project$Tools$Nudge$verticalNudgeSlider, imperial, options.vertical, msgWrapper),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$padding(5),
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								A3($author$project$Tools$Nudge$horizontalNudgeSlider, imperial, options.horizontal, msgWrapper),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$padding(5),
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2($author$project$Tools$Nudge$nudgeButton, options, msgWrapper),
										$author$project$Tools$Nudge$zeroButton(msgWrapper)
									])),
								$mdgriffith$elm_ui$Element$text('Fade in/out'),
								A3($author$project$Tools$Nudge$fadeSlider, imperial, options.fadeExtent, msgWrapper)
							]))
					]));
		}
	});
var $author$project$Tools$OutAndBack$ApplyOutAndBack = {$: 'ApplyOutAndBack'};
var $author$project$Tools$OutAndBack$SetOffset = function (a) {
	return {$: 'SetOffset', a: a};
};
var $author$project$Tools$OutAndBack$offsetSlider = F3(
	function (imperial, options, wrap) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						'Offset: ' + A2(
							$author$project$UtilsForViews$showShortMeasure,
							imperial,
							$ianmackenzie$elm_units$Length$meters(options.offset)))),
				max: $ianmackenzie$elm_units$Length$inMeters(
					imperial ? $ianmackenzie$elm_units$Length$feet(16.0) : $ianmackenzie$elm_units$Length$meters(5.0)),
				min: $ianmackenzie$elm_units$Length$inMeters(
					imperial ? $ianmackenzie$elm_units$Length$feet(-16.0) : $ianmackenzie$elm_units$Length$meters(-5.0)),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$OutAndBack$SetOffset),
				step: $elm$core$Maybe$Just(0.5),
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: options.offset
			});
	});
var $author$project$Tools$OutAndBack$view = F4(
	function (imperial, wrapper, options, track) {
		var fixButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			{
				label: $mdgriffith$elm_ui$Element$text('Make out and back'),
				onPress: $elm$core$Maybe$Just(
					wrapper($author$project$Tools$OutAndBack$ApplyOutAndBack))
			});
		if (track.$ === 'Just') {
			var isTrack = track.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A3($author$project$Tools$OutAndBack$offsetSlider, imperial, options, wrapper)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						fixButton)
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage;
		}
	});
var $author$project$Tools$Pointers$DropMarker = {$: 'DropMarker'};
var $author$project$Tools$Pointers$LiftMarker = {$: 'LiftMarker'};
var $author$project$Tools$Pointers$MarkerBackwardOne = {$: 'MarkerBackwardOne'};
var $author$project$Tools$Pointers$MarkerForwardOne = {$: 'MarkerForwardOne'};
var $author$project$Tools$Pointers$PointerBackwardOne = {$: 'PointerBackwardOne'};
var $author$project$Tools$Pointers$PointerFastForward = {$: 'PointerFastForward'};
var $author$project$Tools$Pointers$PointerForwardOne = {$: 'PointerForwardOne'};
var $author$project$Tools$Pointers$PointerRewind = {$: 'PointerRewind'};
var $feathericons$elm_feather$FeatherIcons$chevronsLeft = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevrons-left',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('11 17 6 12 11 7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('18 17 13 12 18 7')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$chevronsRight = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevrons-right',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('13 17 18 12 13 7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('6 17 11 12 6 7')
				]),
			_List_Nil)
		]));
var $author$project$UtilsForViews$showLongMeasure = F2(
	function (imperial, distance) {
		return imperial ? ($author$project$UtilsForViews$showDecimal2(
			$ianmackenzie$elm_units$Length$inMiles(distance)) + ' miles') : ($author$project$UtilsForViews$showDecimal2(
			$ianmackenzie$elm_units$Length$inMeters(distance)) + 'm');
	});
var $author$project$Tools$Pointers$positionDescription = F3(
	function (imperial, pos, track) {
		return 'Point ' + ($elm$core$String$fromInt(pos) + (', at ' + A2(
			$author$project$UtilsForViews$showLongMeasure,
			imperial,
			A2($author$project$DomainModel$distanceFromIndex, pos, track))));
	});
var $smucode$elm_flat_colors$FlatColors$AussiePalette$quinceJelly = A3($mdgriffith$elm_ui$Element$rgb255, 240, 147, 43);
var $author$project$Tools$Pointers$view = F4(
	function (imperial, msgWrapper, options, isTrack) {
		var purpleStyle = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple),
				$mdgriffith$elm_ui$Element$Border$rounded(4),
				$mdgriffith$elm_ui$Element$Border$width(4),
				$mdgriffith$elm_ui$Element$padding(6),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$centerX
			]);
		var orangeStyle = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$quinceJelly),
				$mdgriffith$elm_ui$Element$Border$rounded(4),
				$mdgriffith$elm_ui$Element$Border$width(4),
				$mdgriffith$elm_ui$Element$padding(6),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$centerX
			]);
		if (isTrack.$ === 'Nothing') {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(140))
					]),
				$mdgriffith$elm_ui$Element$none);
		} else {
			var track = isTrack.a;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$padding(4),
							$mdgriffith$elm_ui$Element$spacing(6),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								A3($author$project$Tools$Pointers$positionDescription, imperial, options.orange, track.trackTree))),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$spacing(10),
									$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$AussiePalette$quinceJelly)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									orangeStyle,
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronsLeft),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Pointers$PointerRewind))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									orangeStyle,
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronLeft),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Pointers$PointerBackwardOne))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									orangeStyle,
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronRight),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Pointers$PointerForwardOne))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									orangeStyle,
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronsRight),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Pointers$PointerFastForward))
									})
								])),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							function () {
								var _v1 = options.purple;
								if (_v1.$ === 'Just') {
									var something = _v1.a;
									return A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple),
												$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(34)),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY
											]),
										A2(
											$mdgriffith$elm_ui$Element$Input$button,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple),
													$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze),
													$mdgriffith$elm_ui$Element$Border$rounded(4),
													$mdgriffith$elm_ui$Element$Border$width(2),
													$mdgriffith$elm_ui$Element$padding(8),
													$mdgriffith$elm_ui$Element$centerY,
													$mdgriffith$elm_ui$Element$centerX
												]),
											{
												label: $mdgriffith$elm_ui$Element$text('Lift purple marker'),
												onPress: $elm$core$Maybe$Just(
													msgWrapper($author$project$Tools$Pointers$LiftMarker))
											}));
								} else {
									return A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(34)),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY
											]),
										A2(
											$mdgriffith$elm_ui$Element$Input$button,
											purpleStyle,
											{
												label: $mdgriffith$elm_ui$Element$text('Drop purple marker'),
												onPress: $elm$core$Maybe$Just(
													msgWrapper($author$project$Tools$Pointers$DropMarker))
											}));
								}
							}()),
							function () {
							var _v2 = options.purple;
							if (_v2.$ === 'Just') {
								var something = _v2.a;
								return A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$spacing(10),
											$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$Input$button,
											purpleStyle,
											{
												label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronLeft),
												onPress: $elm$core$Maybe$Just(
													msgWrapper($author$project$Tools$Pointers$MarkerBackwardOne))
											}),
											A2(
											$mdgriffith$elm_ui$Element$Input$button,
											purpleStyle,
											{
												label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronRight),
												onPress: $elm$core$Maybe$Just(
													msgWrapper($author$project$Tools$Pointers$MarkerForwardOne))
											})
										]));
							} else {
								return A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$spacing(10),
											$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$Input$button,
											purpleStyle,
											{
												label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronLeft),
												onPress: $elm$core$Maybe$Nothing
											}),
											A2(
											$mdgriffith$elm_ui$Element$Input$button,
											purpleStyle,
											{
												label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronRight),
												onPress: $elm$core$Maybe$Nothing
											})
										]));
							}
						}(),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							function () {
								var _v3 = options.purple;
								if (_v3.$ === 'Just') {
									var something = _v3.a;
									return $mdgriffith$elm_ui$Element$text(
										A3($author$project$Tools$Pointers$positionDescription, imperial, something, track.trackTree));
								} else {
									return $mdgriffith$elm_ui$Element$text('---');
								}
							}())
						])));
		}
	});
var $author$project$Tools$Simplify$Apply = {$: 'Apply'};
var $author$project$Tools$Simplify$Seek = {$: 'Seek'};
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $author$project$Tools$Simplify$view = F3(
	function (msgWrapper, options, isTrack) {
		if (isTrack.$ === 'Just') {
			var track = isTrack.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$ViewPureStyles$neatToolsBorder,
							function () {
								var _v1 = $elm$core$Dict$size(options.pointsToRemove);
								if (!_v1) {
									return {
										label: $mdgriffith$elm_ui$Element$text('Search'),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Simplify$Seek))
									};
								} else {
									var quantity = _v1;
									return {
										label: A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_List_Nil,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Remove '),
													$mdgriffith$elm_ui$Element$text(
													$elm$core$String$fromInt(quantity)),
													$mdgriffith$elm_ui$Element$text(' points')
												])),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Simplify$Apply))
									};
								}
							}()))
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage;
		}
	});
var $author$project$Tools$TrackInfoBox$ChooseDisplayMode = function (a) {
	return {$: 'ChooseDisplayMode', a: a};
};
var $author$project$Tools$TrackInfoBox$InfoForPoint = {$: 'InfoForPoint'};
var $author$project$Tools$TrackInfoBox$InfoForSystem = {$: 'InfoForSystem'};
var $author$project$Tools$TrackInfoBox$displayInfoForPoint = F2(
	function (imperial, track) {
		var labels = _List_fromArray(
			['Number', 'Distance', 'Longitude', 'Latitude', 'Altitude', 'Bearing', 'Gradient']);
		var index = track.currentPosition;
		var leaf = $author$project$DomainModel$asRecord(
			A2($author$project$DomainModel$leafFromIndex, index, track.trackTree));
		var distance = A2($author$project$DomainModel$distanceFromIndex, index, track.trackTree);
		var bearing = -$ianmackenzie$elm_units$Angle$inDegrees(
			A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, $ianmackenzie$elm_geometry$Direction2d$positiveY, leaf.directionAtStart));
		var _v0 = leaf.sourceData.a;
		var longitude = _v0.longitude;
		var latitude = _v0.latitude;
		var altitude = _v0.altitude;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2($elm$core$List$map, $mdgriffith$elm_ui$Element$text, labels)),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							$elm$core$String$fromInt(index)),
							$mdgriffith$elm_ui$Element$text(
							A2($author$project$UtilsForViews$showLongMeasure, imperial, distance)),
							$mdgriffith$elm_ui$Element$text(
							$author$project$UtilsForViews$showDecimal2(
								$ianmackenzie$elm_units$Angle$inDegrees(
									$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude)))),
							$mdgriffith$elm_ui$Element$text(
							$author$project$UtilsForViews$showDecimal2(
								$ianmackenzie$elm_units$Angle$inDegrees(latitude))),
							$mdgriffith$elm_ui$Element$text(
							A2($author$project$UtilsForViews$showShortMeasure, imperial, altitude)),
							$mdgriffith$elm_ui$Element$text(
							$author$project$UtilsForViews$showDecimal2(bearing)),
							$mdgriffith$elm_ui$Element$text(
							$author$project$UtilsForViews$showDecimal2(leaf.gradientAtStart))
						]))
				]));
	});
var $author$project$Tools$TrackInfoBox$displayMemoryDetails = function (options) {
	var labels = _List_fromArray(
		['Heap limit', 'Heap size', 'Used heap']);
	var asMB = function (value) {
		return $author$project$UtilsForViews$showDecimal2((value / 1024) / 1024) + 'MB';
	};
	var _v0 = options.memoryInfo;
	if (_v0.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Element$text('Not available');
	} else {
		var memory = _v0.a;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2($elm$core$List$map, $mdgriffith$elm_ui$Element$text, labels)),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							asMB(memory.jsHeapSizeLimit)),
							$mdgriffith$elm_ui$Element$text(
							asMB(memory.totalJSHeapSize)),
							$mdgriffith$elm_ui$Element$text(
							asMB(memory.usedJSHeapSize))
						]))
				]));
	}
};
var $author$project$Tools$TrackInfoBox$displayValuesWithTrack = F3(
	function (imperial, infoList, track) {
		var info = $author$project$DomainModel$asRecord(track.trackTree);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						function (_v0) {
							var txt = _v0.a;
							return txt;
						},
						infoList)),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						function (_v1) {
							var fn = _v1.b;
							return A2(fn, imperial, info);
						},
						infoList))
				]));
	});
var $author$project$Tools$TrackInfoBox$trackInfoList = _List_fromArray(
	[
		_Utils_Tuple2(
		$mdgriffith$elm_ui$Element$text('Points'),
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					$elm$core$String$fromInt(1 + info.skipCount));
			})),
		_Utils_Tuple2(
		$mdgriffith$elm_ui$Element$text('Length'),
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					A2($author$project$UtilsForViews$showLongMeasure, imperial, info.trueLength));
			})),
		_Utils_Tuple2(
		$mdgriffith$elm_ui$Element$text('Ascent'),
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					A2($author$project$UtilsForViews$showLongMeasure, imperial, info.altitudeGained));
			})),
		_Utils_Tuple2(
		$mdgriffith$elm_ui$Element$text('Descent'),
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					A2($author$project$UtilsForViews$showLongMeasure, imperial, info.altitudeLost));
			})),
		_Utils_Tuple2(
		$mdgriffith$elm_ui$Element$text('Climbing'),
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					A2($author$project$UtilsForViews$showLongMeasure, imperial, info.distanceClimbing));
			})),
		_Utils_Tuple2(
		$mdgriffith$elm_ui$Element$text('Descending'),
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					A2($author$project$UtilsForViews$showLongMeasure, imperial, info.distanceDescending));
			})),
		_Utils_Tuple2(
		$mdgriffith$elm_ui$Element$text('Steepest'),
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					$author$project$UtilsForViews$showDecimal2(info.steepestClimb));
			}))
	]);
var $author$project$Tools$TrackInfoBox$view = F4(
	function (wrapper, imperial, ifTrack, options) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			function () {
				if (ifTrack.$ === 'Just') {
					var track = ifTrack.a;
					return A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(5)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$radioRow,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								{
									label: $mdgriffith$elm_ui$Element$Input$labelHidden('Oj'),
									onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$TrackInfoBox$ChooseDisplayMode),
									options: _List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$Input$option,
											$author$project$Tools$TrackInfoBox$InfoForTrack,
											$mdgriffith$elm_ui$Element$text('Track')),
											A2(
											$mdgriffith$elm_ui$Element$Input$option,
											$author$project$Tools$TrackInfoBox$InfoForPoint,
											$mdgriffith$elm_ui$Element$text('Point')),
											A2(
											$mdgriffith$elm_ui$Element$Input$option,
											$author$project$Tools$TrackInfoBox$InfoForSystem,
											$mdgriffith$elm_ui$Element$text('Memory'))
										]),
									selected: $elm$core$Maybe$Just(options.displayMode)
								}),
								function () {
								var _v1 = options.displayMode;
								switch (_v1.$) {
									case 'InfoForTrack':
										return A3($author$project$Tools$TrackInfoBox$displayValuesWithTrack, imperial, $author$project$Tools$TrackInfoBox$trackInfoList, track);
									case 'InfoForPoint':
										return A2($author$project$Tools$TrackInfoBox$displayInfoForPoint, imperial, track);
									default:
										return $author$project$Tools$TrackInfoBox$displayMemoryDetails(options);
								}
							}()
							]));
				} else {
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(10)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Information will show here when a track is loaded.')
							]));
				}
			}());
	});
var $author$project$Tools$UndoRedo$Redo = {$: 'Redo'};
var $author$project$Tools$UndoRedo$Undo = {$: 'Undo'};
var $author$project$Actions$interpretAction = function (action) {
	switch (action.$) {
		case 'DeletePointsBetween':
			var fromStart = action.a;
			var fromEnd = action.b;
			return 'deletion of points';
		case 'DeleteSinglePoint':
			var fromStart = action.a;
			var fromEnd = action.b;
			return 'delete single point';
		case 'BezierApplyWithOptions':
			var options = action.a;
			return 'Bezier spline';
		case 'CentroidAverageApplyWithOptions':
			var options = action.a;
			return 'centroid average';
		case 'CurveFormerApplyWithOptions':
			var options = action.a;
			return 'curve former';
		case 'BendSmootherApplyWithOptions':
			var options = action.a;
			return 'bend smoother';
		case 'PointMovedOnMap':
			return 'move on map';
		case 'NudgeApplyWithOptions':
			var options = action.a;
			return 'nudge';
		case 'OutAndBackApplyWithOptions':
			var options = action.a;
			return 'out and back';
		case 'ApplySimplify':
			return 'simplify';
		case 'ApplyInterpolateWithOptions':
			var options = action.a;
			return 'interpolate';
		case 'OneClickQuickFix':
			return 'one-click quick0fix';
		case 'LimitGradientWithOptions':
			var options = action.a;
			return 'limit gradients';
		default:
			return 'ask Pete to fix this message';
	}
};
var $author$project$Tools$UndoRedo$viewWithTrack = F3(
	function (msgWrapper, options, track) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$padding(4),
							$mdgriffith$elm_ui$Element$spacing(4),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(50))
						]),
					function () {
						var _v0 = track.undos;
						if (!_v0.b) {
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, $author$project$ViewPureStyles$neatToolsBorder),
								{
									label: $mdgriffith$elm_ui$Element$text('Nothing to Undo'),
									onPress: $elm$core$Maybe$Nothing
								});
						} else {
							var undo = _v0.a;
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, $author$project$ViewPureStyles$neatToolsBorder),
								{
									label: $mdgriffith$elm_ui$Element$text(
										'Undo ' + $author$project$Actions$interpretAction(undo.action)),
									onPress: $elm$core$Maybe$Just(
										msgWrapper($author$project$Tools$UndoRedo$Undo))
								});
						}
					}()),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$padding(4),
							$mdgriffith$elm_ui$Element$spacing(4),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(50))
						]),
					function () {
						var _v1 = track.redos;
						if (!_v1.b) {
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, $author$project$ViewPureStyles$neatToolsBorder),
								{
									label: $mdgriffith$elm_ui$Element$text('Nothing to Redo'),
									onPress: $elm$core$Maybe$Nothing
								});
						} else {
							var redo = _v1.a;
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, $author$project$ViewPureStyles$neatToolsBorder),
								{
									label: $mdgriffith$elm_ui$Element$text(
										'Redo ' + $author$project$Actions$interpretAction(redo.action)),
									onPress: $elm$core$Maybe$Just(
										msgWrapper($author$project$Tools$UndoRedo$Redo))
								});
						}
					}())
				]));
	});
var $author$project$Tools$UndoRedo$view = F3(
	function (msgWrapper, options, mTrack) {
		if (mTrack.$ === 'Just') {
			var track = mTrack.a;
			return A3($author$project$Tools$UndoRedo$viewWithTrack, msgWrapper, options, track);
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$padding(4),
								$mdgriffith$elm_ui$Element$spacing(4),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(50))
							]),
						$mdgriffith$elm_ui$Element$none),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$padding(4),
								$mdgriffith$elm_ui$Element$spacing(4),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(50))
							]),
						$mdgriffith$elm_ui$Element$none)
					]));
		}
	});
var $author$project$ToolsController$viewToolByType = F4(
	function (msgWrapper, entry, isTrack, options) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$padding(2),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Border$rounded(4)
				]),
			function () {
				var _v0 = entry.toolType;
				switch (_v0.$) {
					case 'ToolTrackInfo':
						return A4(
							$author$project$Tools$TrackInfoBox$view,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolInfoMsg),
							options.imperial,
							isTrack,
							options.infoOptions);
					case 'ToolAbruptDirectionChanges':
						return A4(
							$author$project$Tools$DirectionChanges$view,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$DirectionChanges),
							options.directionChangeOptions,
							isTrack);
					case 'ToolGradientProblems':
						return A3(
							$author$project$Tools$GradientProblems$view,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolGradientChangeMsg),
							options.gradientProblemOptions,
							isTrack);
					case 'ToolDeletePoints':
						return A2(
							$author$project$Tools$DeletePoints$view,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$DeletePoints),
							options.deleteOptions);
					case 'ToolPointers':
						return A4(
							$author$project$Tools$Pointers$view,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$PointerMsg),
							options.pointerOptions,
							isTrack);
					case 'ToolUndoRedo':
						return A3(
							$author$project$Tools$UndoRedo$view,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$UndoRedoMsg),
							options.undoRedoOptions,
							isTrack);
					case 'ToolBezierSplines':
						return A2(
							$author$project$Tools$BezierSplines$view,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolBezierMsg),
							options.bezierSplineOptions);
					case 'ToolCentroidAverage':
						return A2(
							$author$project$Tools$CentroidAverage$view,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolCentroidMsg),
							options.centroidAverageOptions);
					case 'ToolCurveFormer':
						return A4(
							$author$project$Tools$CurveFormer$view,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolCurveFormerMsg),
							options.curveFormerOptions,
							isTrack);
					case 'ToolBendSmoother':
						return A4(
							$author$project$Tools$BendSmoother$view,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolBendSmootherMsg),
							options.bendSmootherOptions,
							isTrack);
					case 'ToolNudge':
						return A4(
							$author$project$Tools$Nudge$view,
							options.imperial,
							options.nudgeOptions,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolNudgeMsg),
							isTrack);
					case 'ToolDisplaySettings':
						return A2(
							$author$project$Tools$DisplaySettings$view,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolDisplaySettingMsg),
							options.displaySettings);
					case 'ToolOutAndBack':
						return A4(
							$author$project$Tools$OutAndBack$view,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolOutAndBackMsg),
							options.outAndBackSettings,
							isTrack);
					case 'ToolSimplify':
						return A3(
							$author$project$Tools$Simplify$view,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolSimplifyMsg),
							options.simplifySettings,
							isTrack);
					case 'ToolInterpolate':
						return A4(
							$author$project$Tools$Interpolate$view,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolInterpolateMsg),
							options.interpolateSettings,
							isTrack);
					default:
						return A2(
							$author$project$Tools$LimitGradients$view,
							options.limitGradientSettings,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolLimitGradientMsg));
				}
			}());
	});
var $author$project$ToolsController$viewTool = F4(
	function (msgWrapper, isTrack, options, toolEntry) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'vertical-align', 'top')),
					$mdgriffith$elm_ui$Element$spacing(0),
					$mdgriffith$elm_ui$Element$Border$width(4),
					$mdgriffith$elm_ui$Element$Border$color(toolEntry.tabColour),
					$mdgriffith$elm_ui$Element$Border$rounded(8),
					$mdgriffith$elm_ui$Element$Background$color(toolEntry.tabColour),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignRight,
								$mdgriffith$elm_ui$Element$moveDown(26),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A3(
									$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
									'click',
									$author$project$ViewThirdPerson$stopProp,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Basics$always($author$project$ToolsController$ToolNoOp),
										msgWrapper))),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A3(
									$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
									'dblclick',
									$author$project$ViewThirdPerson$stopProp,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Basics$always($author$project$ToolsController$ToolNoOp),
										msgWrapper))),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A3(
									$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
									'mousedown',
									$author$project$ViewThirdPerson$stopProp,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Basics$always($author$project$ToolsController$ToolNoOp),
										msgWrapper))),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A3(
									$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
									'mouseup',
									$author$project$ViewThirdPerson$stopProp,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Basics$always($author$project$ToolsController$ToolNoOp),
										msgWrapper))),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'z-index', '20'))
							]),
						_List_fromArray(
							[
								A2($author$project$ToolsController$showDockOptions, msgWrapper, toolEntry),
								A2($author$project$ToolsController$showColourOptions, msgWrapper, toolEntry)
							])))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(8),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(24)),
							$mdgriffith$elm_ui$Element$Background$color(toolEntry.tabColour),
							$mdgriffith$elm_ui$Element$Font$color(toolEntry.textColour)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							{
								label: $mdgriffith$elm_ui$Element$text(toolEntry.label),
								onPress: $elm$core$Maybe$Just(
									msgWrapper(
										A2(
											$author$project$ToolsController$ToolStateToggle,
											toolEntry.toolType,
											$author$project$ToolsController$nextToolState(toolEntry.state))))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							{
								label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$settings),
								onPress: $elm$core$Maybe$Just(
									msgWrapper(
										$author$project$ToolsController$ToolPopupToggle(toolEntry.toolType)))
							})
						])),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$rounded(8),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					_Utils_eq(toolEntry.state, $author$project$ToolsController$Expanded) ? A4($author$project$ToolsController$viewToolByType, msgWrapper, toolEntry, isTrack, options) : $mdgriffith$elm_ui$Element$none)
				]));
	});
var $author$project$ToolsController$toolsForDock = F4(
	function (dock, msgWrapper, isTrack, options) {
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(4)
				]),
			A2(
				$elm$core$List$map,
				A3($author$project$ToolsController$viewTool, msgWrapper, isTrack, options),
				A2(
					$elm$core$List$filter,
					function (t) {
						return _Utils_eq(t.dock, dock);
					},
					options.tools)));
	});
var $author$project$Main$bottomDockView = function (model) {
	return A3(
		$mdgriffith$elm_ui$Element$layoutWith,
		{
			options: _List_fromArray(
				[$mdgriffith$elm_ui$Element$noStaticStyleSheet])
		},
		$author$project$ViewPureStyles$commonLayoutStyles,
		A4($author$project$ToolsController$toolsForDock, $author$project$ToolsController$DockBottom, $author$project$Main$ToolsMsg, model.track, model.toolOptions));
};
var $author$project$SplitPane$SplitPane$firstChildViewStyle = function (_v0) {
	var state = _v0.a;
	var _v1 = state.splitterPosition;
	if (_v1.$ === 'Px') {
		var p = _v1.a;
		var v = $elm$core$String$fromFloat(
			$author$project$SplitPane$Bound$getValue(p)) + 'px';
		var _v2 = state.orientation;
		if (_v2.$ === 'Horizontal') {
			return _List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'width', v),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
					A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box'),
					A2($elm$html$Html$Attributes$style, 'position', 'relative')
				]);
		} else {
			return _List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', v),
					A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
					A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box'),
					A2($elm$html$Html$Attributes$style, 'position', 'relative')
				]);
		}
	} else {
		var p = _v1.a;
		var v = $elm$core$String$fromFloat(
			$author$project$SplitPane$Bound$getValue(p));
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex', v),
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%'),
				A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
				A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box'),
				A2($elm$html$Html$Attributes$style, 'position', 'relative')
			]);
	}
};
var $author$project$SplitPane$SplitPane$CustomSplitter = function (a) {
	return {$: 'CustomSplitter', a: a};
};
var $author$project$SplitPane$SplitPane$SplitterClick = function (a) {
	return {$: 'SplitterClick', a: a};
};
var $author$project$SplitPane$SplitPane$DOMInfo = F6(
	function (x, y, touchX, touchY, parentWidth, parentHeight) {
		return {parentHeight: parentHeight, parentWidth: parentWidth, touchX: touchX, touchY: touchY, x: x, y: y};
	});
var $author$project$SplitPane$SplitPane$domInfo = A7(
	$elm$json$Json$Decode$map6,
	$author$project$SplitPane$SplitPane$DOMInfo,
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'clientX', $elm$json$Json$Decode$int)),
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'clientY', $elm$json$Json$Decode$int)),
	$elm$json$Json$Decode$maybe(
		A2(
			$elm$json$Json$Decode$at,
			_List_fromArray(
				['touches', '0', 'clientX']),
			$elm$json$Json$Decode$int)),
	$elm$json$Json$Decode$maybe(
		A2(
			$elm$json$Json$Decode$at,
			_List_fromArray(
				['touches', '0', 'clientY']),
			$elm$json$Json$Decode$int)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['currentTarget', 'parentElement', 'clientWidth']),
		$elm$json$Json$Decode$int),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['currentTarget', 'parentElement', 'clientHeight']),
		$elm$json$Json$Decode$int));
var $author$project$SplitPane$SplitPane$onMouseDown = function (toMsg) {
	return A2(
		$elm$html$Html$Events$custom,
		'mousedown',
		A2(
			$elm$json$Json$Decode$map,
			function (d) {
				return {
					message: toMsg(
						$author$project$SplitPane$SplitPane$SplitterClick(d)),
					preventDefault: true,
					stopPropagation: false
				};
			},
			$author$project$SplitPane$SplitPane$domInfo));
};
var $author$project$SplitPane$SplitPane$domInfoToPosition = function (_v0) {
	var x = _v0.x;
	var y = _v0.y;
	var touchX = _v0.touchX;
	var touchY = _v0.touchY;
	var _v1 = _Utils_Tuple2(
		_Utils_Tuple2(x, y),
		_Utils_Tuple2(touchX, touchY));
	if ((_v1.b.a.$ === 'Just') && (_v1.b.b.$ === 'Just')) {
		var _v2 = _v1.b;
		var posX = _v2.a.a;
		var posY = _v2.b.a;
		return {x: posX, y: posY};
	} else {
		if ((_v1.a.a.$ === 'Just') && (_v1.a.b.$ === 'Just')) {
			var _v3 = _v1.a;
			var posX = _v3.a.a;
			var posY = _v3.b.a;
			return {x: posX, y: posY};
		} else {
			return {x: 0, y: 0};
		}
	}
};
var $author$project$SplitPane$SplitPane$onTouchCancel = function (toMsg) {
	return A2(
		$elm$html$Html$Events$custom,
		'touchcancel',
		A2(
			$elm$json$Json$Decode$map,
			function (d) {
				return {
					message: toMsg(
						$author$project$SplitPane$SplitPane$SplitterLeftAlone(
							$author$project$SplitPane$SplitPane$domInfoToPosition(d))),
					preventDefault: true,
					stopPropagation: true
				};
			},
			$author$project$SplitPane$SplitPane$domInfo));
};
var $author$project$SplitPane$SplitPane$onTouchEnd = function (toMsg) {
	return A2(
		$elm$html$Html$Events$custom,
		'touchend',
		A2(
			$elm$json$Json$Decode$map,
			function (d) {
				return {
					message: toMsg(
						$author$project$SplitPane$SplitPane$SplitterLeftAlone(
							$author$project$SplitPane$SplitPane$domInfoToPosition(d))),
					preventDefault: true,
					stopPropagation: true
				};
			},
			$author$project$SplitPane$SplitPane$domInfo));
};
var $author$project$SplitPane$SplitPane$onTouchMove = function (toMsg) {
	return A2(
		$elm$html$Html$Events$custom,
		'touchmove',
		A2(
			$elm$json$Json$Decode$map,
			function (d) {
				return {
					message: toMsg(
						$author$project$SplitPane$SplitPane$SplitterMove(
							$author$project$SplitPane$SplitPane$domInfoToPosition(d))),
					preventDefault: true,
					stopPropagation: true
				};
			},
			$author$project$SplitPane$SplitPane$domInfo));
};
var $author$project$SplitPane$SplitPane$onTouchStart = function (toMsg) {
	return A2(
		$elm$html$Html$Events$custom,
		'touchstart',
		A2(
			$elm$json$Json$Decode$map,
			function (d) {
				return {
					message: toMsg(
						$author$project$SplitPane$SplitPane$SplitterClick(d)),
					preventDefault: true,
					stopPropagation: true
				};
			},
			$author$project$SplitPane$SplitPane$domInfo));
};
var $elm$html$Html$span = _VirtualDom_node('span');
var $author$project$SplitPane$SplitPane$createCustomSplitter = F2(
	function (toMsg, details) {
		return $author$project$SplitPane$SplitPane$CustomSplitter(
			A2(
				$elm$html$Html$span,
				A2(
					$elm$core$List$cons,
					$author$project$SplitPane$SplitPane$onMouseDown(toMsg),
					A2(
						$elm$core$List$cons,
						$author$project$SplitPane$SplitPane$onTouchStart(toMsg),
						A2(
							$elm$core$List$cons,
							$author$project$SplitPane$SplitPane$onTouchEnd(toMsg),
							A2(
								$elm$core$List$cons,
								$author$project$SplitPane$SplitPane$onTouchMove(toMsg),
								A2(
									$elm$core$List$cons,
									$author$project$SplitPane$SplitPane$onTouchCancel(toMsg),
									details.attributes))))),
				details.children));
	});
var $author$project$SplitPane$SplitPane$baseDefaultSplitterStyles = _List_fromArray(
	[
		A2($elm$html$Html$Attributes$style, 'width', '100%'),
		A2($elm$html$Html$Attributes$style, 'background', '#000'),
		A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box'),
		A2($elm$html$Html$Attributes$style, 'opacity', '.2'),
		A2($elm$html$Html$Attributes$style, 'zIndex', '1'),
		A2($elm$html$Html$Attributes$style, 'webkitUserSelect', 'none'),
		A2($elm$html$Html$Attributes$style, 'mozUserSelect', 'none'),
		A2($elm$html$Html$Attributes$style, 'userSelect', 'none'),
		A2($elm$html$Html$Attributes$style, 'backgroundClip', 'padding-box')
	]);
var $author$project$SplitPane$SplitPane$defaultHorizontalSplitterStyle = function (dragState) {
	return _Utils_ap(
		$author$project$SplitPane$SplitPane$baseDefaultSplitterStyles,
		_Utils_ap(
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'width', '11px'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'margin', '0 -5px'),
					A2($elm$html$Html$Attributes$style, 'borderLeft', '5px solid rgba(255, 255, 255, 0)'),
					A2($elm$html$Html$Attributes$style, 'borderRight', '5px solid rgba(255, 255, 255, 0)')
				]),
			function () {
				if (dragState.$ === 'Draggable') {
					return _List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'cursor', 'col-resize')
						]);
				} else {
					return _List_Nil;
				}
			}()));
};
var $author$project$SplitPane$SplitPane$defaultVerticalSplitterStyle = function (dragState) {
	return _Utils_ap(
		$author$project$SplitPane$SplitPane$baseDefaultSplitterStyles,
		_Utils_ap(
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'height', '11px'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'margin', '-5px 0'),
					A2($elm$html$Html$Attributes$style, 'borderTop', '5px solid rgba(255, 255, 255, 0)'),
					A2($elm$html$Html$Attributes$style, 'borderBottom', '5px solid rgba(255, 255, 255, 0)')
				]),
			function () {
				if (dragState.$ === 'Draggable') {
					return _List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'cursor', 'row-resize')
						]);
				} else {
					return _List_Nil;
				}
			}()));
};
var $author$project$SplitPane$SplitPane$createDefaultSplitterDetails = F2(
	function (ori, dragState) {
		if (ori.$ === 'Horizontal') {
			return {
				attributes: $author$project$SplitPane$SplitPane$defaultHorizontalSplitterStyle(dragState),
				children: _List_Nil
			};
		} else {
			return {
				attributes: $author$project$SplitPane$SplitPane$defaultVerticalSplitterStyle(dragState),
				children: _List_Nil
			};
		}
	});
var $author$project$SplitPane$SplitPane$getConcreteSplitter = F3(
	function (viewConfig, ori, dragState) {
		var _v0 = viewConfig.splitter;
		if (_v0.$ === 'Just') {
			var splitter = _v0.a.a;
			return splitter;
		} else {
			var _v1 = A2(
				$author$project$SplitPane$SplitPane$createCustomSplitter,
				viewConfig.toMsg,
				A2($author$project$SplitPane$SplitPane$createDefaultSplitterDetails, ori, dragState));
			var defaultSplitter = _v1.a;
			return defaultSplitter;
		}
	});
var $author$project$SplitPane$SplitPane$paneContainerStyle = function (ori) {
	return _List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
			A2($elm$html$Html$Attributes$style, 'display', 'flex'),
			A2(
			$elm$html$Html$Attributes$style,
			'flexDirection',
			function () {
				if (ori.$ === 'Horizontal') {
					return 'row';
				} else {
					return 'column';
				}
			}()),
			A2($elm$html$Html$Attributes$style, 'justifyContent', 'center'),
			A2($elm$html$Html$Attributes$style, 'alignItems', 'center'),
			A2($elm$html$Html$Attributes$style, 'width', '100%'),
			A2($elm$html$Html$Attributes$style, 'height', '100%'),
			A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box')
		]);
};
var $author$project$SplitPane$SplitPane$secondChildViewStyle = function (_v0) {
	var state = _v0.a;
	var _v1 = state.splitterPosition;
	if (_v1.$ === 'Px') {
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex', '1'),
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%'),
				A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
				A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box'),
				A2($elm$html$Html$Attributes$style, 'position', 'relative')
			]);
	} else {
		var p = _v1.a;
		var v = $elm$core$String$fromFloat(
			1 - $author$project$SplitPane$Bound$getValue(p));
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex', v),
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%'),
				A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
				A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box'),
				A2($elm$html$Html$Attributes$style, 'position', 'relative')
			]);
	}
};
var $author$project$SplitPane$SplitPane$view = F4(
	function (_v0, firstView, secondView, _v1) {
		var viewConfig = _v0.a;
		var state = _v1.a;
		var splitter = A3($author$project$SplitPane$SplitPane$getConcreteSplitter, viewConfig, state.orientation, state.dragState);
		return A2(
			$elm$html$Html$div,
			A2(
				$elm$core$List$cons,
				$elm$html$Html$Attributes$class('pane-container'),
				$author$project$SplitPane$SplitPane$paneContainerStyle(state.orientation)),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$Attributes$class('pane-first-view'),
						$author$project$SplitPane$SplitPane$firstChildViewStyle(
							$author$project$SplitPane$SplitPane$State(state))),
					_List_fromArray(
						[firstView])),
					splitter,
					A2(
					$elm$html$Html$div,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$Attributes$class('pane-second-view'),
						$author$project$SplitPane$SplitPane$secondChildViewStyle(
							$author$project$SplitPane$SplitPane$State(state))),
					_List_fromArray(
						[secondView]))
				]));
	});
var $author$project$PaneLayoutManager$SetCurrentPosition = function (a) {
	return {$: 'SetCurrentPosition', a: a};
};
var $author$project$ViewPureStyles$conditionallyVisible = F2(
	function (test, element) {
		return test ? A2($mdgriffith$elm_ui$Element$el, _List_Nil, element) : A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'display', 'none'))
				]),
			element);
	});
var $author$project$ViewMap$ToggleDraggable = {$: 'ToggleDraggable'};
var $author$project$ViewMap$ToggleFollowOrange = {$: 'ToggleFollowOrange'};
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$rx = _VirtualDom_attribute('rx');
var $elm$svg$Svg$Attributes$ry = _VirtualDom_attribute('ry');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $feathericons$elm_feather$FeatherIcons$lock = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'lock',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('3'),
					$elm$svg$Svg$Attributes$y('11'),
					$elm$svg$Svg$Attributes$width('18'),
					$elm$svg$Svg$Attributes$height('11'),
					$elm$svg$Svg$Attributes$rx('2'),
					$elm$svg$Svg$Attributes$ry('2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M7 11V7a5 5 0 0 1 10 0v4')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$move = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'move',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('5 9 2 12 5 15')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('9 5 12 2 15 5')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('15 19 12 22 9 19')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('19 9 22 12 19 15')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('2'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('22'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('2'),
					$elm$svg$Svg$Attributes$x2('12'),
					$elm$svg$Svg$Attributes$y2('22')
				]),
			_List_Nil)
		]));
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 'MoveX', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveLeft = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(-x));
};
var $feathericons$elm_feather$FeatherIcons$unlock = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'unlock',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('3'),
					$elm$svg$Svg$Attributes$y('11'),
					$elm$svg$Svg$Attributes$width('18'),
					$elm$svg$Svg$Attributes$height('11'),
					$elm$svg$Svg$Attributes$rx('2'),
					$elm$svg$Svg$Attributes$ry('2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M7 11V7a5 5 0 0 1 9.9-1')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$x = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'x',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('18'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('6'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('6'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('18'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil)
		]));
var $author$project$ViewMap$view = F3(
	function (_v0, mContext, msgWrapper) {
		var viewWidth = _v0.a;
		var viewHeight = _v0.b;
		var handyMapControls = function (context) {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$moveDown(100),
						$mdgriffith$elm_ui$Element$moveLeft(10),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
						$mdgriffith$elm_ui$Element$Font$size(40),
						$mdgriffith$elm_ui$Element$padding(6),
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_Nil,
						{
							label: context.followOrange ? $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$lock) : $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$unlock),
							onPress: $elm$core$Maybe$Just(
								msgWrapper($author$project$ViewMap$ToggleFollowOrange))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_Nil,
						{
							label: context.draggable ? $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$move) : $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$x),
							onPress: $elm$core$Maybe$Just(
								msgWrapper($author$project$ViewMap$ToggleDraggable))
						})
					]));
		};
		if (mContext.$ === 'Just') {
			var context = mContext.a;
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$inFront(
						handyMapControls(context))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(
									$ianmackenzie$elm_units$Pixels$inPixels(viewWidth))),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(
									$ianmackenzie$elm_units$Pixels$inPixels(viewHeight))),
								$mdgriffith$elm_ui$Element$alignLeft,
								$mdgriffith$elm_ui$Element$alignTop,
								$mdgriffith$elm_ui$Element$Border$width(2),
								$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$id('map'))
							]),
						$mdgriffith$elm_ui$Element$none)
					]));
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$id('map'))
							]),
						$mdgriffith$elm_ui$Element$none)
					]));
		}
	});
var $author$project$ViewPlan$ImageClick = function (a) {
	return {$: 'ImageClick', a: a};
};
var $author$project$ViewPlan$ImageDoubleClick = function (a) {
	return {$: 'ImageDoubleClick', a: a};
};
var $author$project$ViewPlan$ImageDrag = function (a) {
	return {$: 'ImageDrag', a: a};
};
var $author$project$ViewPlan$ImageGrab = function (a) {
	return {$: 'ImageGrab', a: a};
};
var $author$project$ViewPlan$ImageMouseWheel = function (a) {
	return {$: 'ImageMouseWheel', a: a};
};
var $author$project$ViewPlan$ImageNoOp = {$: 'ImageNoOp'};
var $author$project$ViewPlan$ImageRelease = function (a) {
	return {$: 'ImageRelease', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$BackgroundColor = function (a) {
	return {$: 'BackgroundColor', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$backgroundColor = function (color) {
	return $ianmackenzie$elm_3d_scene$Scene3d$BackgroundColor(color);
};
var $avh4$elm_color$Color$lightBlue = A4($avh4$elm_color$Color$RgbaSpace, 114 / 255, 159 / 255, 207 / 255, 1.0);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions = {preventDefault: true, stopPropagation: false};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'click', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $author$project$ViewPlan$onContextMenu = function (msg) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$custom,
			'contextmenu',
			$elm$json$Json$Decode$succeed(
				{message: msg, preventDefault: true, stopPropagation: true})));
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDoubleClick = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'dblclick', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDown = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'mousedown', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onMove = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'mousemove', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onUp = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'mouseup', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$defaultOptions = {preventDefault: true, stopPropagation: false};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$Event = F3(
	function (mouseEvent, deltaY, deltaMode) {
		return {deltaMode: deltaMode, deltaY: deltaY, mouseEvent: mouseEvent};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaLine = {$: 'DeltaLine'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaPage = {$: 'DeltaPage'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaPixel = {$: 'DeltaPixel'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$deltaModeDecoder = function () {
	var intToMode = function (_int) {
		switch (_int) {
			case 1:
				return $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaLine;
			case 2:
				return $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaPage;
			default:
				return $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaPixel;
		}
	};
	return A2($elm$json$Json$Decode$map, intToMode, $elm$json$Json$Decode$int);
}();
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$eventDecoder = A4(
	$elm$json$Json$Decode$map3,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$Event,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder,
	A2($elm$json$Json$Decode$field, 'deltaY', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'deltaMode', $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$deltaModeDecoder));
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWithOptions = F2(
	function (options, tag) {
		return A2(
			$elm$html$Html$Events$custom,
			'wheel',
			A2(
				$elm$json$Json$Decode$map,
				function (ev) {
					return {
						message: tag(ev),
						preventDefault: options.preventDefault,
						stopPropagation: options.stopPropagation
					};
				},
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$eventDecoder));
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWheel = $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWithOptions($mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$defaultOptions);
var $ianmackenzie$elm_3d_scene$Scene3d$Light$CastsShadows = function (a) {
	return {$: 'CastsShadows', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$castsShadows = function (flag) {
	return $ianmackenzie$elm_3d_scene$Scene3d$Light$CastsShadows(flag);
};
var $elm_explorations$webgl$WebGL$Internal$Alpha = function (a) {
	return {$: 'Alpha', a: a};
};
var $elm_explorations$webgl$WebGL$alpha = $elm_explorations$webgl$WebGL$Internal$Alpha;
var $elm_explorations$webgl$WebGL$Internal$Antialias = {$: 'Antialias'};
var $elm_explorations$webgl$WebGL$antialias = $elm_explorations$webgl$WebGL$Internal$Antialias;
var $elm_explorations$webgl$WebGL$Internal$ClearColor = F4(
	function (a, b, c, d) {
		return {$: 'ClearColor', a: a, b: b, c: c, d: d};
	});
var $elm_explorations$webgl$WebGL$clearColor = $elm_explorations$webgl$WebGL$Internal$ClearColor;
var $elm_explorations$webgl$WebGL$Internal$Depth = function (a) {
	return {$: 'Depth', a: a};
};
var $elm_explorations$webgl$WebGL$depth = $elm_explorations$webgl$WebGL$Internal$Depth;
var $elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $elm_explorations$webgl$WebGL$Internal$Stencil = function (a) {
	return {$: 'Stencil', a: a};
};
var $elm_explorations$webgl$WebGL$stencil = $elm_explorations$webgl$WebGL$Internal$Stencil;
var $avh4$elm_color$Color$toCssString = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	var roundTo = function (x) {
		return $elm$core$Basics$round(x * 1000) / 1000;
	};
	var pct = function (x) {
		return $elm$core$Basics$round(x * 10000) / 100;
	};
	return $elm$core$String$concat(
		_List_fromArray(
			[
				'rgba(',
				$elm$core$String$fromFloat(
				pct(r)),
				'%,',
				$elm$core$String$fromFloat(
				pct(g)),
				'%,',
				$elm$core$String$fromFloat(
				pct(b)),
				'%,',
				$elm$core$String$fromFloat(
				roundTo(a)),
				')'
			]));
};
var $elm_explorations$webgl$WebGL$toHtmlWith = F3(
	function (options, attributes, entities) {
		return A3(_WebGL_toHtml, options, attributes, entities);
	});
var $ianmackenzie$elm_units$Pixels$toInt = function (_v0) {
	var numPixels = _v0.a;
	return numPixels;
};
var $ianmackenzie$elm_3d_scene$Scene3d$allLightsEnabled = A4($elm_explorations$linear_algebra$Math$Vector4$vec4, 1, 1, 1, 1);
var $ianmackenzie$elm_3d_scene$Scene3d$call = F3(
	function (renderPasses, lights, settings) {
		return A2(
			$elm$core$List$map,
			function (renderPass) {
				return A2(renderPass, lights, settings);
			},
			renderPasses);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$CieXyz = F3(
	function (a, b, c) {
		return {$: 'CieXyz', a: a, b: b, c: c};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToCieXyz = F2(
	function (_v0, _v1) {
		var intensity = _v0.a;
		var x = _v1.a.x;
		var y = _v1.a.y;
		return A3($ianmackenzie$elm_3d_scene$Scene3d$Types$CieXyz, (intensity * x) / y, intensity, (intensity * ((1 - x) - y)) / y);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$cieXyzToLinearRgb = function (_v0) {
	var bigX = _v0.a;
	var bigY = _v0.b;
	var bigZ = _v0.c;
	return $ianmackenzie$elm_3d_scene$Scene3d$Types$LinearRgb(
		A3($elm_explorations$linear_algebra$Math$Vector3$vec3, ((3.2406 * bigX) - (1.5372 * bigY)) - (0.4986 * bigZ), (((-0.9689) * bigX) + (1.8758 * bigY)) + (0.0415 * bigZ), ((0.0557 * bigX) - (0.204 * bigY)) + (1.057 * bigZ)));
};
var $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToLinearRgb = F2(
	function (intensity, chromaticity) {
		return $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$cieXyzToLinearRgb(
			A2($ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToCieXyz, intensity, chromaticity));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Transformation$compose = F2(
	function (t1, t2) {
		return {
			isRightHanded: _Utils_eq(t1.isRightHanded, t2.isRightHanded),
			ix: ((t1.ix * t2.ix) + (t1.iy * t2.jx)) + (t1.iz * t2.kx),
			iy: ((t1.ix * t2.iy) + (t1.iy * t2.jy)) + (t1.iz * t2.ky),
			iz: ((t1.ix * t2.iz) + (t1.iy * t2.jz)) + (t1.iz * t2.kz),
			jx: ((t1.jx * t2.ix) + (t1.jy * t2.jx)) + (t1.jz * t2.kx),
			jy: ((t1.jx * t2.iy) + (t1.jy * t2.jy)) + (t1.jz * t2.ky),
			jz: ((t1.jx * t2.iz) + (t1.jy * t2.jz)) + (t1.jz * t2.kz),
			kx: ((t1.kx * t2.ix) + (t1.ky * t2.jx)) + (t1.kz * t2.kx),
			ky: ((t1.kx * t2.iy) + (t1.ky * t2.jy)) + (t1.kz * t2.ky),
			kz: ((t1.kx * t2.iz) + (t1.ky * t2.jz)) + (t1.kz * t2.kz),
			px: t2.px + ((((t1.px * t2.ix) + (t1.py * t2.jx)) + (t1.pz * t2.kx)) * t2.scale),
			py: t2.py + ((((t1.px * t2.iy) + (t1.py * t2.jy)) + (t1.pz * t2.ky)) * t2.scale),
			pz: t2.pz + ((((t1.px * t2.iz) + (t1.py * t2.jz)) + (t1.pz * t2.kz)) * t2.scale),
			scale: t1.scale * t2.scale
		};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Transformation$modelMatrix = function (transformation) {
	return $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
		{m11: transformation.ix, m12: transformation.jx, m13: transformation.kx, m14: transformation.px, m21: transformation.iy, m22: transformation.jy, m23: transformation.ky, m24: transformation.py, m31: transformation.iz, m32: transformation.jz, m33: transformation.kz, m34: transformation.pz, m41: 0, m42: 0, m43: 0, m44: 1});
};
var $ianmackenzie$elm_3d_scene$Scene3d$createRenderPass = F5(
	function (sceneProperties, viewMatrix, projectionMatrix, transformation, drawFunction) {
		var normalSign = transformation.isRightHanded ? 1 : (-1);
		var modelScale = A4($elm_explorations$linear_algebra$Math$Vector4$vec4, transformation.scale, transformation.scale, transformation.scale, normalSign);
		return A6(
			drawFunction,
			sceneProperties,
			modelScale,
			$ianmackenzie$elm_3d_scene$Scene3d$Transformation$modelMatrix(transformation),
			transformation.isRightHanded,
			viewMatrix,
			projectionMatrix);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$collectRenderPasses = F6(
	function (sceneProperties, viewMatrix, projectionMatrix, currentTransformation, node, accumulated) {
		collectRenderPasses:
		while (true) {
			switch (node.$) {
				case 'EmptyNode':
					return accumulated;
				case 'Transformed':
					var transformation = node.a;
					var childNode = node.b;
					var $temp$sceneProperties = sceneProperties,
						$temp$viewMatrix = viewMatrix,
						$temp$projectionMatrix = projectionMatrix,
						$temp$currentTransformation = A2($ianmackenzie$elm_3d_scene$Scene3d$Transformation$compose, transformation, currentTransformation),
						$temp$node = childNode,
						$temp$accumulated = accumulated;
					sceneProperties = $temp$sceneProperties;
					viewMatrix = $temp$viewMatrix;
					projectionMatrix = $temp$projectionMatrix;
					currentTransformation = $temp$currentTransformation;
					node = $temp$node;
					accumulated = $temp$accumulated;
					continue collectRenderPasses;
				case 'MeshNode':
					var meshDrawFunction = node.b;
					var updatedMeshes = A2(
						$elm$core$List$cons,
						A5($ianmackenzie$elm_3d_scene$Scene3d$createRenderPass, sceneProperties, viewMatrix, projectionMatrix, currentTransformation, meshDrawFunction),
						accumulated.meshes);
					return {meshes: updatedMeshes, points: accumulated.points, shadows: accumulated.shadows};
				case 'PointNode':
					var pointDrawFunction = node.b;
					var updatedPoints = A2(
						$elm$core$List$cons,
						A5($ianmackenzie$elm_3d_scene$Scene3d$createRenderPass, sceneProperties, viewMatrix, projectionMatrix, currentTransformation, pointDrawFunction),
						accumulated.points);
					return {meshes: accumulated.meshes, points: updatedPoints, shadows: accumulated.shadows};
				case 'ShadowNode':
					var shadowDrawFunction = node.a;
					var updatedShadows = A2(
						$elm$core$List$cons,
						A5($ianmackenzie$elm_3d_scene$Scene3d$createRenderPass, sceneProperties, viewMatrix, projectionMatrix, currentTransformation, shadowDrawFunction),
						accumulated.shadows);
					return {meshes: accumulated.meshes, points: accumulated.points, shadows: updatedShadows};
				default:
					var childNodes = node.a;
					return A3(
						$elm$core$List$foldl,
						A4($ianmackenzie$elm_3d_scene$Scene3d$collectRenderPasses, sceneProperties, viewMatrix, projectionMatrix, currentTransformation),
						accumulated,
						childNodes);
			}
		}
	});
var $elm_explorations$webgl$WebGL$Internal$ColorMask = F4(
	function (a, b, c, d) {
		return {$: 'ColorMask', a: a, b: b, c: c, d: d};
	});
var $elm_explorations$webgl$WebGL$Settings$colorMask = $elm_explorations$webgl$WebGL$Internal$ColorMask;
var $elm_explorations$webgl$WebGL$Internal$DepthTest = F4(
	function (a, b, c, d) {
		return {$: 'DepthTest', a: a, b: b, c: c, d: d};
	});
var $elm_explorations$webgl$WebGL$Settings$DepthTest$greaterOrEqual = function (_v0) {
	var write = _v0.write;
	var near = _v0.near;
	var far = _v0.far;
	return A4($elm_explorations$webgl$WebGL$Internal$DepthTest, 518, write, near, far);
};
var $elm_explorations$webgl$WebGL$Internal$PolygonOffset = F2(
	function (a, b) {
		return {$: 'PolygonOffset', a: a, b: b};
	});
var $elm_explorations$webgl$WebGL$Settings$polygonOffset = $elm_explorations$webgl$WebGL$Internal$PolygonOffset;
var $ianmackenzie$elm_3d_scene$Scene3d$createShadowStencil = _List_fromArray(
	[
		$elm_explorations$webgl$WebGL$Settings$DepthTest$greaterOrEqual(
		{far: 1, near: 0, write: false}),
		A4($elm_explorations$webgl$WebGL$Settings$colorMask, false, false, false, false),
		A2($elm_explorations$webgl$WebGL$Settings$polygonOffset, 0.0, 1.0)
	]);
var $ianmackenzie$elm_3d_scene$Scene3d$initialStencilCount = 8;
var $ianmackenzie$elm_3d_scene$Scene3d$lowerFourBits = 15;
var $elm_explorations$webgl$WebGL$Settings$StencilTest$replace = $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation(7681);
var $ianmackenzie$elm_3d_scene$Scene3d$dummyFragmentShader = {
	src: '\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ',
	attributes: {},
	uniforms: {}
};
var $elm_explorations$webgl$WebGL$triangleStrip = $elm_explorations$webgl$WebGL$Mesh1(
	{elemSize: 1, indexSize: 0, mode: 5});
var $ianmackenzie$elm_3d_scene$Scene3d$fullScreenQuadMesh = $elm_explorations$webgl$WebGL$triangleStrip(
	_List_fromArray(
		[
			{
			position: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, -1, -1)
		},
			{
			position: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, -1)
		},
			{
			position: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, -1, 1)
		},
			{
			position: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, 1)
		}
		]));
var $ianmackenzie$elm_3d_scene$Scene3d$fullScreenQuadVertexShader = {
	src: '\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ',
	attributes: {position: 'position'},
	uniforms: {}
};
var $elm_explorations$webgl$WebGL$Settings$StencilTest$test = function (stencilTest) {
	return A3(
		$elm_explorations$webgl$WebGL$Settings$StencilTest$testSeparate,
		{mask: stencilTest.mask, ref: stencilTest.ref, writeMask: stencilTest.writeMask},
		{fail: stencilTest.fail, test: stencilTest.test, zfail: stencilTest.zfail, zpass: stencilTest.zpass},
		{fail: stencilTest.fail, test: stencilTest.test, zfail: stencilTest.zfail, zpass: stencilTest.zpass});
};
var $ianmackenzie$elm_3d_scene$Scene3d$updateStencil = function (test) {
	return A5(
		$elm_explorations$webgl$WebGL$entityWith,
		_List_fromArray(
			[
				$elm_explorations$webgl$WebGL$Settings$StencilTest$test(test),
				A4($elm_explorations$webgl$WebGL$Settings$colorMask, false, false, false, false)
			]),
		$ianmackenzie$elm_3d_scene$Scene3d$fullScreenQuadVertexShader,
		$ianmackenzie$elm_3d_scene$Scene3d$dummyFragmentShader,
		$ianmackenzie$elm_3d_scene$Scene3d$fullScreenQuadMesh,
		{});
};
var $ianmackenzie$elm_3d_scene$Scene3d$resetStencil = $ianmackenzie$elm_3d_scene$Scene3d$updateStencil(
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace, mask: 0, ref: $ianmackenzie$elm_3d_scene$Scene3d$initialStencilCount, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, writeMask: $ianmackenzie$elm_3d_scene$Scene3d$lowerFourBits, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace});
var $elm_explorations$webgl$WebGL$Settings$StencilTest$greater = $elm_explorations$webgl$WebGL$Settings$StencilTest$Test(516);
var $elm_explorations$webgl$WebGL$Settings$StencilTest$invert = $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation(5386);
var $ianmackenzie$elm_3d_scene$Scene3d$singleLightMask = function (index) {
	return A2($elm$core$Basics$pow, 2, index + 4);
};
var $ianmackenzie$elm_3d_scene$Scene3d$storeStencilValue = function (lightIndex) {
	return $ianmackenzie$elm_3d_scene$Scene3d$updateStencil(
		{
			fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep,
			mask: $ianmackenzie$elm_3d_scene$Scene3d$lowerFourBits,
			ref: $ianmackenzie$elm_3d_scene$Scene3d$initialStencilCount,
			test: $elm_explorations$webgl$WebGL$Settings$StencilTest$greater,
			writeMask: $ianmackenzie$elm_3d_scene$Scene3d$singleLightMask(lightIndex),
			zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$invert,
			zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$invert
		});
};
var $ianmackenzie$elm_3d_scene$Scene3d$createShadow = F3(
	function (shadowRenderPasses, lightIndex, lightMatrix) {
		return $elm$core$List$concat(
			_List_fromArray(
				[
					A3($ianmackenzie$elm_3d_scene$Scene3d$call, shadowRenderPasses, lightMatrix, $ianmackenzie$elm_3d_scene$Scene3d$createShadowStencil),
					_List_fromArray(
					[
						$ianmackenzie$elm_3d_scene$Scene3d$storeStencilValue(lightIndex),
						$ianmackenzie$elm_3d_scene$Scene3d$resetStencil
					])
				]));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$createShadows = F2(
	function (shadowRenderPasses, shadowCasters) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$indexedMap,
				$ianmackenzie$elm_3d_scene$Scene3d$createShadow(shadowRenderPasses),
				shadowCasters));
	});
var $elm_explorations$webgl$WebGL$Settings$DepthTest$less = function (_v0) {
	var write = _v0.write;
	var near = _v0.near;
	var far = _v0.far;
	return A4($elm_explorations$webgl$WebGL$Internal$DepthTest, 513, write, near, far);
};
var $elm_explorations$webgl$WebGL$Settings$DepthTest$default = $elm_explorations$webgl$WebGL$Settings$DepthTest$less(
	{far: 1, near: 0, write: true});
var $elm_explorations$webgl$WebGL$Internal$Blend = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {$: 'Blend', a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h, i: i, j: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm_explorations$webgl$WebGL$Settings$Blend$custom = function (_v0) {
	var r = _v0.r;
	var g = _v0.g;
	var b = _v0.b;
	var a = _v0.a;
	var color = _v0.color;
	var alpha = _v0.alpha;
	var expand = F2(
		function (_v1, _v2) {
			var eq1 = _v1.a;
			var f11 = _v1.b;
			var f12 = _v1.c;
			var eq2 = _v2.a;
			var f21 = _v2.b;
			var f22 = _v2.c;
			return $elm_explorations$webgl$WebGL$Internal$Blend(eq1)(f11)(f12)(eq2)(f21)(f22)(r)(g)(b)(a);
		});
	return A2(expand, color, alpha);
};
var $elm_explorations$webgl$WebGL$Settings$Blend$Blender = F3(
	function (a, b, c) {
		return {$: 'Blender', a: a, b: b, c: c};
	});
var $elm_explorations$webgl$WebGL$Settings$Blend$customAdd = F2(
	function (_v0, _v1) {
		var factor1 = _v0.a;
		var factor2 = _v1.a;
		return A3($elm_explorations$webgl$WebGL$Settings$Blend$Blender, 32774, factor1, factor2);
	});
var $elm_explorations$webgl$WebGL$Settings$Blend$Factor = function (a) {
	return {$: 'Factor', a: a};
};
var $elm_explorations$webgl$WebGL$Settings$Blend$one = $elm_explorations$webgl$WebGL$Settings$Blend$Factor(1);
var $elm_explorations$webgl$WebGL$Settings$Blend$oneMinusSrcAlpha = $elm_explorations$webgl$WebGL$Settings$Blend$Factor(771);
var $elm_explorations$webgl$WebGL$Settings$Blend$srcAlpha = $elm_explorations$webgl$WebGL$Settings$Blend$Factor(770);
var $ianmackenzie$elm_3d_scene$Scene3d$defaultBlend = $elm_explorations$webgl$WebGL$Settings$Blend$custom(
	{
		a: 0,
		alpha: A2($elm_explorations$webgl$WebGL$Settings$Blend$customAdd, $elm_explorations$webgl$WebGL$Settings$Blend$one, $elm_explorations$webgl$WebGL$Settings$Blend$oneMinusSrcAlpha),
		b: 0,
		color: A2($elm_explorations$webgl$WebGL$Settings$Blend$customAdd, $elm_explorations$webgl$WebGL$Settings$Blend$srcAlpha, $elm_explorations$webgl$WebGL$Settings$Blend$oneMinusSrcAlpha),
		g: 0,
		r: 0
	});
var $ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault = _List_fromArray(
	[$elm_explorations$webgl$WebGL$Settings$DepthTest$default, $ianmackenzie$elm_3d_scene$Scene3d$defaultBlend]);
var $ianmackenzie$elm_geometry$Point3d$unsafe = function (givenCoordinates) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(givenCoordinates);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Transformation$placementFrame = function (transformation) {
	return $ianmackenzie$elm_geometry$Frame3d$unsafe(
		{
			originPoint: $ianmackenzie$elm_geometry$Point3d$unsafe(
				{x: transformation.px, y: transformation.py, z: transformation.pz}),
			xDirection: $ianmackenzie$elm_geometry$Direction3d$unsafe(
				{x: transformation.ix, y: transformation.iy, z: transformation.iz}),
			yDirection: $ianmackenzie$elm_geometry$Direction3d$unsafe(
				{x: transformation.jx, y: transformation.jy, z: transformation.jz}),
			zDirection: $ianmackenzie$elm_geometry$Direction3d$unsafe(
				{x: transformation.kx, y: transformation.ky, z: transformation.kz})
		});
};
var $ianmackenzie$elm_geometry$Direction3d$relativeTo = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var d = _v1.a;
		var _v2 = frame.zDirection;
		var k = _v2.a;
		var _v3 = frame.yDirection;
		var j = _v3.a;
		var _v4 = frame.xDirection;
		var i = _v4.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
			{x: ((d.x * i.x) + (d.y * i.y)) + (d.z * i.z), y: ((d.x * j.x) + (d.y * j.y)) + (d.z * j.z), z: ((d.x * k.x) + (d.y * k.y)) + (d.z * k.z)});
	});
var $ianmackenzie$elm_geometry$Point3d$relativeTo = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var p = _v1.a;
		var _v2 = frame.originPoint;
		var p0 = _v2.a;
		var deltaX = p.x - p0.x;
		var deltaY = p.y - p0.y;
		var deltaZ = p.z - p0.z;
		var _v3 = frame.zDirection;
		var k = _v3.a;
		var _v4 = frame.yDirection;
		var j = _v4.a;
		var _v5 = frame.xDirection;
		var i = _v5.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: ((deltaX * i.x) + (deltaY * i.y)) + (deltaZ * i.z), y: ((deltaX * j.x) + (deltaY * j.y)) + (deltaZ * j.z), z: ((deltaX * k.x) + (deltaY * k.y)) + (deltaZ * k.z)});
	});
var $ianmackenzie$elm_geometry$Frame3d$relativeTo = F2(
	function (otherFrame, frame) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Frame3d(
			{
				originPoint: A2(
					$ianmackenzie$elm_geometry$Point3d$relativeTo,
					otherFrame,
					$ianmackenzie$elm_geometry$Frame3d$originPoint(frame)),
				xDirection: A2(
					$ianmackenzie$elm_geometry$Direction3d$relativeTo,
					otherFrame,
					$ianmackenzie$elm_geometry$Frame3d$xDirection(frame)),
				yDirection: A2(
					$ianmackenzie$elm_geometry$Direction3d$relativeTo,
					otherFrame,
					$ianmackenzie$elm_geometry$Frame3d$yDirection(frame)),
				zDirection: A2(
					$ianmackenzie$elm_geometry$Direction3d$relativeTo,
					otherFrame,
					$ianmackenzie$elm_geometry$Frame3d$zDirection(frame))
			});
	});
var $ianmackenzie$elm_geometry$Point3d$meters = F3(
	function (x, y, z) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: x, y: y, z: z});
	});
var $ianmackenzie$elm_geometry$Direction3d$unwrap = function (_v0) {
	var coordinates = _v0.a;
	return coordinates;
};
var $ianmackenzie$elm_3d_scene$Scene3d$updateViewBounds = F4(
	function (viewFrame, scale, modelBounds, current) {
		var originalCenter = modelBounds.centerPoint;
		var modelZDimension = (2 * modelBounds.halfZ) * scale;
		var modelYDimension = (2 * modelBounds.halfY) * scale;
		var modelXDimension = (2 * modelBounds.halfX) * scale;
		var modelCenterZ = originalCenter.z * scale;
		var modelCenterY = originalCenter.y * scale;
		var modelCenterX = originalCenter.x * scale;
		var k = $ianmackenzie$elm_geometry$Direction3d$unwrap(
			$ianmackenzie$elm_geometry$Frame3d$zDirection(viewFrame));
		var zDimension = ($elm$core$Basics$abs(modelXDimension * k.x) + $elm$core$Basics$abs(modelYDimension * k.y)) + $elm$core$Basics$abs(modelZDimension * k.z);
		var j = $ianmackenzie$elm_geometry$Direction3d$unwrap(
			$ianmackenzie$elm_geometry$Frame3d$yDirection(viewFrame));
		var yDimension = ($elm$core$Basics$abs(modelXDimension * j.x) + $elm$core$Basics$abs(modelYDimension * j.y)) + $elm$core$Basics$abs(modelZDimension * j.z);
		var i = $ianmackenzie$elm_geometry$Direction3d$unwrap(
			$ianmackenzie$elm_geometry$Frame3d$xDirection(viewFrame));
		var xDimension = ($elm$core$Basics$abs(modelXDimension * i.x) + $elm$core$Basics$abs(modelYDimension * i.y)) + $elm$core$Basics$abs(modelZDimension * i.z);
		var nodeBounds = A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$withDimensions,
			_Utils_Tuple3(
				$ianmackenzie$elm_units$Quantity$Quantity(xDimension),
				$ianmackenzie$elm_units$Quantity$Quantity(yDimension),
				$ianmackenzie$elm_units$Quantity$Quantity(zDimension)),
			A2(
				$ianmackenzie$elm_geometry$Point3d$relativeTo,
				viewFrame,
				A3($ianmackenzie$elm_geometry$Point3d$meters, modelCenterX, modelCenterY, modelCenterZ)));
		if (current.$ === 'Just') {
			var currentBounds = current.a;
			return $elm$core$Maybe$Just(
				A2($ianmackenzie$elm_geometry$BoundingBox3d$union, currentBounds, nodeBounds));
		} else {
			return $elm$core$Maybe$Just(nodeBounds);
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$getViewBounds = F4(
	function (viewFrame, scale, current, nodes) {
		getViewBounds:
		while (true) {
			if (nodes.b) {
				var first = nodes.a;
				var rest = nodes.b;
				switch (first.$) {
					case 'EmptyNode':
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = current,
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
					case 'MeshNode':
						var modelBounds = first.a;
						var updated = A4($ianmackenzie$elm_3d_scene$Scene3d$updateViewBounds, viewFrame, scale, modelBounds, current);
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = updated,
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
					case 'ShadowNode':
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = current,
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
					case 'PointNode':
						var modelBounds = first.a;
						var updated = A4($ianmackenzie$elm_3d_scene$Scene3d$updateViewBounds, viewFrame, scale, modelBounds, current);
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = updated,
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
					case 'Group':
						var childNodes = first.a;
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = A4($ianmackenzie$elm_3d_scene$Scene3d$getViewBounds, viewFrame, scale, current, childNodes),
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
					default:
						var transformation = first.a;
						var childNode = first.b;
						var localViewFrame = A2(
							$ianmackenzie$elm_geometry$Frame3d$relativeTo,
							$ianmackenzie$elm_3d_scene$Scene3d$Transformation$placementFrame(transformation),
							viewFrame);
						var localScale = scale * transformation.scale;
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = A4(
							$ianmackenzie$elm_3d_scene$Scene3d$getViewBounds,
							localViewFrame,
							localScale,
							current,
							_List_fromArray(
								[childNode])),
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
				}
			} else {
				return current;
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Transformation$identity = {isRightHanded: true, ix: 1, iy: 0, iz: 0, jx: 0, jy: 1, jz: 0, kx: 0, ky: 0, kz: 1, px: 0, py: 0, pz: 0, scale: 1};
var $ianmackenzie$elm_3d_scene$Scene3d$initStencil = $ianmackenzie$elm_3d_scene$Scene3d$updateStencil(
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace, mask: 0, ref: $ianmackenzie$elm_3d_scene$Scene3d$initialStencilCount, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, writeMask: 255, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Light = function (a) {
	return {$: 'Light', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled = $ianmackenzie$elm_3d_scene$Scene3d$Types$Light(
	{b: 0, castsShadows: false, g: 0, parameter: 0, r: 0, type_: 0, x: 0, y: 0, z: 0});
var $ianmackenzie$elm_3d_scene$Scene3d$lightPair = F2(
	function (_v0, _v1) {
		var first = _v0.a;
		var second = _v1.a;
		return $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
			{m11: first.x, m12: first.r, m13: second.x, m14: second.r, m21: first.y, m22: first.g, m23: second.y, m24: second.g, m31: first.z, m32: first.b, m33: second.z, m34: second.b, m41: first.type_, m42: first.parameter, m43: second.type_, m44: second.parameter});
	});
var $ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled = _Utils_Tuple2(
	{
		lights12: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled),
		lights34: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled),
		lights56: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled),
		lights78: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled)
	},
	A4($elm_explorations$linear_algebra$Math$Vector4$vec4, 0, 0, 0, 0));
var $elm_explorations$webgl$WebGL$Settings$StencilTest$equal = $elm_explorations$webgl$WebGL$Settings$StencilTest$Test(514);
var $elm_explorations$webgl$WebGL$Settings$DepthTest$lessOrEqual = function (_v0) {
	var write = _v0.write;
	var near = _v0.near;
	var far = _v0.far;
	return A4($elm_explorations$webgl$WebGL$Internal$DepthTest, 515, write, near, far);
};
var $ianmackenzie$elm_3d_scene$Scene3d$upperFourBits = 240;
var $ianmackenzie$elm_3d_scene$Scene3d$outsideStencil = _List_fromArray(
	[
		$elm_explorations$webgl$WebGL$Settings$DepthTest$lessOrEqual(
		{far: 1, near: 0, write: true}),
		$elm_explorations$webgl$WebGL$Settings$StencilTest$test(
		{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, mask: $ianmackenzie$elm_3d_scene$Scene3d$upperFourBits, ref: 0, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$equal, writeMask: 0, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep}),
		$ianmackenzie$elm_3d_scene$Scene3d$defaultBlend
	]);
var $ianmackenzie$elm_3d_camera$WebGL$Matrices$projectionMatrix = F2(
	function (_v0, _v1) {
		var camera = _v0.a;
		var nearClipDepth = _v1.nearClipDepth;
		var farClipDepth = _v1.farClipDepth;
		var aspectRatio = _v1.aspectRatio;
		var _v2 = $ianmackenzie$elm_units$Quantity$abs(nearClipDepth);
		var n = _v2.a;
		var _v3 = $ianmackenzie$elm_units$Quantity$abs(farClipDepth);
		var f = _v3.a;
		var _v4 = camera.projection;
		if (_v4.$ === 'Perspective') {
			var frustumSlope = _v4.a;
			return $elm$core$Basics$isInfinite(f) ? $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
				{m11: 1 / (aspectRatio * frustumSlope), m12: 0, m13: 0, m14: 0, m21: 0, m22: 1 / frustumSlope, m23: 0, m24: 0, m31: 0, m32: 0, m33: -1, m34: (-2) * n, m41: 0, m42: 0, m43: -1, m44: 0}) : $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
				{m11: 1 / (aspectRatio * frustumSlope), m12: 0, m13: 0, m14: 0, m21: 0, m22: 1 / frustumSlope, m23: 0, m24: 0, m31: 0, m32: 0, m33: (-(f + n)) / (f - n), m34: (((-2) * f) * n) / (f - n), m41: 0, m42: 0, m43: -1, m44: 0});
		} else {
			var viewportHeight = _v4.a.a;
			return $elm$core$Basics$isInfinite(f) ? $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
				{m11: 2 / (aspectRatio * viewportHeight), m12: 0, m13: 0, m14: 0, m21: 0, m22: 2 / viewportHeight, m23: 0, m24: 0, m31: 0, m32: 0, m33: 0, m34: -1, m41: 0, m42: 0, m43: 0, m44: 1}) : $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
				{m11: 2 / (aspectRatio * viewportHeight), m12: 0, m13: 0, m14: 0, m21: 0, m22: 2 / viewportHeight, m23: 0, m24: 0, m31: 0, m32: 0, m33: (-2) / (f - n), m34: (-(f + n)) / (f - n), m41: 0, m42: 0, m43: 0, m44: 1});
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$enabledFlag = F2(
	function (lightMask, lightIndex) {
		return ((1 & (lightMask >> lightIndex)) === 1) ? 0 : 1;
	});
var $ianmackenzie$elm_3d_scene$Scene3d$insideStencil = function (lightMask) {
	return _List_fromArray(
		[
			$elm_explorations$webgl$WebGL$Settings$DepthTest$lessOrEqual(
			{far: 1, near: 0, write: true}),
			$elm_explorations$webgl$WebGL$Settings$StencilTest$test(
			{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, mask: $ianmackenzie$elm_3d_scene$Scene3d$upperFourBits, ref: lightMask, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$equal, writeMask: 0, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep}),
			$ianmackenzie$elm_3d_scene$Scene3d$defaultBlend
		]);
};
var $ianmackenzie$elm_3d_scene$Scene3d$renderWithinShadows = F3(
	function (meshRenderPasses, lightMatrices, numShadowingLights) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (lightMask) {
					var stencilMask = lightMask << 4;
					var enabledLights = A4(
						$elm_explorations$linear_algebra$Math$Vector4$vec4,
						A2($ianmackenzie$elm_3d_scene$Scene3d$enabledFlag, lightMask, 0),
						A2($ianmackenzie$elm_3d_scene$Scene3d$enabledFlag, lightMask, 1),
						A2($ianmackenzie$elm_3d_scene$Scene3d$enabledFlag, lightMask, 2),
						A2($ianmackenzie$elm_3d_scene$Scene3d$enabledFlag, lightMask, 3));
					return A3(
						$ianmackenzie$elm_3d_scene$Scene3d$call,
						meshRenderPasses,
						_Utils_Tuple2(lightMatrices, enabledLights),
						$ianmackenzie$elm_3d_scene$Scene3d$insideStencil(stencilMask));
				},
				A2(
					$elm$core$List$range,
					1,
					A2($elm$core$Basics$pow, 2, numShadowingLights) - 1)));
	});
var $elm_explorations$linear_algebra$Math$Matrix4$toRecord = _MJS_m4x4toRecord;
var $ianmackenzie$elm_geometry$Frame3d$atOrigin = $ianmackenzie$elm_geometry$Geometry$Types$Frame3d(
	{originPoint: $ianmackenzie$elm_geometry$Point3d$origin, xDirection: $ianmackenzie$elm_geometry$Direction3d$x, yDirection: $ianmackenzie$elm_geometry$Direction3d$y, zDirection: $ianmackenzie$elm_geometry$Direction3d$z});
var $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Frame3d$toMat4 = function (frame) {
	var p = $ianmackenzie$elm_geometry$Point3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$originPoint(frame));
	var k = $ianmackenzie$elm_geometry$Direction3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$zDirection(frame));
	var j = $ianmackenzie$elm_geometry$Direction3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$yDirection(frame));
	var i = $ianmackenzie$elm_geometry$Direction3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$xDirection(frame));
	return $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
		{m11: i.x, m12: j.x, m13: k.x, m14: p.x, m21: i.y, m22: j.y, m23: k.y, m24: p.y, m31: i.z, m32: j.z, m33: k.z, m34: p.z, m41: 0, m42: 0, m43: 0, m44: 1});
};
var $ianmackenzie$elm_3d_camera$WebGL$Matrices$modelViewMatrix = F2(
	function (modelFrame, _v0) {
		var viewpointFrame = _v0.a;
		return $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Frame3d$toMat4(
			A2($ianmackenzie$elm_geometry$Frame3d$relativeTo, viewpointFrame, modelFrame));
	});
var $ianmackenzie$elm_3d_camera$WebGL$Matrices$viewMatrix = function (camera) {
	return A2($ianmackenzie$elm_3d_camera$WebGL$Matrices$modelViewMatrix, $ianmackenzie$elm_geometry$Frame3d$atOrigin, camera);
};
var $ianmackenzie$elm_3d_camera$Camera3d$viewpoint = function (_v0) {
	var camera = _v0.a;
	return camera.viewpoint;
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$xDirection = function (_v0) {
	var frame = _v0.a;
	return $ianmackenzie$elm_geometry$Frame3d$xDirection(frame);
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$yDirection = function (_v0) {
	var frame = _v0.a;
	return $ianmackenzie$elm_geometry$Frame3d$yDirection(frame);
};
var $ianmackenzie$elm_3d_scene$Scene3d$toWebGLEntities = function (_arguments) {
	var viewpoint = $ianmackenzie$elm_3d_camera$Camera3d$viewpoint(_arguments.camera);
	var viewFrame = $ianmackenzie$elm_geometry$Frame3d$unsafe(
		{
			originPoint: $ianmackenzie$elm_3d_camera$Viewpoint3d$eyePoint(viewpoint),
			xDirection: $ianmackenzie$elm_3d_camera$Viewpoint3d$xDirection(viewpoint),
			yDirection: $ianmackenzie$elm_3d_camera$Viewpoint3d$yDirection(viewpoint),
			zDirection: $ianmackenzie$elm_geometry$Direction3d$reverse(
				$ianmackenzie$elm_3d_camera$Viewpoint3d$viewDirection(viewpoint))
		});
	var _v0 = $ianmackenzie$elm_3d_scene$Scene3d$Entity$group(_arguments.entities);
	var rootNode = _v0.a;
	var _v1 = A4(
		$ianmackenzie$elm_3d_scene$Scene3d$getViewBounds,
		viewFrame,
		1,
		$elm$core$Maybe$Nothing,
		_List_fromArray(
			[rootNode]));
	if (_v1.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var viewBounds = _v1.a;
		var viewMatrix = $ianmackenzie$elm_3d_camera$WebGL$Matrices$viewMatrix(viewpoint);
		var nearClipDepth = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			0.99,
			A2(
				$ianmackenzie$elm_units$Quantity$max,
				$ianmackenzie$elm_units$Quantity$abs(_arguments.clipDepth),
				$ianmackenzie$elm_units$Quantity$negate(
					$ianmackenzie$elm_geometry$BoundingBox3d$maxZ(viewBounds))));
		var _v2 = $ianmackenzie$elm_geometry$BoundingBox3d$dimensions(viewBounds);
		var xDimension = _v2.a;
		var yDimension = _v2.b;
		var zDimension = _v2.c;
		var sceneDiameter = $ianmackenzie$elm_geometry$Vector3d$length(
			A3($ianmackenzie$elm_geometry$Vector3d$xyz, xDimension, yDimension, zDimension));
		var farClipDepth = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			1.01,
			A2(
				$ianmackenzie$elm_units$Quantity$plus,
				sceneDiameter,
				$ianmackenzie$elm_units$Quantity$negate(
					$ianmackenzie$elm_geometry$BoundingBox3d$minZ(viewBounds))));
		var projectionMatrix = A2(
			$ianmackenzie$elm_3d_camera$WebGL$Matrices$projectionMatrix,
			_arguments.camera,
			{aspectRatio: _arguments.aspectRatio, farClipDepth: farClipDepth, nearClipDepth: nearClipDepth});
		var projectionType = $elm_explorations$linear_algebra$Math$Matrix4$toRecord(projectionMatrix).m44;
		var eyePointOrDirectionToCamera = (!projectionType) ? $ianmackenzie$elm_geometry$Point3d$toMeters(
			$ianmackenzie$elm_3d_camera$Viewpoint3d$eyePoint(viewpoint)) : $ianmackenzie$elm_geometry$Direction3d$unwrap(
			$ianmackenzie$elm_geometry$Direction3d$reverse(
				$ianmackenzie$elm_3d_camera$Viewpoint3d$viewDirection(viewpoint)));
		var _v3 = function () {
			var _v4 = _arguments.toneMapping;
			switch (_v4.$) {
				case 'NoToneMapping':
					return _Utils_Tuple2(0, 0);
				case 'ReinhardLuminanceToneMapping':
					return _Utils_Tuple2(1, 0);
				case 'ReinhardPerChannelToneMapping':
					return _Utils_Tuple2(2, 0);
				case 'ExtendedReinhardLuminanceToneMapping':
					var overexposureLimit = _v4.a;
					return _Utils_Tuple2(3, overexposureLimit);
				case 'ExtendedReinhardPerChannelToneMapping':
					var overexposureLimit = _v4.a;
					return _Utils_Tuple2(4, overexposureLimit);
				default:
					return _Utils_Tuple2(5, 0);
			}
		}();
		var toneMapType = _v3.a;
		var toneMapParam = _v3.b;
		var _v5 = _arguments.exposure;
		var exposureLuminance = _v5.a;
		var _v6 = A2($ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToLinearRgb, exposureLuminance, _arguments.whiteBalance);
		var referenceWhite = _v6.a;
		var sceneProperties = $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
			{
				m11: 0,
				m12: eyePointOrDirectionToCamera.x,
				m13: $elm_explorations$linear_algebra$Math$Vector3$getX(referenceWhite),
				m14: _arguments.supersampling,
				m21: 0,
				m22: eyePointOrDirectionToCamera.y,
				m23: $elm_explorations$linear_algebra$Math$Vector3$getY(referenceWhite),
				m24: $ianmackenzie$elm_units$Length$inMeters(sceneDiameter),
				m31: 0,
				m32: eyePointOrDirectionToCamera.z,
				m33: $elm_explorations$linear_algebra$Math$Vector3$getZ(referenceWhite),
				m34: toneMapType,
				m41: 0,
				m42: projectionType,
				m43: 0,
				m44: toneMapParam
			});
		var renderPasses = A6(
			$ianmackenzie$elm_3d_scene$Scene3d$collectRenderPasses,
			sceneProperties,
			viewMatrix,
			projectionMatrix,
			$ianmackenzie$elm_3d_scene$Scene3d$Transformation$identity,
			rootNode,
			{meshes: _List_Nil, points: _List_Nil, shadows: _List_Nil});
		var _v7 = _arguments.lights;
		switch (_v7.$) {
			case 'SingleUnshadowedPass':
				var lightMatrices = _v7.a;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A3(
							$ianmackenzie$elm_3d_scene$Scene3d$call,
							renderPasses.meshes,
							_Utils_Tuple2(lightMatrices, $ianmackenzie$elm_3d_scene$Scene3d$allLightsEnabled),
							$ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault),
							A3($ianmackenzie$elm_3d_scene$Scene3d$call, renderPasses.points, $ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled, $ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault)
						]));
			case 'SingleShadowedPass':
				var lightMatrices = _v7.a;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A3($ianmackenzie$elm_3d_scene$Scene3d$call, renderPasses.meshes, $ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled, $ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault),
							_List_fromArray(
							[$ianmackenzie$elm_3d_scene$Scene3d$initStencil]),
							A3($ianmackenzie$elm_3d_scene$Scene3d$call, renderPasses.shadows, lightMatrices.lights12, $ianmackenzie$elm_3d_scene$Scene3d$createShadowStencil),
							_List_fromArray(
							[
								$ianmackenzie$elm_3d_scene$Scene3d$storeStencilValue(0)
							]),
							A3(
							$ianmackenzie$elm_3d_scene$Scene3d$call,
							renderPasses.meshes,
							_Utils_Tuple2(lightMatrices, $ianmackenzie$elm_3d_scene$Scene3d$allLightsEnabled),
							$ianmackenzie$elm_3d_scene$Scene3d$outsideStencil),
							A3($ianmackenzie$elm_3d_scene$Scene3d$call, renderPasses.points, $ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled, $ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault)
						]));
			default:
				var shadowCasters = _v7.a;
				var allLightMatrices = _v7.b;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A3(
							$ianmackenzie$elm_3d_scene$Scene3d$call,
							renderPasses.meshes,
							_Utils_Tuple2(allLightMatrices, $ianmackenzie$elm_3d_scene$Scene3d$allLightsEnabled),
							$ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault),
							_List_fromArray(
							[$ianmackenzie$elm_3d_scene$Scene3d$initStencil]),
							A2($ianmackenzie$elm_3d_scene$Scene3d$createShadows, renderPasses.shadows, shadowCasters),
							A3(
							$ianmackenzie$elm_3d_scene$Scene3d$renderWithinShadows,
							renderPasses.meshes,
							allLightMatrices,
							$elm$core$List$length(shadowCasters)),
							A3($ianmackenzie$elm_3d_scene$Scene3d$call, renderPasses.points, $ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled, $ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault)
						]));
		}
	}
};
var $elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		$elm$core$String$fromInt(n));
};
var $ianmackenzie$elm_3d_scene$Scene3d$composite = F2(
	function (_arguments, scenes) {
		var commonWebGLOptions = _List_fromArray(
			[
				$elm_explorations$webgl$WebGL$depth(1),
				$elm_explorations$webgl$WebGL$stencil(0),
				$elm_explorations$webgl$WebGL$alpha(true),
				A4($elm_explorations$webgl$WebGL$clearColor, 0, 0, 0, 0)
			]);
		var _v0 = function () {
			var _v1 = _arguments.antialiasing;
			switch (_v1.$) {
				case 'NoAntialiasing':
					return _Utils_Tuple3(commonWebGLOptions, '0', 1);
				case 'Multisampling':
					return _Utils_Tuple3(
						A2($elm$core$List$cons, $elm_explorations$webgl$WebGL$antialias, commonWebGLOptions),
						'1',
						1);
				default:
					var value = _v1.a;
					return _Utils_Tuple3(commonWebGLOptions, '0', value);
			}
		}();
		var webGLOptions = _v0.a;
		var key = _v0.b;
		var scalingFactor = _v0.c;
		var _v2 = _arguments.dimensions;
		var width = _v2.a;
		var height = _v2.b;
		var heightInPixels = $ianmackenzie$elm_units$Pixels$toInt(height);
		var heightCss = A2(
			$elm$html$Html$Attributes$style,
			'height',
			$elm$core$String$fromInt(heightInPixels) + 'px');
		var widthInPixels = $ianmackenzie$elm_units$Pixels$toInt(width);
		var aspectRatio = widthInPixels / heightInPixels;
		var webGLEntities = A2(
			$elm$core$List$concatMap,
			function (scene) {
				return $ianmackenzie$elm_3d_scene$Scene3d$toWebGLEntities(
					{aspectRatio: aspectRatio, camera: _arguments.camera, clipDepth: _arguments.clipDepth, entities: scene.entities, exposure: scene.exposure, lights: scene.lights, supersampling: scalingFactor, toneMapping: scene.toneMapping, whiteBalance: scene.whiteBalance});
			},
			scenes);
		var widthCss = A2(
			$elm$html$Html$Attributes$style,
			'width',
			$elm$core$String$fromInt(widthInPixels) + 'px');
		var _v3 = _arguments.background;
		var givenBackgroundColor = _v3.a;
		var backgroundColorString = $avh4$elm_color$Color$toCssString(givenBackgroundColor);
		return A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'padding', '0px'),
					widthCss,
					heightCss
				]),
			_List_fromArray(
				[
					_Utils_Tuple2(
					key,
					A3(
						$elm_explorations$webgl$WebGL$toHtmlWith,
						webGLOptions,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$width(
								$elm$core$Basics$round(widthInPixels * scalingFactor)),
								$elm$html$Html$Attributes$height(
								$elm$core$Basics$round(heightInPixels * scalingFactor)),
								widthCss,
								heightCss,
								A2($elm$html$Html$Attributes$style, 'display', 'block'),
								A2($elm$html$Html$Attributes$style, 'background-color', backgroundColorString)
							]),
						webGLEntities))
				]));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$custom = function (_arguments) {
	return A2(
		$ianmackenzie$elm_3d_scene$Scene3d$composite,
		{antialiasing: _arguments.antialiasing, background: _arguments.background, camera: _arguments.camera, clipDepth: _arguments.clipDepth, dimensions: _arguments.dimensions},
		_List_fromArray(
			[
				{entities: _arguments.entities, exposure: _arguments.exposure, lights: _arguments.lights, toneMapping: _arguments.toneMapping, whiteBalance: _arguments.whiteBalance}
			]));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Chromaticity = function (a) {
	return {$: 'Chromaticity', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$chromaticity = function (xy) {
	return $ianmackenzie$elm_3d_scene$Scene3d$Types$Chromaticity(xy);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$daylight = $ianmackenzie$elm_3d_scene$Scene3d$Light$chromaticity(
	{x: 0.31271, y: 0.32902});
var $ianmackenzie$elm_3d_scene$Scene3d$Light$directional = F2(
	function (_v0, light) {
		var shadowFlag = _v0.a;
		var _v1 = $ianmackenzie$elm_geometry$Direction3d$unwrap(light.direction);
		var x = _v1.x;
		var y = _v1.y;
		var z = _v1.z;
		var _v2 = A2($ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToLinearRgb, light.intensity, light.chromaticity);
		var rgb = _v2.a;
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Light(
			{
				b: $elm_explorations$linear_algebra$Math$Vector3$getZ(rgb),
				castsShadows: shadowFlag,
				g: $elm_explorations$linear_algebra$Math$Vector3$getY(rgb),
				parameter: 0,
				r: $elm_explorations$linear_algebra$Math$Vector3$getX(rgb),
				type_: 1,
				x: -x,
				y: -y,
				z: -z
			});
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Exposure = function (a) {
	return {$: 'Exposure', a: a};
};
var $ianmackenzie$elm_units$Luminance$nits = function (numNits) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numNits);
};
var $ianmackenzie$elm_3d_scene$Scene3d$exposureValue = function (ev100) {
	return $ianmackenzie$elm_3d_scene$Scene3d$Exposure(
		$ianmackenzie$elm_units$Luminance$nits(
			1.2 * A2($elm$core$Basics$pow, 2, ev100)));
};
var $ianmackenzie$elm_units$Illuminance$lux = function (numLux) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numLux);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Multisampling = {$: 'Multisampling'};
var $ianmackenzie$elm_3d_scene$Scene3d$multisampling = $ianmackenzie$elm_3d_scene$Scene3d$Multisampling;
var $ianmackenzie$elm_3d_scene$Scene3d$NoToneMapping = {$: 'NoToneMapping'};
var $ianmackenzie$elm_3d_scene$Scene3d$noToneMapping = $ianmackenzie$elm_3d_scene$Scene3d$NoToneMapping;
var $ianmackenzie$elm_units$Quantity$float = function (value) {
	return $ianmackenzie$elm_units$Quantity$Quantity(value);
};
var $ianmackenzie$elm_units$Illuminance$inLux = function (_v0) {
	var numLux = _v0.a;
	return numLux;
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$soft = function (light) {
	soft:
	while (true) {
		if (_Utils_eq(light.intensityAbove, $ianmackenzie$elm_units$Quantity$zero) && _Utils_eq(light.intensityBelow, $ianmackenzie$elm_units$Quantity$zero)) {
			return $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled;
		} else {
			if (A2(
				$ianmackenzie$elm_units$Quantity$greaterThan,
				$ianmackenzie$elm_units$Quantity$abs(light.intensityAbove),
				$ianmackenzie$elm_units$Quantity$abs(light.intensityBelow))) {
				var $temp$light = {
					chromaticity: light.chromaticity,
					intensityAbove: light.intensityBelow,
					intensityBelow: light.intensityAbove,
					upDirection: $ianmackenzie$elm_geometry$Direction3d$reverse(light.upDirection)
				};
				light = $temp$light;
				continue soft;
			} else {
				var nitsBelow = $elm$core$Basics$abs(
					$ianmackenzie$elm_units$Illuminance$inLux(light.intensityBelow) / $elm$core$Basics$pi);
				var nitsAbove = $elm$core$Basics$abs(
					$ianmackenzie$elm_units$Illuminance$inLux(light.intensityAbove) / $elm$core$Basics$pi);
				var _v0 = $ianmackenzie$elm_geometry$Direction3d$unwrap(light.upDirection);
				var x = _v0.x;
				var y = _v0.y;
				var z = _v0.z;
				var _v1 = A2(
					$ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToLinearRgb,
					$ianmackenzie$elm_units$Quantity$float(1),
					light.chromaticity);
				var rgb = _v1.a;
				return $ianmackenzie$elm_3d_scene$Scene3d$Types$Light(
					{
						b: nitsAbove * $elm_explorations$linear_algebra$Math$Vector3$getZ(rgb),
						castsShadows: false,
						g: nitsAbove * $elm_explorations$linear_algebra$Math$Vector3$getY(rgb),
						parameter: nitsBelow / nitsAbove,
						r: nitsAbove * $elm_explorations$linear_algebra$Math$Vector3$getX(rgb),
						type_: 3,
						x: x,
						y: y,
						z: z
					});
			}
		}
	}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$overhead = function (_arguments) {
	return $ianmackenzie$elm_3d_scene$Scene3d$Light$soft(
		{chromaticity: _arguments.chromaticity, intensityAbove: _arguments.intensity, intensityBelow: $ianmackenzie$elm_units$Quantity$zero, upDirection: _arguments.upDirection});
};
var $ianmackenzie$elm_units$Temperature$inKelvins = function (_v0) {
	var numKelvins = _v0.a;
	return numKelvins;
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$colorTemperature = function (temperature) {
	var t = A3(
		$elm$core$Basics$clamp,
		1667,
		25000,
		$ianmackenzie$elm_units$Temperature$inKelvins(temperature));
	var x = (t <= 4000) ? ((((((-0.2661239) * 1.0e9) / ((t * t) * t)) - ((0.2343589 * 1.0e6) / (t * t))) + ((0.8776956 * 1.0e3) / t)) + 0.17991) : ((((((-3.0258469) * 1.0e9) / ((t * t) * t)) + ((2.1070379 * 1.0e6) / (t * t))) + ((0.2226347 * 1.0e3) / t)) + 0.24039);
	var y = (t <= 2222) ? (((((-1.1063814) * ((x * x) * x)) - (1.3481102 * (x * x))) + (2.18555832 * x)) - 0.20219683) : ((t <= 4000) ? (((((-0.9549476) * ((x * x) * x)) - (1.37418593 * (x * x))) + (2.09137015 * x)) - 0.16748867) : ((((3.081758 * ((x * x) * x)) - (5.8733867 * (x * x))) + (3.75112997 * x)) - 0.37001483));
	return $ianmackenzie$elm_3d_scene$Scene3d$Light$chromaticity(
		{x: x, y: y});
};
var $ianmackenzie$elm_units$Temperature$Temperature = function (a) {
	return {$: 'Temperature', a: a};
};
var $ianmackenzie$elm_units$Temperature$kelvins = function (numKelvins) {
	return $ianmackenzie$elm_units$Temperature$Temperature(numKelvins);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$skylight = $ianmackenzie$elm_3d_scene$Scene3d$Light$colorTemperature(
	$ianmackenzie$elm_units$Temperature$kelvins(12000));
var $ianmackenzie$elm_3d_scene$Scene3d$Light$sunlight = $ianmackenzie$elm_3d_scene$Scene3d$Light$colorTemperature(
	$ianmackenzie$elm_units$Temperature$kelvins(5600));
var $ianmackenzie$elm_3d_scene$Scene3d$MultiplePasses = F2(
	function (a, b) {
		return {$: 'MultiplePasses', a: a, b: b};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$SingleUnshadowedPass = function (a) {
	return {$: 'SingleUnshadowedPass', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$eraseLight = function (_v0) {
	var light = _v0.a;
	return $ianmackenzie$elm_3d_scene$Scene3d$Types$Light(light);
};
var $ianmackenzie$elm_3d_scene$Scene3d$lightCastsShadows = function (_v0) {
	var properties = _v0.a;
	return properties.castsShadows;
};
var $ianmackenzie$elm_3d_scene$Scene3d$noLights = $ianmackenzie$elm_3d_scene$Scene3d$SingleUnshadowedPass($ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled.a);
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$singleLight = function (_v0) {
	var light = _v0.a;
	return $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
		{m11: light.x, m12: light.r, m13: 0, m14: 0, m21: light.y, m22: light.g, m23: 0, m24: 0, m31: light.z, m32: light.b, m33: 0, m34: 0, m41: light.type_, m42: light.parameter, m43: 0, m44: 0});
};
var $ianmackenzie$elm_3d_scene$Scene3d$eightLights = F8(
	function (first, second, third, fourth, fifth, sixth, seventh, eigth) {
		var _v0 = A2(
			$elm$core$List$partition,
			$ianmackenzie$elm_3d_scene$Scene3d$lightCastsShadows,
			_List_fromArray(
				[
					$ianmackenzie$elm_3d_scene$Scene3d$eraseLight(first),
					$ianmackenzie$elm_3d_scene$Scene3d$eraseLight(second),
					$ianmackenzie$elm_3d_scene$Scene3d$eraseLight(third),
					$ianmackenzie$elm_3d_scene$Scene3d$eraseLight(fourth)
				]));
		var enabledShadowCasters = _v0.a;
		var disabledShadowCasters = _v0.b;
		if (!enabledShadowCasters.b) {
			return $ianmackenzie$elm_3d_scene$Scene3d$SingleUnshadowedPass(
				{
					lights12: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, first, second),
					lights34: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, third, fourth),
					lights56: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, fifth, sixth),
					lights78: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, seventh, eigth)
				});
		} else {
			var sortedLights = _Utils_ap(enabledShadowCasters, disabledShadowCasters);
			if ((((sortedLights.b && sortedLights.b.b) && sortedLights.b.b.b) && sortedLights.b.b.b.b) && (!sortedLights.b.b.b.b.b)) {
				var light0 = sortedLights.a;
				var _v3 = sortedLights.b;
				var light1 = _v3.a;
				var _v4 = _v3.b;
				var light2 = _v4.a;
				var _v5 = _v4.b;
				var light3 = _v5.a;
				return A2(
					$ianmackenzie$elm_3d_scene$Scene3d$MultiplePasses,
					A2($elm$core$List$map, $ianmackenzie$elm_3d_scene$Scene3d$singleLight, enabledShadowCasters),
					{
						lights12: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, light0, light1),
						lights34: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, light2, light3),
						lights56: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, fifth, sixth),
						lights78: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, seventh, eigth)
					});
			} else {
				return $ianmackenzie$elm_3d_scene$Scene3d$noLights;
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$threeLights = F3(
	function (first, second, third) {
		return A8($ianmackenzie$elm_3d_scene$Scene3d$eightLights, first, second, third, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$sunny = function (_arguments) {
	var sun = A2(
		$ianmackenzie$elm_3d_scene$Scene3d$Light$directional,
		$ianmackenzie$elm_3d_scene$Scene3d$Light$castsShadows(_arguments.shadows),
		{
			chromaticity: $ianmackenzie$elm_3d_scene$Scene3d$Light$sunlight,
			direction: _arguments.sunlightDirection,
			intensity: $ianmackenzie$elm_units$Illuminance$lux(80000)
		});
	var sky = $ianmackenzie$elm_3d_scene$Scene3d$Light$overhead(
		{
			chromaticity: $ianmackenzie$elm_3d_scene$Scene3d$Light$skylight,
			intensity: $ianmackenzie$elm_units$Illuminance$lux(20000),
			upDirection: _arguments.upDirection
		});
	var environment = $ianmackenzie$elm_3d_scene$Scene3d$Light$overhead(
		{
			chromaticity: $ianmackenzie$elm_3d_scene$Scene3d$Light$daylight,
			intensity: $ianmackenzie$elm_units$Illuminance$lux(15000),
			upDirection: $ianmackenzie$elm_geometry$Direction3d$reverse(_arguments.upDirection)
		});
	var lights = A3($ianmackenzie$elm_3d_scene$Scene3d$threeLights, sun, sky, environment);
	return $ianmackenzie$elm_3d_scene$Scene3d$custom(
		{
			antialiasing: $ianmackenzie$elm_3d_scene$Scene3d$multisampling,
			background: _arguments.background,
			camera: _arguments.camera,
			clipDepth: _arguments.clipDepth,
			dimensions: _arguments.dimensions,
			entities: _arguments.entities,
			exposure: $ianmackenzie$elm_3d_scene$Scene3d$exposureValue(15),
			lights: lights,
			toneMapping: $ianmackenzie$elm_3d_scene$Scene3d$noToneMapping,
			whiteBalance: $ianmackenzie$elm_3d_scene$Scene3d$Light$daylight
		});
};
var $author$project$ViewPlan$ImageReset = {$: 'ImageReset'};
var $author$project$ViewPlan$ImageZoomIn = {$: 'ImageZoomIn'};
var $author$project$ViewPlan$ImageZoomOut = {$: 'ImageZoomOut'};
var $author$project$ViewPlan$ToggleFollowOrange = {$: 'ToggleFollowOrange'};
var $feathericons$elm_feather$FeatherIcons$maximize = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'maximize',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$minus = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'minus',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('5'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('19'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$plus = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'plus',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('5'),
					$elm$svg$Svg$Attributes$x2('12'),
					$elm$svg$Svg$Attributes$y2('19')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('5'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('19'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil)
		]));
var $author$project$ViewPlan$stopProp = {preventDefault: false, stopPropagation: true};
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$white = A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255);
var $author$project$ViewPlan$zoomButtons = F2(
	function (msgWrapper, context) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$moveDown(5),
					$mdgriffith$elm_ui$Element$moveLeft(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$white),
					$mdgriffith$elm_ui$Element$Font$size(40),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'click',
						$author$project$ViewPlan$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewPlan$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'dblclick',
						$author$project$ViewPlan$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewPlan$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mousedown',
						$author$project$ViewPlan$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewPlan$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mouseup',
						$author$project$ViewPlan$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewPlan$ImageNoOp),
							msgWrapper)))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$plus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewPlan$ImageZoomIn))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$minus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewPlan$ImageZoomOut))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$maximize),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewPlan$ImageReset))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: context.followSelectedPoint ? $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$lock) : $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$unlock),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewPlan$ToggleFollowOrange))
					})
				]));
	});
var $author$project$ViewPlan$view = F5(
	function (context, contentArea, track, scene, msgWrapper) {
		var dragging = context.dragAction;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDown(
						A2($elm$core$Basics$composeR, $author$project$ViewPlan$ImageGrab, msgWrapper))),
					(!_Utils_eq(dragging, $author$project$ViewPlan$DragNone)) ? $mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onMove(
						A2($elm$core$Basics$composeR, $author$project$ViewPlan$ImageDrag, msgWrapper))) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onUp(
						A2($elm$core$Basics$composeR, $author$project$ViewPlan$ImageRelease, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick(
						A2($elm$core$Basics$composeR, $author$project$ViewPlan$ImageClick, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDoubleClick(
						A2($elm$core$Basics$composeR, $author$project$ViewPlan$ImageDoubleClick, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWheel(
						function (event) {
							return msgWrapper(
								$author$project$ViewPlan$ImageMouseWheel(event.deltaY));
						})),
					$author$project$ViewPlan$onContextMenu(
					msgWrapper($author$project$ViewPlan$ImageNoOp)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$Border$width(0),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$ViewPlan$zoomButtons, msgWrapper, context))
				]),
			$mdgriffith$elm_ui$Element$html(
				$ianmackenzie$elm_3d_scene$Scene3d$sunny(
					{
						background: $ianmackenzie$elm_3d_scene$Scene3d$backgroundColor($avh4$elm_color$Color$lightBlue),
						camera: A3($author$project$ViewPlan$deriveCamera, track.trackTree, context, track.currentPosition),
						clipDepth: $ianmackenzie$elm_units$Length$meters(1),
						dimensions: contentArea,
						entities: scene,
						shadows: false,
						sunlightDirection: $ianmackenzie$elm_geometry$Direction3d$negativeZ,
						upDirection: $ianmackenzie$elm_geometry$Direction3d$positiveZ
					})));
	});
var $author$project$ViewProfileCharts$ImageClick = function (a) {
	return {$: 'ImageClick', a: a};
};
var $author$project$ViewProfileCharts$ImageMouseWheel = function (a) {
	return {$: 'ImageMouseWheel', a: a};
};
var $terezka$elm_charts$Internal$Svg$Event = F2(
	function (name, handler) {
		return {handler: handler, name: name};
	});
var $terezka$elm_charts$Internal$Helpers$apply = F2(
	function (funcs, _default) {
		var apply_ = F2(
			function (f, a) {
				return f(a);
			});
		return A3($elm$core$List$foldl, apply_, _default, funcs);
	});
var $elm$svg$Svg$clipPath = $elm$svg$Svg$trustedNode('clipPath');
var $debois$elm_dom$DOM$offsetHeight = A2($elm$json$Json$Decode$field, 'offsetHeight', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$offsetWidth = A2($elm$json$Json$Decode$field, 'offsetWidth', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$offsetLeft = A2($elm$json$Json$Decode$field, 'offsetLeft', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$offsetParent = F2(
	function (x, decoder) {
		return $elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$json$Json$Decode$field,
					'offsetParent',
					$elm$json$Json$Decode$null(x)),
					A2($elm$json$Json$Decode$field, 'offsetParent', decoder)
				]));
	});
var $debois$elm_dom$DOM$offsetTop = A2($elm$json$Json$Decode$field, 'offsetTop', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$scrollLeft = A2($elm$json$Json$Decode$field, 'scrollLeft', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$scrollTop = A2($elm$json$Json$Decode$field, 'scrollTop', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$position = F2(
	function (x, y) {
		return A2(
			$elm$json$Json$Decode$andThen,
			function (_v0) {
				var x_ = _v0.a;
				var y_ = _v0.b;
				return A2(
					$debois$elm_dom$DOM$offsetParent,
					_Utils_Tuple2(x_, y_),
					A2($debois$elm_dom$DOM$position, x_, y_));
			},
			A5(
				$elm$json$Json$Decode$map4,
				F4(
					function (scrollLeftP, scrollTopP, offsetLeftP, offsetTopP) {
						return _Utils_Tuple2((x + offsetLeftP) - scrollLeftP, (y + offsetTopP) - scrollTopP);
					}),
				$debois$elm_dom$DOM$scrollLeft,
				$debois$elm_dom$DOM$scrollTop,
				$debois$elm_dom$DOM$offsetLeft,
				$debois$elm_dom$DOM$offsetTop));
	});
var $debois$elm_dom$DOM$boundingClientRect = A4(
	$elm$json$Json$Decode$map3,
	F3(
		function (_v0, width, height) {
			var x = _v0.a;
			var y = _v0.b;
			return {height: height, left: x, top: y, width: width};
		}),
	A2($debois$elm_dom$DOM$position, 0, 0),
	$debois$elm_dom$DOM$offsetWidth,
	$debois$elm_dom$DOM$offsetHeight);
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var $debois$elm_dom$DOM$parentElement = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'parentElement', decoder);
};
function $terezka$elm_charts$Internal$Svg$cyclic$decodePosition() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$debois$elm_dom$DOM$boundingClientRect,
				$elm$json$Json$Decode$lazy(
				function (_v0) {
					return $debois$elm_dom$DOM$parentElement(
						$terezka$elm_charts$Internal$Svg$cyclic$decodePosition());
				})
			]));
}
try {
	var $terezka$elm_charts$Internal$Svg$decodePosition = $terezka$elm_charts$Internal$Svg$cyclic$decodePosition();
	$terezka$elm_charts$Internal$Svg$cyclic$decodePosition = function () {
		return $terezka$elm_charts$Internal$Svg$decodePosition;
	};
} catch ($) {
	throw 'Some top-level definitions from `Internal.Svg` are causing infinite recursion:\n\n  ┌─────┐\n  │    decodePosition\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $terezka$elm_charts$Internal$Coordinates$innerLength = function (axis) {
	return A2($elm$core$Basics$max, 1, (axis.length - axis.marginMin) - axis.marginMax);
};
var $terezka$elm_charts$Internal$Coordinates$innerWidth = function (plane) {
	return $terezka$elm_charts$Internal$Coordinates$innerLength(plane.x);
};
var $terezka$elm_charts$Internal$Coordinates$range = function (axis) {
	var diff = axis.max - axis.min;
	return (diff > 0) ? diff : 1;
};
var $terezka$elm_charts$Internal$Coordinates$scaleCartesianX = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$range(plane.x)) / $terezka$elm_charts$Internal$Coordinates$innerWidth(plane);
	});
var $terezka$elm_charts$Internal$Coordinates$toCartesianX = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, value - plane.x.marginMin) + plane.x.min;
	});
var $terezka$elm_charts$Internal$Coordinates$innerHeight = function (plane) {
	return $terezka$elm_charts$Internal$Coordinates$innerLength(plane.y);
};
var $terezka$elm_charts$Internal$Coordinates$scaleCartesianY = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$range(plane.y)) / $terezka$elm_charts$Internal$Coordinates$innerHeight(plane);
	});
var $terezka$elm_charts$Internal$Coordinates$toCartesianY = F2(
	function (plane, value) {
		return ($terezka$elm_charts$Internal$Coordinates$range(plane.y) - A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, value - plane.y.marginMin)) + plane.y.min;
	});
var $terezka$elm_charts$Internal$Svg$fromSvg = F2(
	function (plane, point) {
		return {
			x: A2($terezka$elm_charts$Internal$Coordinates$toCartesianX, plane, point.x),
			y: A2($terezka$elm_charts$Internal$Coordinates$toCartesianY, plane, point.y)
		};
	});
var $debois$elm_dom$DOM$target = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'target', decoder);
};
var $terezka$elm_charts$Internal$Svg$decoder = F2(
	function (plane, toMsg) {
		var handle = F3(
			function (mouseX, mouseY, box) {
				var yPrev = plane.y;
				var xPrev = plane.x;
				var widthPercent = box.width / plane.x.length;
				var heightPercent = box.height / plane.y.length;
				var newPlane = _Utils_update(
					plane,
					{
						x: _Utils_update(
							xPrev,
							{length: box.width, marginMax: plane.x.marginMax * widthPercent, marginMin: plane.x.marginMin * widthPercent}),
						y: _Utils_update(
							yPrev,
							{length: box.height, marginMax: plane.y.marginMax * heightPercent, marginMin: plane.y.marginMin * heightPercent})
					});
				var searched = A2(
					$terezka$elm_charts$Internal$Svg$fromSvg,
					newPlane,
					{x: mouseX - box.left, y: mouseY - box.top});
				return A2(toMsg, newPlane, searched);
			});
		return A4(
			$elm$json$Json$Decode$map3,
			handle,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			$debois$elm_dom$DOM$target($terezka$elm_charts$Internal$Svg$decodePosition));
	});
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$svg$Svg$Events$on = $elm$html$Html$Events$on;
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $terezka$elm_charts$Internal$Coordinates$toId = function (plane) {
	var numToStr = A2(
		$elm$core$Basics$composeR,
		$elm$core$String$fromFloat,
		A2($elm$core$String$replace, '.', '-'));
	return A2(
		$elm$core$String$join,
		'_',
		_List_fromArray(
			[
				'elm-charts__id',
				numToStr(plane.x.length),
				numToStr(plane.x.min),
				numToStr(plane.x.max),
				numToStr(plane.x.marginMin),
				numToStr(plane.x.marginMax),
				numToStr(plane.y.length),
				numToStr(plane.y.min),
				numToStr(plane.y.max),
				numToStr(plane.y.marginMin),
				numToStr(plane.y.marginMax)
			]));
};
var $terezka$elm_charts$Internal$Svg$container = F5(
	function (plane, config, below, chartEls, above) {
		var toEvent = function (event) {
			return A2(
				$elm$svg$Svg$Events$on,
				event.name,
				A2($terezka$elm_charts$Internal$Svg$decoder, plane, event.handler));
		};
		var svgAttrsSize = config.responsive ? _List_fromArray(
			[
				$elm$svg$Svg$Attributes$viewBox(
				'0 0 ' + ($elm$core$String$fromFloat(plane.x.length) + (' ' + $elm$core$String$fromFloat(plane.y.length)))),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]) : _List_fromArray(
			[
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat(plane.x.length)),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat(plane.y.length)),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]);
		var htmlAttrsSize = config.responsive ? _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%')
			]) : _List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$elm$core$String$fromFloat(plane.x.length) + 'px'),
				A2(
				$elm$html$Html$Attributes$style,
				'height',
				$elm$core$String$fromFloat(plane.y.length) + 'px')
			]);
		var htmlAttrsDef = _List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-charts__container-inner')
			]);
		var htmlAttrs = _Utils_ap(
			config.htmlAttrs,
			_Utils_ap(htmlAttrsDef, htmlAttrsSize));
		var chartPosition = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$x(
				$elm$core$String$fromFloat(plane.x.marginMin)),
				$elm$svg$Svg$Attributes$y(
				$elm$core$String$fromFloat(plane.y.marginMin)),
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat(
					$terezka$elm_charts$Internal$Coordinates$innerWidth(plane))),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat(
					$terezka$elm_charts$Internal$Coordinates$innerHeight(plane))),
				$elm$svg$Svg$Attributes$fill('transparent')
			]);
		var clipPathDefs = A2(
			$elm$svg$Svg$defs,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$clipPath,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$id(
							$terezka$elm_charts$Internal$Coordinates$toId(plane))
						]),
					_List_fromArray(
						[
							A2($elm$svg$Svg$rect, chartPosition, _List_Nil)
						]))
				]));
		var catcher = A2(
			$elm$svg$Svg$rect,
			_Utils_ap(
				chartPosition,
				A2($elm$core$List$map, toEvent, config.events)),
			_List_Nil);
		var chart = A2(
			$elm$svg$Svg$svg,
			_Utils_ap(svgAttrsSize, config.attrs),
			_Utils_ap(
				_List_fromArray(
					[clipPathDefs]),
				_Utils_ap(
					chartEls,
					_List_fromArray(
						[catcher]))));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('elm-charts__container'),
					A2($elm$html$Html$Attributes$style, 'position', 'relative')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					htmlAttrs,
					_Utils_ap(
						below,
						_Utils_ap(
							_List_fromArray(
								[chart]),
							above)))
				]));
	});
var $terezka$elm_charts$Internal$Coordinates$Position = F4(
	function (x1, x2, y1, y2) {
		return {x1: x1, x2: x2, y1: y1, y2: y2};
	});
var $terezka$elm_charts$Internal$Coordinates$foldPosition = F2(
	function (func, data) {
		var fold = F2(
			function (datum, posM) {
				if (posM.$ === 'Just') {
					var pos = posM.a;
					return $elm$core$Maybe$Just(
						{
							x1: A2(
								$elm$core$Basics$min,
								func(datum).x1,
								pos.x1),
							x2: A2(
								$elm$core$Basics$max,
								func(datum).x2,
								pos.x2),
							y1: A2(
								$elm$core$Basics$min,
								func(datum).y1,
								pos.y1),
							y2: A2(
								$elm$core$Basics$max,
								func(datum).y2,
								pos.y2)
						});
				} else {
					return $elm$core$Maybe$Just(
						func(datum));
				}
			});
		return A2(
			$elm$core$Maybe$withDefault,
			A4($terezka$elm_charts$Internal$Coordinates$Position, 0, 0, 0, 0),
			A3($elm$core$List$foldl, fold, $elm$core$Maybe$Nothing, data));
	});
var $terezka$elm_charts$Chart$Attributes$lowest = F3(
	function (v, edit, b) {
		return _Utils_update(
			b,
			{
				min: A3(edit, v, b.min, b.dataMin)
			});
	});
var $terezka$elm_charts$Chart$Attributes$orLower = F3(
	function (least, real, _v0) {
		return (_Utils_cmp(real, least) > 0) ? least : real;
	});
var $terezka$elm_charts$Chart$definePlane = F2(
	function (config, elements) {
		var width = A2($elm$core$Basics$max, 1, (config.width - config.padding.left) - config.padding.right);
		var toLimit = F5(
			function (length, marginMin, marginMax, min, max) {
				return {dataMax: max, dataMin: min, length: length, marginMax: marginMax, marginMin: marginMin, max: max, min: min};
			});
		var height = A2($elm$core$Basics$max, 1, (config.height - config.padding.bottom) - config.padding.top);
		var fixSingles = function (bs) {
			return _Utils_eq(bs.min, bs.max) ? _Utils_update(
				bs,
				{max: bs.min + 10}) : bs;
		};
		var collectLimits = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 'BarsElement':
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 'CustomElement':
						return acc;
					case 'AxisElement':
						return acc;
					case 'TicksElement':
						return acc;
					case 'TickElement':
						return acc;
					case 'LabelsElement':
						return acc;
					case 'LabelElement':
						return acc;
					case 'GridElement':
						return acc;
					case 'SubElements':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, collectLimits, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		var limits_ = function (pos) {
			return function (_v3) {
				var x = _v3.x;
				var y = _v3.y;
				return {
					x: fixSingles(x),
					y: fixSingles(y)
				};
			}(
				{
					x: A5(toLimit, width, config.margin.left, config.margin.right, pos.x1, pos.x2),
					y: A5(toLimit, height, config.margin.top, config.margin.bottom, pos.y1, pos.y2)
				});
		}(
			A2(
				$terezka$elm_charts$Internal$Coordinates$foldPosition,
				$elm$core$Basics$identity,
				A3($elm$core$List$foldl, collectLimits, _List_Nil, elements)));
		var calcRange = function () {
			var _v2 = config.range;
			if (!_v2.b) {
				return limits_.x;
			} else {
				var some = _v2;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (f, b) {
							return f(b);
						}),
					limits_.x,
					some);
			}
		}();
		var calcDomain = function () {
			var _v1 = config.domain;
			if (!_v1.b) {
				return A3($terezka$elm_charts$Chart$Attributes$lowest, 0, $terezka$elm_charts$Chart$Attributes$orLower, limits_.y);
			} else {
				var some = _v1;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (f, b) {
							return f(b);
						}),
					limits_.y,
					some);
			}
		}();
		var unpadded = {x: calcRange, y: calcDomain};
		var scalePadX = $terezka$elm_charts$Internal$Coordinates$scaleCartesianX(unpadded);
		var xMax = calcRange.max + scalePadX(config.padding.right);
		var xMin = calcRange.min - scalePadX(config.padding.left);
		var scalePadY = $terezka$elm_charts$Internal$Coordinates$scaleCartesianY(unpadded);
		var yMax = calcDomain.max + scalePadY(config.padding.top);
		var yMin = calcDomain.min - scalePadY(config.padding.bottom);
		return {
			x: _Utils_update(
				calcRange,
				{
					length: config.width,
					max: A2($elm$core$Basics$max, xMin, xMax),
					min: A2($elm$core$Basics$min, xMin, xMax)
				}),
			y: _Utils_update(
				calcDomain,
				{
					length: config.height,
					max: A2($elm$core$Basics$max, yMin, yMax),
					min: A2($elm$core$Basics$min, yMin, yMax)
				})
		};
	});
var $terezka$elm_charts$Chart$getItems = F2(
	function (plane, elements) {
		var toItems = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						var items = el.b;
						return _Utils_ap(acc, items);
					case 'BarsElement':
						var items = el.b;
						return _Utils_ap(acc, items);
					case 'CustomElement':
						var item = el.a;
						return _Utils_ap(
							acc,
							_List_fromArray(
								[item]));
					case 'AxisElement':
						var func = el.a;
						return acc;
					case 'TicksElement':
						return acc;
					case 'TickElement':
						return acc;
					case 'LabelsElement':
						return acc;
					case 'LabelElement':
						return acc;
					case 'GridElement':
						return acc;
					case 'SubElements':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, toItems, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		return A3($elm$core$List$foldl, toItems, _List_Nil, elements);
	});
var $terezka$elm_charts$Chart$getLegends = function (elements) {
	var toLegends = F2(
		function (el, acc) {
			switch (el.$) {
				case 'Indexed':
					return acc;
				case 'SeriesElement':
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 'BarsElement':
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 'CustomElement':
					return acc;
				case 'AxisElement':
					return acc;
				case 'TicksElement':
					return acc;
				case 'TickElement':
					return acc;
				case 'LabelsElement':
					return acc;
				case 'LabelElement':
					return acc;
				case 'GridElement':
					return acc;
				case 'SubElements':
					return acc;
				case 'ListOfElements':
					var subs = el.a;
					return A3($elm$core$List$foldl, toLegends, acc, subs);
				case 'SvgElement':
					return acc;
				default:
					return acc;
			}
		});
	return A3($elm$core$List$foldl, toLegends, _List_Nil, elements);
};
var $terezka$elm_charts$Chart$TickValues = F4(
	function (xAxis, yAxis, xs, ys) {
		return {xAxis: xAxis, xs: xs, yAxis: yAxis, ys: ys};
	});
var $terezka$elm_charts$Chart$getTickValues = F3(
	function (plane, items, elements) {
		var toValues = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						return acc;
					case 'BarsElement':
						var func = el.d;
						return A2(func, plane, acc);
					case 'CustomElement':
						var func = el.b;
						return acc;
					case 'AxisElement':
						var func = el.a;
						return A2(func, plane, acc);
					case 'TicksElement':
						var func = el.a;
						return A2(func, plane, acc);
					case 'TickElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'LabelsElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'LabelElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'SubElements':
						var func = el.a;
						return A3(
							$elm$core$List$foldl,
							toValues,
							acc,
							A2(func, plane, items));
					case 'GridElement':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, toValues, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		return A3(
			$elm$core$List$foldl,
			toValues,
			A4($terezka$elm_charts$Chart$TickValues, _List_Nil, _List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$elm_charts$Chart$GridElement = function (a) {
	return {$: 'GridElement', a: a};
};
var $terezka$elm_charts$Internal$Svg$Circle = {$: 'Circle'};
var $terezka$elm_charts$Chart$Attributes$circle = function (config) {
	return _Utils_update(
		config,
		{
			shape: $elm$core$Maybe$Just($terezka$elm_charts$Internal$Svg$Circle)
		});
};
var $terezka$elm_charts$Chart$Attributes$color = F2(
	function (v, config) {
		return (v === '') ? config : _Utils_update(
			config,
			{color: v});
	});
var $terezka$elm_charts$Internal$Helpers$darkGray = 'rgb(200 200 200)';
var $terezka$elm_charts$Chart$Attributes$dashed = F2(
	function (value, config) {
		return _Utils_update(
			config,
			{dashed: value});
	});
var $terezka$elm_charts$Internal$Helpers$pink = '#ea60df';
var $terezka$elm_charts$Internal$Svg$defaultDot = {border: '', borderWidth: 0, color: $terezka$elm_charts$Internal$Helpers$pink, hideOverflow: false, highlight: 0, highlightColor: '', highlightWidth: 5, opacity: 1, shape: $elm$core$Maybe$Nothing, size: 6};
var $elm$svg$Svg$Attributes$fillOpacity = _VirtualDom_attribute('fill-opacity');
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $terezka$elm_charts$Internal$Svg$isWithinPlane = F3(
	function (plane, x, y) {
		return _Utils_eq(
			A3($elm$core$Basics$clamp, plane.x.min, plane.x.max, x),
			x) && _Utils_eq(
			A3($elm$core$Basics$clamp, plane.y.min, plane.y.max, y),
			y);
	});
var $terezka$elm_charts$Internal$Svg$plusPath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(area_ / 4) + off;
		var r6 = side / 2;
		var r3 = side;
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_ - r6) + (' ' + $elm$core$String$fromFloat(((y_ - r3) - r6) + off))),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat(r3),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat(r3),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(-r3),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(-r3),
					'v' + $elm$core$String$fromFloat(r3 - off)
				]));
	});
var $elm$svg$Svg$Attributes$strokeOpacity = _VirtualDom_attribute('stroke-opacity');
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $terezka$elm_charts$Internal$Coordinates$scaleSVGX = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$innerWidth(plane)) / $terezka$elm_charts$Internal$Coordinates$range(plane.x);
	});
var $terezka$elm_charts$Internal$Coordinates$toSVGX = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleSVGX, plane, value - plane.x.min) + plane.x.marginMin;
	});
var $terezka$elm_charts$Internal$Coordinates$scaleSVGY = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$innerHeight(plane)) / $terezka$elm_charts$Internal$Coordinates$range(plane.y);
	});
var $terezka$elm_charts$Internal$Coordinates$toSVGY = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleSVGY, plane, plane.y.max - value) + plane.y.marginMin;
	});
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $terezka$elm_charts$Internal$Svg$trianglePath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(
			(area_ * 4) / $elm$core$Basics$sqrt(3)) + (off * $elm$core$Basics$sqrt(3));
		var height = ($elm$core$Basics$sqrt(3) * side) / 2;
		var fromMiddle = height - (($elm$core$Basics$tan(
			$elm$core$Basics$degrees(30)) * side) / 2);
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_) + (' ' + $elm$core$String$fromFloat(y_ - fromMiddle))),
					'l' + ($elm$core$String$fromFloat((-side) / 2) + (' ' + $elm$core$String$fromFloat(height))),
					'h' + $elm$core$String$fromFloat(side),
					'z'
				]));
	});
var $elm$svg$Svg$Attributes$clipPath = _VirtualDom_attribute('clip-path');
var $terezka$elm_charts$Internal$Svg$withinChartArea = function (plane) {
	return $elm$svg$Svg$Attributes$clipPath(
		'url(#' + ($terezka$elm_charts$Internal$Coordinates$toId(plane) + ')'));
};
var $terezka$elm_charts$Internal$Svg$dot = F5(
	function (plane, toX, toY, config, datum_) {
		var yOrg = toY(datum_);
		var y_ = A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, yOrg);
		var xOrg = toX(datum_);
		var x_ = A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, xOrg);
		var styleAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(
				(config.border === '') ? config.color : config.border),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.borderWidth)),
				$elm$svg$Svg$Attributes$fillOpacity(
				$elm$core$String$fromFloat(config.opacity)),
				$elm$svg$Svg$Attributes$fill(config.color),
				$elm$svg$Svg$Attributes$class('elm-charts__dot'),
				config.hideOverflow ? $terezka$elm_charts$Internal$Svg$withinChartArea(plane) : $elm$svg$Svg$Attributes$class('')
			]);
		var showDot = A3($terezka$elm_charts$Internal$Svg$isWithinPlane, plane, xOrg, yOrg) || config.hideOverflow;
		var highlightColor = (config.highlightColor === '') ? config.color : config.highlightColor;
		var highlightAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(highlightColor),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.highlightWidth)),
				$elm$svg$Svg$Attributes$strokeOpacity(
				$elm$core$String$fromFloat(config.highlight)),
				$elm$svg$Svg$Attributes$fill('transparent'),
				$elm$svg$Svg$Attributes$class('elm-charts__dot-highlight')
			]);
		var view = F3(
			function (toEl, highlightOff, toAttrs) {
				return (config.highlight > 0) ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__dot-container')
						]),
					_List_fromArray(
						[
							A2(
							toEl,
							_Utils_ap(
								toAttrs(highlightOff),
								highlightAttrs),
							_List_Nil),
							A2(
							toEl,
							_Utils_ap(
								toAttrs(0),
								styleAttrs),
							_List_Nil)
						])) : A2(
					toEl,
					_Utils_ap(
						toAttrs(0),
						styleAttrs),
					_List_Nil);
			});
		var area_ = (2 * $elm$core$Basics$pi) * config.size;
		if (!showDot) {
			return $elm$svg$Svg$text('');
		} else {
			var _v0 = config.shape;
			if (_v0.$ === 'Nothing') {
				return $elm$svg$Svg$text('');
			} else {
				switch (_v0.a.$) {
					case 'Circle':
						var _v1 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$circle,
							config.highlightWidth / 2,
							function (off) {
								var radius = $elm$core$Basics$sqrt(area_ / $elm$core$Basics$pi);
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(x_)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(y_)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(radius + off))
									]);
							});
					case 'Triangle':
						var _v2 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$trianglePath, area_, off, x_, y_))
									]);
							});
					case 'Square':
						var _v3 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.highlightWidth,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff))
									]);
							});
					case 'Diamond':
						var _v4 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.highlightWidth,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					case 'Cross':
						var _v5 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$plusPath, area_, off, x_, y_)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					default:
						var _v6 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$plusPath, area_, off, x_, y_))
									]);
							});
				}
			}
		}
	});
var $terezka$elm_charts$Chart$Svg$dot = F4(
	function (plane, toX, toY, edits) {
		return A4(
			$terezka$elm_charts$Internal$Svg$dot,
			plane,
			toX,
			toY,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultDot));
	});
var $terezka$elm_charts$Internal$Helpers$gray = '#EFF2FA';
var $terezka$elm_charts$Internal$Svg$defaultLine = {attrs: _List_Nil, _break: false, color: 'rgb(210, 210, 210)', dashed: _List_Nil, flip: false, hideOverflow: false, opacity: 1, tickDirection: -90, tickLength: 0, width: 1, x1: $elm$core$Maybe$Nothing, x2: $elm$core$Maybe$Nothing, x2Svg: $elm$core$Maybe$Nothing, xOff: 0, y1: $elm$core$Maybe$Nothing, y2: $elm$core$Maybe$Nothing, y2Svg: $elm$core$Maybe$Nothing, yOff: 0};
var $terezka$elm_charts$Internal$Commands$Line = F2(
	function (a, b) {
		return {$: 'Line', a: a, b: b};
	});
var $terezka$elm_charts$Internal$Commands$Move = F2(
	function (a, b) {
		return {$: 'Move', a: a, b: b};
	});
var $terezka$elm_charts$Internal$Commands$joinCommands = function (commands) {
	return A2($elm$core$String$join, ' ', commands);
};
var $terezka$elm_charts$Internal$Commands$stringBoolInt = function (bool) {
	return bool ? '1' : '0';
};
var $terezka$elm_charts$Internal$Commands$stringPoint = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return $elm$core$String$fromFloat(x) + (' ' + $elm$core$String$fromFloat(y));
};
var $terezka$elm_charts$Internal$Commands$stringPoints = function (points) {
	return A2(
		$elm$core$String$join,
		',',
		A2($elm$core$List$map, $terezka$elm_charts$Internal$Commands$stringPoint, points));
};
var $terezka$elm_charts$Internal$Commands$stringCommand = function (command) {
	switch (command.$) {
		case 'Move':
			var x = command.a;
			var y = command.b;
			return 'M' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'Line':
			var x = command.a;
			var y = command.b;
			return 'L' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'CubicBeziers':
			var cx1 = command.a;
			var cy1 = command.b;
			var cx2 = command.c;
			var cy2 = command.d;
			var x = command.e;
			var y = command.f;
			return 'C' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(cx2, cy2),
						_Utils_Tuple2(x, y)
					]));
		case 'CubicBeziersShort':
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 'QuadraticBeziers':
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 'QuadraticBeziersShort':
			var x = command.a;
			var y = command.b;
			return 'T' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'Arc':
			var rx = command.a;
			var ry = command.b;
			var xAxisRotation = command.c;
			var largeArcFlag = command.d;
			var sweepFlag = command.e;
			var x = command.f;
			var y = command.g;
			return 'A ' + $terezka$elm_charts$Internal$Commands$joinCommands(
				_List_fromArray(
					[
						$terezka$elm_charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(rx, ry)),
						$elm$core$String$fromInt(xAxisRotation),
						$terezka$elm_charts$Internal$Commands$stringBoolInt(largeArcFlag),
						$terezka$elm_charts$Internal$Commands$stringBoolInt(sweepFlag),
						$terezka$elm_charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(x, y))
					]));
		default:
			return 'Z';
	}
};
var $terezka$elm_charts$Internal$Commands$Arc = F7(
	function (a, b, c, d, e, f, g) {
		return {$: 'Arc', a: a, b: b, c: c, d: d, e: e, f: f, g: g};
	});
var $terezka$elm_charts$Internal$Commands$Close = {$: 'Close'};
var $terezka$elm_charts$Internal$Commands$CubicBeziers = F6(
	function (a, b, c, d, e, f) {
		return {$: 'CubicBeziers', a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $terezka$elm_charts$Internal$Commands$CubicBeziersShort = F4(
	function (a, b, c, d) {
		return {$: 'CubicBeziersShort', a: a, b: b, c: c, d: d};
	});
var $terezka$elm_charts$Internal$Commands$QuadraticBeziers = F4(
	function (a, b, c, d) {
		return {$: 'QuadraticBeziers', a: a, b: b, c: c, d: d};
	});
var $terezka$elm_charts$Internal$Commands$QuadraticBeziersShort = F2(
	function (a, b) {
		return {$: 'QuadraticBeziersShort', a: a, b: b};
	});
var $terezka$elm_charts$Internal$Commands$translate = F2(
	function (plane, command) {
		switch (command.$) {
			case 'Move':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$Move,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'Line':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$Line,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'CubicBeziers':
				var cx1 = command.a;
				var cy1 = command.b;
				var cx2 = command.c;
				var cy2 = command.d;
				var x = command.e;
				var y = command.f;
				return A6(
					$terezka$elm_charts$Internal$Commands$CubicBeziers,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx2),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy2),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'CubicBeziersShort':
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$elm_charts$Internal$Commands$CubicBeziersShort,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'QuadraticBeziers':
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$elm_charts$Internal$Commands$QuadraticBeziers,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'QuadraticBeziersShort':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$QuadraticBeziersShort,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'Arc':
				var rx = command.a;
				var ry = command.b;
				var xAxisRotation = command.c;
				var largeArcFlag = command.d;
				var sweepFlag = command.e;
				var x = command.f;
				var y = command.g;
				return A7(
					$terezka$elm_charts$Internal$Commands$Arc,
					rx,
					ry,
					xAxisRotation,
					largeArcFlag,
					sweepFlag,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			default:
				return $terezka$elm_charts$Internal$Commands$Close;
		}
	});
var $terezka$elm_charts$Internal$Commands$description = F2(
	function (plane, commands) {
		return $terezka$elm_charts$Internal$Commands$joinCommands(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$terezka$elm_charts$Internal$Commands$translate(plane),
					$terezka$elm_charts$Internal$Commands$stringCommand),
				commands));
	});
var $terezka$elm_charts$Internal$Svg$lengthInCartesianX = $terezka$elm_charts$Internal$Coordinates$scaleCartesianX;
var $terezka$elm_charts$Internal$Svg$lengthInCartesianY = $terezka$elm_charts$Internal$Coordinates$scaleCartesianY;
var $elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');
var $elm$html$Html$Attributes$map = $elm$virtual_dom$VirtualDom$mapAttribute;
var $terezka$elm_charts$Internal$Svg$withAttrs = F3(
	function (attrs, toEl, defaultAttrs) {
		return toEl(
			_Utils_ap(
				defaultAttrs,
				A2(
					$elm$core$List$map,
					$elm$html$Html$Attributes$map($elm$core$Basics$never),
					attrs)));
	});
var $terezka$elm_charts$Internal$Svg$line = F2(
	function (plane, config) {
		var angle = $elm$core$Basics$degrees(config.tickDirection);
		var _v0 = function () {
			var _v3 = _Utils_Tuple3(
				_Utils_Tuple2(config.x1, config.x2),
				_Utils_Tuple2(config.y1, config.y2),
				_Utils_Tuple2(config.x2Svg, config.y2Svg));
			if (_v3.a.a.$ === 'Just') {
				if (_v3.a.b.$ === 'Just') {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v4 = _v3.a;
							var a = _v4.a.a;
							var b = _v4.b.a;
							var _v5 = _v3.b;
							var _v6 = _v5.a;
							var _v7 = _v5.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(plane.y.min, plane.y.min));
						} else {
							var _v38 = _v3.a;
							var a = _v38.a.a;
							var b = _v38.b.a;
							var _v39 = _v3.b;
							var _v40 = _v39.a;
							var c = _v39.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						}
					} else {
						if (_v3.b.b.$ === 'Nothing') {
							var _v41 = _v3.a;
							var a = _v41.a.a;
							var b = _v41.b.a;
							var _v42 = _v3.b;
							var c = _v42.a.a;
							var _v43 = _v42.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						} else {
							return _Utils_Tuple2(
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.x.min, config.x1),
									A2($elm$core$Maybe$withDefault, plane.x.max, config.x2)),
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.y.min, config.y1),
									A2($elm$core$Maybe$withDefault, plane.y.max, config.y2)));
						}
					}
				} else {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v8 = _v3.a;
							var a = _v8.a.a;
							var _v9 = _v8.b;
							var _v10 = _v3.b;
							var _v11 = _v10.a;
							var _v12 = _v10.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, a),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v51 = _v3.a;
									var a = _v51.a.a;
									var _v52 = _v51.b;
									var _v53 = _v3.b;
									var _v54 = _v53.a;
									var b = _v53.b.a;
									var _v55 = _v3.c;
									var xOff = _v55.a.a;
									var yOff = _v55.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v56 = _v3.a;
									var a = _v56.a.a;
									var _v57 = _v56.b;
									var _v58 = _v3.b;
									var _v59 = _v58.a;
									var b = _v58.b.a;
									var _v60 = _v3.c;
									var xOff = _v60.a.a;
									var _v61 = _v60.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v44 = _v3.a;
									var a = _v44.a.a;
									var _v45 = _v44.b;
									var _v46 = _v3.b;
									var _v47 = _v46.a;
									var b = _v46.b.a;
									var _v48 = _v3.c;
									var _v49 = _v48.a;
									var _v50 = _v48.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v62 = _v3.a;
									var a = _v62.a.a;
									var _v63 = _v62.b;
									var _v64 = _v3.b;
									var _v65 = _v64.a;
									var b = _v64.b.a;
									var _v66 = _v3.c;
									var _v67 = _v66.a;
									var yOff = _v66.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v35 = _v3.a;
							var c = _v35.a.a;
							var _v36 = _v35.b;
							var _v37 = _v3.b;
							var a = _v37.a.a;
							var b = _v37.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v75 = _v3.a;
									var a = _v75.a.a;
									var _v76 = _v75.b;
									var _v77 = _v3.b;
									var b = _v77.a.a;
									var _v78 = _v77.b;
									var _v79 = _v3.c;
									var xOff = _v79.a.a;
									var yOff = _v79.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v80 = _v3.a;
									var a = _v80.a.a;
									var _v81 = _v80.b;
									var _v82 = _v3.b;
									var b = _v82.a.a;
									var _v83 = _v82.b;
									var _v84 = _v3.c;
									var xOff = _v84.a.a;
									var _v85 = _v84.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v68 = _v3.a;
									var a = _v68.a.a;
									var _v69 = _v68.b;
									var _v70 = _v3.b;
									var b = _v70.a.a;
									var _v71 = _v70.b;
									var _v72 = _v3.c;
									var _v73 = _v72.a;
									var _v74 = _v72.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v86 = _v3.a;
									var a = _v86.a.a;
									var _v87 = _v86.b;
									var _v88 = _v3.b;
									var b = _v88.a.a;
									var _v89 = _v88.b;
									var _v90 = _v3.c;
									var _v91 = _v90.a;
									var yOff = _v90.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				}
			} else {
				if (_v3.a.b.$ === 'Just') {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v13 = _v3.a;
							var _v14 = _v13.a;
							var b = _v13.b.a;
							var _v15 = _v3.b;
							var _v16 = _v15.a;
							var _v17 = _v15.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(b, b),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v99 = _v3.a;
									var _v100 = _v99.a;
									var a = _v99.b.a;
									var _v101 = _v3.b;
									var _v102 = _v101.a;
									var b = _v101.b.a;
									var _v103 = _v3.c;
									var xOff = _v103.a.a;
									var yOff = _v103.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v104 = _v3.a;
									var _v105 = _v104.a;
									var a = _v104.b.a;
									var _v106 = _v3.b;
									var _v107 = _v106.a;
									var b = _v106.b.a;
									var _v108 = _v3.c;
									var xOff = _v108.a.a;
									var _v109 = _v108.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v92 = _v3.a;
									var _v93 = _v92.a;
									var a = _v92.b.a;
									var _v94 = _v3.b;
									var _v95 = _v94.a;
									var b = _v94.b.a;
									var _v96 = _v3.c;
									var _v97 = _v96.a;
									var _v98 = _v96.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v110 = _v3.a;
									var _v111 = _v110.a;
									var a = _v110.b.a;
									var _v112 = _v3.b;
									var _v113 = _v112.a;
									var b = _v112.b.a;
									var _v114 = _v3.c;
									var _v115 = _v114.a;
									var yOff = _v114.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v32 = _v3.a;
							var _v33 = _v32.a;
							var c = _v32.b.a;
							var _v34 = _v3.b;
							var a = _v34.a.a;
							var b = _v34.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v123 = _v3.a;
									var _v124 = _v123.a;
									var a = _v123.b.a;
									var _v125 = _v3.b;
									var b = _v125.a.a;
									var _v126 = _v125.b;
									var _v127 = _v3.c;
									var xOff = _v127.a.a;
									var yOff = _v127.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v128 = _v3.a;
									var _v129 = _v128.a;
									var a = _v128.b.a;
									var _v130 = _v3.b;
									var b = _v130.a.a;
									var _v131 = _v130.b;
									var _v132 = _v3.c;
									var xOff = _v132.a.a;
									var _v133 = _v132.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v116 = _v3.a;
									var _v117 = _v116.a;
									var a = _v116.b.a;
									var _v118 = _v3.b;
									var b = _v118.a.a;
									var _v119 = _v118.b;
									var _v120 = _v3.c;
									var _v121 = _v120.a;
									var _v122 = _v120.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v134 = _v3.a;
									var _v135 = _v134.a;
									var a = _v134.b.a;
									var _v136 = _v3.b;
									var b = _v136.a.a;
									var _v137 = _v136.b;
									var _v138 = _v3.c;
									var _v139 = _v138.a;
									var yOff = _v138.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				} else {
					if (_v3.b.a.$ === 'Just') {
						if (_v3.b.b.$ === 'Just') {
							var _v18 = _v3.a;
							var _v19 = _v18.a;
							var _v20 = _v18.b;
							var _v21 = _v3.b;
							var a = _v21.a.a;
							var b = _v21.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.min),
								_Utils_Tuple2(a, b));
						} else {
							var _v22 = _v3.a;
							var _v23 = _v22.a;
							var _v24 = _v22.b;
							var _v25 = _v3.b;
							var a = _v25.a.a;
							var _v26 = _v25.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(a, a));
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v27 = _v3.a;
							var _v28 = _v27.a;
							var _v29 = _v27.b;
							var _v30 = _v3.b;
							var _v31 = _v30.a;
							var b = _v30.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(b, b));
						} else {
							var _v140 = _v3.a;
							var _v141 = _v140.a;
							var _v142 = _v140.b;
							var _v143 = _v3.b;
							var _v144 = _v143.a;
							var _v145 = _v143.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						}
					}
				}
			}
		}();
		var _v1 = _v0.a;
		var x1 = _v1.a;
		var x2 = _v1.b;
		var _v2 = _v0.b;
		var y1 = _v2.a;
		var y2 = _v2.b;
		var x1_ = x1 + A2($terezka$elm_charts$Internal$Svg$lengthInCartesianX, plane, config.xOff);
		var x2_ = x2 + A2($terezka$elm_charts$Internal$Svg$lengthInCartesianX, plane, config.xOff);
		var y1_ = y1 - A2($terezka$elm_charts$Internal$Svg$lengthInCartesianY, plane, config.yOff);
		var y2_ = y2 - A2($terezka$elm_charts$Internal$Svg$lengthInCartesianY, plane, config.yOff);
		var _v146 = (config.tickLength > 0) ? _Utils_Tuple2(
			A2(
				$terezka$elm_charts$Internal$Svg$lengthInCartesianX,
				plane,
				$elm$core$Basics$cos(angle) * config.tickLength),
			A2(
				$terezka$elm_charts$Internal$Svg$lengthInCartesianY,
				plane,
				$elm$core$Basics$sin(angle) * config.tickLength)) : _Utils_Tuple2(0, 0);
		var tickOffsetX = _v146.a;
		var tickOffsetY = _v146.b;
		var cmds = config.flip ? _Utils_ap(
			(config.tickLength > 0) ? _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x2_ + tickOffsetX, y2_ + tickOffsetY),
					A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
				]) : _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x2_, y2_)
				]),
			_Utils_ap(
				config._break ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y1_),
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
					]) : _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
					]),
				(config.tickLength > 0) ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_ + tickOffsetX, y1_ + tickOffsetY)
					]) : _List_Nil)) : _Utils_ap(
			(config.tickLength > 0) ? _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x1_ + tickOffsetX, y1_ + tickOffsetY),
					A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
				]) : _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x1_, y1_)
				]),
			_Utils_ap(
				config._break ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y2_),
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
					]) : _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
					]),
				(config.tickLength > 0) ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_ + tickOffsetX, y2_ + tickOffsetY)
					]) : _List_Nil));
		return A4(
			$terezka$elm_charts$Internal$Svg$withAttrs,
			config.attrs,
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$class('elm-charts__line'),
					$elm$svg$Svg$Attributes$fill('transparent'),
					$elm$svg$Svg$Attributes$stroke(config.color),
					$elm$svg$Svg$Attributes$strokeWidth(
					$elm$core$String$fromFloat(config.width)),
					$elm$svg$Svg$Attributes$strokeOpacity(
					$elm$core$String$fromFloat(config.opacity)),
					$elm$svg$Svg$Attributes$strokeDasharray(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, $elm$core$String$fromFloat, config.dashed))),
					$elm$svg$Svg$Attributes$d(
					A2($terezka$elm_charts$Internal$Commands$description, plane, cmds)),
					config.hideOverflow ? $terezka$elm_charts$Internal$Svg$withinChartArea(plane) : $elm$svg$Svg$Attributes$class('')
				]),
			_List_Nil);
	});
var $terezka$elm_charts$Chart$Svg$line = F2(
	function (plane, edits) {
		return A2(
			$terezka$elm_charts$Internal$Svg$line,
			plane,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultLine));
	});
var $terezka$elm_charts$Chart$Attributes$size = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{size: v});
	});
var $terezka$elm_charts$Chart$Attributes$width = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{width: v});
	});
var $terezka$elm_charts$Chart$Attributes$x1 = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				x1: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$elm_charts$Chart$Attributes$y1 = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				y1: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$elm_charts$Chart$grid = function (edits) {
	var config = A2(
		$terezka$elm_charts$Internal$Helpers$apply,
		edits,
		{color: '', dashed: _List_Nil, dotGrid: false, width: 0});
	var width = (!config.width) ? (config.dotGrid ? 0.5 : 1) : config.width;
	var color = $elm$core$String$isEmpty(config.color) ? (config.dotGrid ? $terezka$elm_charts$Internal$Helpers$darkGray : $terezka$elm_charts$Internal$Helpers$gray) : config.color;
	var toDot = F4(
		function (vs, p, x, y) {
			return (A2($elm$core$List$member, x, vs.xAxis) || A2($elm$core$List$member, y, vs.yAxis)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A5(
					$terezka$elm_charts$Chart$Svg$dot,
					p,
					function ($) {
						return $.x;
					},
					function ($) {
						return $.y;
					},
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$size(width),
							$terezka$elm_charts$Chart$Attributes$circle
						]),
					{x: x, y: y}));
		});
	var toXGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.xAxis) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$elm_charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$width(width),
							$terezka$elm_charts$Chart$Attributes$x1(v),
							$terezka$elm_charts$Chart$Attributes$dashed(config.dashed)
						])));
		});
	var toYGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.yAxis) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$elm_charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$width(width),
							$terezka$elm_charts$Chart$Attributes$y1(v),
							$terezka$elm_charts$Chart$Attributes$dashed(config.dashed)
						])));
		});
	return $terezka$elm_charts$Chart$GridElement(
		F2(
			function (p, vs) {
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__grid')
						]),
					config.dotGrid ? A2(
						$elm$core$List$concatMap,
						function (x) {
							return A2(
								$elm$core$List$filterMap,
								A3(toDot, vs, p, x),
								vs.ys);
						},
						vs.xs) : _List_fromArray(
						[
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__x-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toXGrid, vs, p),
								vs.xs)),
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__y-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toYGrid, vs, p),
								vs.ys))
						]));
			}));
};
var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var $terezka$elm_charts$Chart$viewElements = F6(
	function (config, plane, tickValues, allItems, allLegends, elements) {
		var viewOne = F2(
			function (el, _v0) {
				var before = _v0.a;
				var chart_ = _v0.b;
				var after = _v0.c;
				switch (el.$) {
					case 'Indexed':
						return _Utils_Tuple3(before, chart_, after);
					case 'SeriesElement':
						var view = el.d;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'BarsElement':
						var view = el.e;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'CustomElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'AxisElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'TicksElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'TickElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'LabelsElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'LabelElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'GridElement':
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(view, plane, tickValues),
								chart_),
							after);
					case 'SubElements':
						var func = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							A2(func, plane, allItems));
					case 'ListOfElements':
						var els = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							els);
					case 'SvgElement':
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					default:
						var view = el.a;
						return _Utils_Tuple3(
							($elm$core$List$length(chart_) > 0) ? A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								before) : before,
							chart_,
							($elm$core$List$length(chart_) > 0) ? after : A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								after));
				}
			});
		return A3(
			$elm$core$List$foldr,
			viewOne,
			_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$elm_charts$Chart$chart = F2(
	function (edits, unindexedElements) {
		var indexedElements = function () {
			var toIndexedEl = F2(
				function (el, _v4) {
					var acc = _v4.a;
					var index = _v4.b;
					switch (el.$) {
						case 'Indexed':
							var toElAndIndex = el.a;
							var _v6 = toElAndIndex(index);
							var newEl = _v6.a;
							var newIndex = _v6.b;
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[newEl])),
								newIndex);
						case 'ListOfElements':
							var els = el.a;
							return A3(
								$elm$core$List$foldl,
								toIndexedEl,
								_Utils_Tuple2(acc, index),
								els);
						default:
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[el])),
								index);
					}
				});
			return A3(
				$elm$core$List$foldl,
				toIndexedEl,
				_Utils_Tuple2(_List_Nil, 0),
				unindexedElements).a;
		}();
		var elements = function () {
			var isGrid = function (el) {
				if (el.$ === 'GridElement') {
					return true;
				} else {
					return false;
				}
			};
			return A2($elm$core$List$any, isGrid, indexedElements) ? indexedElements : A2(
				$elm$core$List$cons,
				$terezka$elm_charts$Chart$grid(_List_Nil),
				indexedElements);
		}();
		var legends_ = $terezka$elm_charts$Chart$getLegends(elements);
		var config = A2(
			$terezka$elm_charts$Internal$Helpers$apply,
			edits,
			{
				attrs: _List_fromArray(
					[
						$elm$svg$Svg$Attributes$style('overflow: visible;')
					]),
				domain: _List_Nil,
				events: _List_Nil,
				height: 300,
				htmlAttrs: _List_Nil,
				margin: {bottom: 0, left: 0, right: 0, top: 0},
				padding: {bottom: 0, left: 0, right: 0, top: 0},
				range: _List_Nil,
				responsive: true,
				width: 300
			});
		var plane = A2($terezka$elm_charts$Chart$definePlane, config, elements);
		var items = A2($terezka$elm_charts$Chart$getItems, plane, elements);
		var toEvent = function (_v2) {
			var event_ = _v2.a;
			var _v1 = event_.decoder;
			var decoder = _v1.a;
			return A2(
				$terezka$elm_charts$Internal$Svg$Event,
				event_.name,
				decoder(items));
		};
		var tickValues = A3($terezka$elm_charts$Chart$getTickValues, plane, items, elements);
		var _v0 = A6($terezka$elm_charts$Chart$viewElements, config, plane, tickValues, items, legends_, elements);
		var beforeEls = _v0.a;
		var chartEls = _v0.b;
		var afterEls = _v0.c;
		return A5(
			$terezka$elm_charts$Internal$Svg$container,
			plane,
			{
				attrs: config.attrs,
				events: A2($elm$core$List$map, toEvent, config.events),
				htmlAttrs: config.htmlAttrs,
				responsive: config.responsive
			},
			beforeEls,
			chartEls,
			afterEls);
	});
var $terezka$elm_charts$Internal$Helpers$darkBlue = '#7345f6';
var $terezka$elm_charts$Chart$Attributes$darkBlue = $terezka$elm_charts$Internal$Helpers$darkBlue;
var $terezka$elm_charts$Chart$Attributes$domain = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{domain: v});
	});
var $terezka$elm_charts$Internal$Events$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $terezka$elm_charts$Internal$Events$getCoords = $terezka$elm_charts$Internal$Events$Decoder(
	F3(
		function (_v0, plane, searched) {
			return searched;
		}));
var $terezka$elm_charts$Chart$Events$getCoords = $terezka$elm_charts$Internal$Events$getCoords;
var $terezka$elm_charts$Internal$Svg$Gradient = function (a) {
	return {$: 'Gradient', a: a};
};
var $terezka$elm_charts$Chart$Attributes$gradient = F2(
	function (colors, config) {
		return _Utils_update(
			config,
			{
				design: $elm$core$Maybe$Just(
					$terezka$elm_charts$Internal$Svg$Gradient(colors)),
				opacity: (!config.opacity) ? 1 : config.opacity
			});
	});
var $author$project$DomainModel$gradientFromNode = function (treeNode) {
	return 100.0 * A2(
		$ianmackenzie$elm_units$Quantity$ratio,
		A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(
				$author$project$DomainModel$startPoint(treeNode)),
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(
				$author$project$DomainModel$endPoint(treeNode))),
		$author$project$DomainModel$trueLength(treeNode));
};
var $terezka$elm_charts$Internal$Helpers$green = '#71c614';
var $terezka$elm_charts$Chart$Attributes$green = $terezka$elm_charts$Internal$Helpers$green;
var $terezka$elm_charts$Chart$Attributes$height = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{height: v});
	});
var $terezka$elm_charts$Chart$Attributes$htmlAttrs = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{htmlAttrs: v});
	});
var $terezka$elm_charts$Internal$Svg$Linear = {$: 'Linear'};
var $terezka$elm_charts$Chart$Attributes$linear = function (config) {
	return _Utils_update(
		config,
		{
			method: $elm$core$Maybe$Just($terezka$elm_charts$Internal$Svg$Linear)
		});
};
var $terezka$elm_charts$Internal$Property$Property = function (a) {
	return {$: 'Property', a: a};
};
var $terezka$elm_charts$Internal$Property$property = F3(
	function (value, inter, attrs) {
		return $terezka$elm_charts$Internal$Property$Property(
			{
				attrs: attrs,
				extra: F5(
					function (_v0, _v1, _v2, _v3, _v4) {
						return _List_Nil;
					}),
				format: A2(
					$elm$core$Basics$composeR,
					value,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map($elm$core$String$fromFloat),
						$elm$core$Maybe$withDefault('N/A'))),
				inter: inter,
				meta: $elm$core$Maybe$Nothing,
				value: value,
				visual: value
			});
	});
var $terezka$elm_charts$Chart$interpolated = F2(
	function (y, inter) {
		return A2(
			$terezka$elm_charts$Internal$Property$property,
			A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
			_Utils_ap(
				_List_fromArray(
					[$terezka$elm_charts$Chart$Attributes$linear]),
				inter));
	});
var $terezka$elm_charts$Chart$Attributes$likeData = function (b) {
	return _Utils_update(
		b,
		{max: b.dataMax, min: b.dataMin});
};
var $terezka$elm_charts$Chart$SvgElement = function (a) {
	return {$: 'SvgElement', a: a};
};
var $terezka$elm_charts$Chart$line = function (attrs) {
	return $terezka$elm_charts$Chart$SvgElement(
		function (p) {
			return A2($terezka$elm_charts$Chart$Svg$line, p, attrs);
		});
};
var $terezka$elm_charts$Chart$Attributes$margin = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{margin: v});
	});
var $terezka$elm_charts$Internal$Events$map = F2(
	function (f, _v0) {
		var a = _v0.a;
		return $terezka$elm_charts$Internal$Events$Decoder(
			F3(
				function (ps, s, p) {
					return f(
						A3(a, ps, s, p));
				}));
	});
var $terezka$elm_charts$Chart$Events$map = $terezka$elm_charts$Internal$Events$map;
var $terezka$elm_charts$Internal$Events$Event = function (a) {
	return {$: 'Event', a: a};
};
var $terezka$elm_charts$Internal$Events$on = F3(
	function (name, decoder, config) {
		return _Utils_update(
			config,
			{
				events: A2(
					$elm$core$List$cons,
					$terezka$elm_charts$Internal$Events$Event(
						{decoder: decoder, name: name}),
					config.events)
			});
	});
var $terezka$elm_charts$Chart$Events$on = $terezka$elm_charts$Internal$Events$on;
var $terezka$elm_charts$Chart$Events$onClick = F2(
	function (onMsg, decoder) {
		return A2(
			$terezka$elm_charts$Chart$Events$on,
			'click',
			A2($terezka$elm_charts$Chart$Events$map, onMsg, decoder));
	});
var $terezka$elm_charts$Chart$Attributes$opacity = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{opacity: v});
	});
var $terezka$elm_charts$Chart$Attributes$padding = F2(
	function (value, config) {
		return _Utils_update(
			config,
			{padding: value});
	});
var $terezka$elm_charts$Chart$Attributes$range = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{range: v});
	});
var $terezka$elm_charts$Internal$Helpers$red = '#F5325B';
var $terezka$elm_charts$Chart$Attributes$red = $terezka$elm_charts$Internal$Helpers$red;
var $terezka$elm_charts$Chart$Indexed = function (a) {
	return {$: 'Indexed', a: a};
};
var $terezka$elm_charts$Chart$SeriesElement = F4(
	function (a, b, c, d) {
		return {$: 'SeriesElement', a: a, b: b, c: c, d: d};
	});
var $terezka$elm_charts$Internal$Item$Rendered = function (a) {
	return {$: 'Rendered', a: a};
};
var $terezka$elm_charts$Internal$Item$toHtml = function (_v0) {
	var item = _v0.a;
	return item.toHtml(item.config);
};
var $terezka$elm_charts$Internal$Item$toSvg = F2(
	function (plane, _v0) {
		var item = _v0.a;
		return A3(
			item.toSvg,
			plane,
			item.config,
			A2(item.toPosition, plane, item.config));
	});
var $terezka$elm_charts$Internal$Item$generalize = F2(
	function (toAny, _v0) {
		var item = _v0.a;
		return $terezka$elm_charts$Internal$Item$Rendered(
			{
				config: {
					product: toAny(item.config.product),
					toAny: $elm$core$Basics$identity,
					tooltipInfo: item.config.tooltipInfo,
					values: item.config.values
				},
				toHtml: function (c) {
					return $terezka$elm_charts$Internal$Item$toHtml(
						$terezka$elm_charts$Internal$Item$Rendered(item));
				},
				toLimits: function (_v1) {
					return item.toLimits(item.config);
				},
				toPosition: F2(
					function (plane, _v2) {
						return A2(item.toPosition, plane, item.config);
					}),
				toSvg: F3(
					function (plane, _v3, _v4) {
						return A2(
							$terezka$elm_charts$Internal$Item$toSvg,
							plane,
							$terezka$elm_charts$Internal$Item$Rendered(item));
					})
			});
	});
var $terezka$elm_charts$Internal$Many$getMembers = function (_v0) {
	var group_ = _v0.a;
	return function (_v1) {
		var x = _v1.a;
		var xs = _v1.b;
		return A2($elm$core$List$cons, x, xs);
	}(group_.config.items);
};
var $terezka$elm_charts$Internal$Many$getGenerals = function (group_) {
	var generalize = function (_v0) {
		var item = _v0.a;
		return A2(
			$terezka$elm_charts$Internal$Item$generalize,
			item.config.toAny,
			$terezka$elm_charts$Internal$Item$Rendered(item));
	};
	return A2(
		$elm$core$List$map,
		generalize,
		$terezka$elm_charts$Internal$Many$getMembers(group_));
};
var $terezka$elm_charts$Internal$Item$getLimits = function (_v0) {
	var item = _v0.a;
	return item.toLimits(item.config);
};
var $terezka$elm_charts$Internal$Item$map = F2(
	function (func, _v0) {
		var item = _v0.a;
		return $terezka$elm_charts$Internal$Item$Rendered(
			{
				config: {
					product: item.config.product,
					toAny: item.config.toAny,
					tooltipInfo: item.config.tooltipInfo,
					values: {
						datum: func(item.config.values.datum),
						isReal: item.config.values.isReal,
						x1: item.config.values.x1,
						x2: item.config.values.x2,
						y: item.config.values.y
					}
				},
				toHtml: function (_v1) {
					return $terezka$elm_charts$Internal$Item$toHtml(
						$terezka$elm_charts$Internal$Item$Rendered(item));
				},
				toLimits: function (_v2) {
					return item.toLimits(item.config);
				},
				toPosition: F2(
					function (plane, _v3) {
						return A2(item.toPosition, plane, item.config);
					}),
				toSvg: F3(
					function (plane, _v4, _v5) {
						return A2(
							$terezka$elm_charts$Internal$Item$toSvg,
							plane,
							$terezka$elm_charts$Internal$Item$Rendered(item));
					})
			});
	});
var $terezka$elm_charts$Internal$Property$toConfigs = function (prop) {
	if (prop.$ === 'Property') {
		var config = prop.a;
		return _List_fromArray(
			[config]);
	} else {
		var configs = prop.a;
		return configs;
	}
};
var $terezka$elm_charts$Internal$Legend$LineLegend = F3(
	function (a, b, c) {
		return {$: 'LineLegend', a: a, b: b, c: c};
	});
var $terezka$elm_charts$Chart$Attributes$border = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{border: v});
	});
var $terezka$elm_charts$Internal$Svg$defaultInterpolation = {attrs: _List_Nil, color: $terezka$elm_charts$Internal$Helpers$pink, dashed: _List_Nil, design: $elm$core$Maybe$Nothing, method: $elm$core$Maybe$Nothing, opacity: 0, width: 1};
var $terezka$elm_charts$Internal$Helpers$blue = '#12A5ED';
var $terezka$elm_charts$Internal$Helpers$brown = '#871c1c';
var $terezka$elm_charts$Internal$Helpers$moss = '#92b42c';
var $terezka$elm_charts$Internal$Helpers$orange = '#FF8400';
var $terezka$elm_charts$Internal$Helpers$purple = '#7b4dff';
var $terezka$elm_charts$Internal$Helpers$toDefault = F3(
	function (_default, items, index) {
		var dict = $elm$core$Dict$fromList(
			A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, items));
		var numOfItems = $elm$core$Dict$size(dict);
		var itemIndex = index % numOfItems;
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A2($elm$core$Dict$get, itemIndex, dict));
	});
var $terezka$elm_charts$Internal$Helpers$turquoise = '#22d2ba';
var $terezka$elm_charts$Internal$Helpers$yellow = '#FFCA00';
var $terezka$elm_charts$Internal$Helpers$toDefaultColor = A2(
	$terezka$elm_charts$Internal$Helpers$toDefault,
	$terezka$elm_charts$Internal$Helpers$pink,
	_List_fromArray(
		[$terezka$elm_charts$Internal$Helpers$purple, $terezka$elm_charts$Internal$Helpers$pink, $terezka$elm_charts$Internal$Helpers$blue, $terezka$elm_charts$Internal$Helpers$green, $terezka$elm_charts$Internal$Helpers$red, $terezka$elm_charts$Internal$Helpers$yellow, $terezka$elm_charts$Internal$Helpers$turquoise, $terezka$elm_charts$Internal$Helpers$orange, $terezka$elm_charts$Internal$Helpers$moss, $terezka$elm_charts$Internal$Helpers$brown]));
var $terezka$elm_charts$Internal$Legend$toDotLegends = F2(
	function (elIndex, properties) {
		var toInterConfig = function (attrs) {
			return A2($terezka$elm_charts$Internal$Helpers$apply, attrs, $terezka$elm_charts$Internal$Svg$defaultInterpolation);
		};
		var toDotLegend = F3(
			function (props, prop, colorIndex) {
				var defaultOpacity = ($elm$core$List$length(props) > 1) ? 0.4 : 0;
				var interAttr = _Utils_ap(
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(
							$terezka$elm_charts$Internal$Helpers$toDefaultColor(colorIndex)),
							$terezka$elm_charts$Chart$Attributes$opacity(defaultOpacity)
						]),
					prop.inter);
				var interConfig = toInterConfig(interAttr);
				var defaultName = 'Property #' + $elm$core$String$fromInt(colorIndex + 1);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$color(interConfig.color),
						$terezka$elm_charts$Chart$Attributes$border(interConfig.color),
						_Utils_eq(interConfig.method, $elm$core$Maybe$Nothing) ? $terezka$elm_charts$Chart$Attributes$circle : $elm$core$Basics$identity
					]);
				var dotAttrs = _Utils_ap(defaultAttrs, prop.attrs);
				return A3(
					$terezka$elm_charts$Internal$Legend$LineLegend,
					A2($elm$core$Maybe$withDefault, defaultName, prop.meta),
					interAttr,
					dotAttrs);
			});
		return A2(
			$elm$core$List$indexedMap,
			F2(
				function (propIndex, f) {
					return f(elIndex + propIndex);
				}),
			A2(
				$elm$core$List$concatMap,
				function (ps) {
					return A2(
						$elm$core$List$map,
						toDotLegend(ps),
						ps);
				},
				A2($elm$core$List$map, $terezka$elm_charts$Internal$Property$toConfigs, properties)));
	});
var $terezka$elm_charts$Internal$Item$Dot = function (a) {
	return {$: 'Dot', a: a};
};
var $elm$svg$Svg$Attributes$fillRule = _VirtualDom_attribute('fill-rule');
var $terezka$elm_charts$Internal$Interpolation$linear = $elm$core$List$map(
	$elm$core$List$map(
		function (_v0) {
			var x = _v0.x;
			var y = _v0.y;
			return A2($terezka$elm_charts$Internal$Commands$Line, x, y);
		}));
var $terezka$elm_charts$Internal$Interpolation$First = {$: 'First'};
var $terezka$elm_charts$Internal$Interpolation$Previous = function (a) {
	return {$: 'Previous', a: a};
};
var $terezka$elm_charts$Internal$Interpolation$monotoneCurve = F4(
	function (point0, point1, tangent0, tangent1) {
		var dx = (point1.x - point0.x) / 3;
		return A6($terezka$elm_charts$Internal$Commands$CubicBeziers, point0.x + dx, point0.y + (dx * tangent0), point1.x - dx, point1.y - (dx * tangent1), point1.x, point1.y);
	});
var $terezka$elm_charts$Internal$Interpolation$slope2 = F3(
	function (point0, point1, t) {
		var h = point1.x - point0.x;
		return (!(!h)) ? ((((3 * (point1.y - point0.y)) / h) - t) / 2) : t;
	});
var $terezka$elm_charts$Internal$Interpolation$sign = function (x) {
	return (x < 0) ? (-1) : 1;
};
var $terezka$elm_charts$Internal$Interpolation$toH = F2(
	function (h0, h1) {
		return (!h0) ? ((h1 < 0) ? (0 * (-1)) : h1) : h0;
	});
var $terezka$elm_charts$Internal$Interpolation$slope3 = F3(
	function (point0, point1, point2) {
		var h1 = point2.x - point1.x;
		var h0 = point1.x - point0.x;
		var s0h = A2($terezka$elm_charts$Internal$Interpolation$toH, h0, h1);
		var s0 = (point1.y - point0.y) / s0h;
		var s1h = A2($terezka$elm_charts$Internal$Interpolation$toH, h1, h0);
		var s1 = (point2.y - point1.y) / s1h;
		var p = ((s0 * h1) + (s1 * h0)) / (h0 + h1);
		var slope = ($terezka$elm_charts$Internal$Interpolation$sign(s0) + $terezka$elm_charts$Internal$Interpolation$sign(s1)) * A2(
			$elm$core$Basics$min,
			A2(
				$elm$core$Basics$min,
				$elm$core$Basics$abs(s0),
				$elm$core$Basics$abs(s1)),
			0.5 * $elm$core$Basics$abs(p));
		return $elm$core$Basics$isNaN(slope) ? 0 : slope;
	});
var $terezka$elm_charts$Internal$Interpolation$monotonePart = F2(
	function (points, _v0) {
		var tangent = _v0.a;
		var commands = _v0.b;
		var _v1 = _Utils_Tuple2(tangent, points);
		_v1$4:
		while (true) {
			if (_v1.a.$ === 'First') {
				if (_v1.b.b && _v1.b.b.b) {
					if (_v1.b.b.b.b) {
						var _v2 = _v1.a;
						var _v3 = _v1.b;
						var p0 = _v3.a;
						var _v4 = _v3.b;
						var p1 = _v4.a;
						var _v5 = _v4.b;
						var p2 = _v5.a;
						var rest = _v5.b;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p2);
						var t0 = A3($terezka$elm_charts$Internal$Interpolation$slope2, p0, p1, t1);
						return A2(
							$terezka$elm_charts$Internal$Interpolation$monotonePart,
							A2(
								$elm$core$List$cons,
								p1,
								A2($elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								$terezka$elm_charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var _v9 = _v1.a;
						var _v10 = _v1.b;
						var p0 = _v10.a;
						var _v11 = _v10.b;
						var p1 = _v11.a;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							$terezka$elm_charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t1, t1),
										A2($terezka$elm_charts$Internal$Commands$Line, p1.x, p1.y)
									])));
					}
				} else {
					break _v1$4;
				}
			} else {
				if (_v1.b.b && _v1.b.b.b) {
					if (_v1.b.b.b.b) {
						var t0 = _v1.a.a;
						var _v6 = _v1.b;
						var p0 = _v6.a;
						var _v7 = _v6.b;
						var p1 = _v7.a;
						var _v8 = _v7.b;
						var p2 = _v8.a;
						var rest = _v8.b;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p2);
						return A2(
							$terezka$elm_charts$Internal$Interpolation$monotonePart,
							A2(
								$elm$core$List$cons,
								p1,
								A2($elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								$terezka$elm_charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var t0 = _v1.a.a;
						var _v12 = _v1.b;
						var p0 = _v12.a;
						var _v13 = _v12.b;
						var p1 = _v13.a;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							$terezka$elm_charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1),
										A2($terezka$elm_charts$Internal$Commands$Line, p1.x, p1.y)
									])));
					}
				} else {
					break _v1$4;
				}
			}
		}
		return _Utils_Tuple2(tangent, commands);
	});
var $terezka$elm_charts$Internal$Interpolation$monotoneSection = F2(
	function (points, _v0) {
		var tangent = _v0.a;
		var acc = _v0.b;
		var _v1 = function () {
			if (points.b) {
				var p0 = points.a;
				var rest = points.b;
				return A2(
					$terezka$elm_charts$Internal$Interpolation$monotonePart,
					A2($elm$core$List$cons, p0, rest),
					_Utils_Tuple2(
						tangent,
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Line, p0.x, p0.y)
							])));
			} else {
				return _Utils_Tuple2(tangent, _List_Nil);
			}
		}();
		var t0 = _v1.a;
		var commands = _v1.b;
		return _Utils_Tuple2(
			t0,
			A2($elm$core$List$cons, commands, acc));
	});
var $terezka$elm_charts$Internal$Interpolation$monotone = function (sections) {
	return A3(
		$elm$core$List$foldr,
		$terezka$elm_charts$Internal$Interpolation$monotoneSection,
		_Utils_Tuple2($terezka$elm_charts$Internal$Interpolation$First, _List_Nil),
		sections).b;
};
var $terezka$elm_charts$Internal$Interpolation$Point = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var $terezka$elm_charts$Internal$Interpolation$after = F2(
	function (a, b) {
		return _List_fromArray(
			[
				a,
				A2($terezka$elm_charts$Internal$Interpolation$Point, b.x, a.y),
				b
			]);
	});
var $terezka$elm_charts$Internal$Interpolation$stepped = function (sections) {
	var expand = F2(
		function (result, section) {
			expand:
			while (true) {
				if (section.b) {
					if (section.b.b) {
						var a = section.a;
						var _v1 = section.b;
						var b = _v1.a;
						var rest = _v1.b;
						var $temp$result = _Utils_ap(
							result,
							A2($terezka$elm_charts$Internal$Interpolation$after, a, b)),
							$temp$section = A2($elm$core$List$cons, b, rest);
						result = $temp$result;
						section = $temp$section;
						continue expand;
					} else {
						var last = section.a;
						return result;
					}
				} else {
					return result;
				}
			}
		});
	return A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			expand(_List_Nil),
			$elm$core$List$map(
				function (_v2) {
					var x = _v2.x;
					var y = _v2.y;
					return A2($terezka$elm_charts$Internal$Commands$Line, x, y);
				})),
		sections);
};
var $terezka$elm_charts$Internal$Svg$last = function (list) {
	return $elm$core$List$head(
		A2(
			$elm$core$List$drop,
			$elm$core$List$length(list) - 1,
			list));
};
var $terezka$elm_charts$Internal$Svg$withBorder = F2(
	function (stuff, func) {
		if (stuff.b) {
			var first = stuff.a;
			var rest = stuff.b;
			return $elm$core$Maybe$Just(
				A2(
					func,
					first,
					A2(
						$elm$core$Maybe$withDefault,
						first,
						$terezka$elm_charts$Internal$Svg$last(rest))));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $terezka$elm_charts$Internal$Svg$toCommands = F4(
	function (method, toX, toY, data) {
		var toSets = F2(
			function (ps, cmds) {
				return A2(
					$terezka$elm_charts$Internal$Svg$withBorder,
					ps,
					F2(
						function (first, last_) {
							return _Utils_Tuple3(first, cmds, last_);
						}));
			});
		var fold = F2(
			function (datum_, acc) {
				var _v1 = toY(datum_);
				if (_v1.$ === 'Just') {
					var y_ = _v1.a;
					if (acc.b) {
						var latest = acc.a;
						var rest = acc.b;
						return A2(
							$elm$core$List$cons,
							_Utils_ap(
								latest,
								_List_fromArray(
									[
										{
										x: toX(datum_),
										y: y_
									}
									])),
							rest);
					} else {
						return A2(
							$elm$core$List$cons,
							_List_fromArray(
								[
									{
									x: toX(datum_),
									y: y_
								}
								]),
							acc);
					}
				} else {
					return A2($elm$core$List$cons, _List_Nil, acc);
				}
			});
		var points = $elm$core$List$reverse(
			A3($elm$core$List$foldl, fold, _List_Nil, data));
		var commands = function () {
			switch (method.$) {
				case 'Linear':
					return $terezka$elm_charts$Internal$Interpolation$linear(points);
				case 'Monotone':
					return $terezka$elm_charts$Internal$Interpolation$monotone(points);
				default:
					return $terezka$elm_charts$Internal$Interpolation$stepped(points);
			}
		}();
		return A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A3($elm$core$List$map2, toSets, points, commands));
	});
var $terezka$elm_charts$Internal$Svg$apply = F2(
	function (funcs, _default) {
		var apply_ = F2(
			function (f, a) {
				return f(a);
			});
		return A3($elm$core$List$foldl, apply_, _default, funcs);
	});
var $elm$svg$Svg$linearGradient = $elm$svg$Svg$trustedNode('linearGradient');
var $elm$svg$Svg$Attributes$offset = _VirtualDom_attribute('offset');
var $elm$svg$Svg$pattern = $elm$svg$Svg$trustedNode('pattern');
var $elm$svg$Svg$Attributes$patternTransform = _VirtualDom_attribute('patternTransform');
var $elm$svg$Svg$Attributes$patternUnits = _VirtualDom_attribute('patternUnits');
var $elm$svg$Svg$stop = $elm$svg$Svg$trustedNode('stop');
var $elm$svg$Svg$Attributes$stopColor = _VirtualDom_attribute('stop-color');
var $terezka$elm_charts$Internal$Svg$toPattern = F2(
	function (defaultColor, design) {
		var toPatternId = function (props) {
			return A3(
				$elm$core$String$replace,
				'(',
				'-',
				A3(
					$elm$core$String$replace,
					')',
					'-',
					A3(
						$elm$core$String$replace,
						'.',
						'-',
						A3(
							$elm$core$String$replace,
							',',
							'-',
							A3(
								$elm$core$String$replace,
								' ',
								'-',
								A2(
									$elm$core$String$join,
									'-',
									_Utils_ap(
										_List_fromArray(
											[
												'elm-charts__pattern',
												function () {
												switch (design.$) {
													case 'Striped':
														return 'striped';
													case 'Dotted':
														return 'dotted';
													default:
														return 'gradient';
												}
											}()
											]),
										props)))))));
		};
		var toPatternDefs = F4(
			function (id, spacing, rotate, inside) {
				return A2(
					$elm$svg$Svg$defs,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$pattern,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$id(id),
									$elm$svg$Svg$Attributes$patternUnits('userSpaceOnUse'),
									$elm$svg$Svg$Attributes$width(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$height(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$patternTransform(
									'rotate(' + ($elm$core$String$fromFloat(rotate) + ')'))
								]),
							_List_fromArray(
								[inside]))
						]));
			});
		var _v0 = function () {
			switch (design.$) {
				case 'Striped':
					var edits = design.a;
					var config = A2(
						$terezka$elm_charts$Internal$Svg$apply,
						edits,
						{color: defaultColor, rotate: 45, spacing: 4, width: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.color,
								$elm$core$String$fromFloat(config.width),
								$elm$core$String$fromFloat(config.spacing),
								$elm$core$String$fromFloat(config.rotate)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.spacing,
							config.rotate,
							A2(
								$elm$svg$Svg$line,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$x1('0'),
										$elm$svg$Svg$Attributes$y('0'),
										$elm$svg$Svg$Attributes$x2('0'),
										$elm$svg$Svg$Attributes$y2(
										$elm$core$String$fromFloat(config.spacing)),
										$elm$svg$Svg$Attributes$stroke(config.color),
										$elm$svg$Svg$Attributes$strokeWidth(
										$elm$core$String$fromFloat(config.width))
									]),
								_List_Nil)),
						theId);
				case 'Dotted':
					var edits = design.a;
					var config = A2(
						$terezka$elm_charts$Internal$Svg$apply,
						edits,
						{color: defaultColor, rotate: 45, spacing: 4, width: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.color,
								$elm$core$String$fromFloat(config.width),
								$elm$core$String$fromFloat(config.spacing),
								$elm$core$String$fromFloat(config.rotate)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.spacing,
							config.rotate,
							A2(
								$elm$svg$Svg$circle,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$fill(config.color),
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(config.width / 3)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(config.width / 3)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(config.width / 3))
									]),
								_List_Nil)),
						theId);
				default:
					var edits = design.a;
					var colors = _Utils_eq(edits, _List_Nil) ? _List_fromArray(
						[defaultColor, 'white']) : edits;
					var theId = toPatternId(colors);
					var totalColors = $elm$core$List$length(colors);
					var toPercentage = function (i) {
						return (i * 100) / (totalColors - 1);
					};
					var toStop = F2(
						function (i, c) {
							return A2(
								$elm$svg$Svg$stop,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$offset(
										$elm$core$String$fromFloat(
											toPercentage(i)) + '%'),
										$elm$svg$Svg$Attributes$stopColor(c)
									]),
								_List_Nil);
						});
					return _Utils_Tuple2(
						A2(
							$elm$svg$Svg$defs,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$svg$Svg$linearGradient,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$id(theId),
											$elm$svg$Svg$Attributes$x1('0'),
											$elm$svg$Svg$Attributes$x2('0'),
											$elm$svg$Svg$Attributes$y1('0'),
											$elm$svg$Svg$Attributes$y2('1')
										]),
									A2($elm$core$List$indexedMap, toStop, colors))
								])),
						theId);
			}
		}();
		var patternDefs = _v0.a;
		var patternId = _v0.b;
		return _Utils_Tuple2(patternDefs, 'url(#' + (patternId + ')'));
	});
var $terezka$elm_charts$Internal$Svg$area = F6(
	function (plane, toX, toY2M, toY, config, data) {
		var _v0 = function () {
			var _v1 = config.design;
			if (_v1.$ === 'Nothing') {
				return _Utils_Tuple2(
					$elm$svg$Svg$text(''),
					config.color);
			} else {
				var design = _v1.a;
				return A2($terezka$elm_charts$Internal$Svg$toPattern, config.color, design);
			}
		}();
		var patternDefs = _v0.a;
		var fill = _v0.b;
		var view = function (cmds) {
			return A4(
				$terezka$elm_charts$Internal$Svg$withAttrs,
				config.attrs,
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__area-section'),
						$elm$svg$Svg$Attributes$fill(fill),
						$elm$svg$Svg$Attributes$fillOpacity(
						$elm$core$String$fromFloat(config.opacity)),
						$elm$svg$Svg$Attributes$strokeWidth('0'),
						$elm$svg$Svg$Attributes$fillRule('evenodd'),
						$elm$svg$Svg$Attributes$d(
						A2($terezka$elm_charts$Internal$Commands$description, plane, cmds)),
						$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
					]),
				_List_Nil);
		};
		var withUnder = F2(
			function (_v5, _v6) {
				var firstBottom = _v5.a;
				var cmdsBottom = _v5.b;
				var endBottom = _v5.c;
				var firstTop = _v6.a;
				var cmdsTop = _v6.b;
				var endTop = _v6.c;
				return view(
					_Utils_ap(
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Move, firstBottom.x, firstBottom.y),
								A2($terezka$elm_charts$Internal$Commands$Line, firstTop.x, firstTop.y)
							]),
						_Utils_ap(
							cmdsTop,
							_Utils_ap(
								_List_fromArray(
									[
										A2($terezka$elm_charts$Internal$Commands$Move, firstBottom.x, firstBottom.y)
									]),
								_Utils_ap(
									cmdsBottom,
									_List_fromArray(
										[
											A2($terezka$elm_charts$Internal$Commands$Line, endTop.x, endTop.y)
										]))))));
			});
		var withoutUnder = function (_v4) {
			var first = _v4.a;
			var cmds = _v4.b;
			var end = _v4.c;
			return view(
				_Utils_ap(
					_List_fromArray(
						[
							A2($terezka$elm_charts$Internal$Commands$Move, first.x, 0),
							A2($terezka$elm_charts$Internal$Commands$Line, first.x, first.y)
						]),
					_Utils_ap(
						cmds,
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Line, end.x, 0)
							]))));
		};
		if (config.opacity <= 0) {
			return $elm$svg$Svg$text('');
		} else {
			var _v2 = config.method;
			if (_v2.$ === 'Nothing') {
				return $elm$svg$Svg$text('');
			} else {
				var method = _v2.a;
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__area-sections')
						]),
					function () {
						if (toY2M.$ === 'Nothing') {
							return A2(
								$elm$core$List$cons,
								patternDefs,
								A2(
									$elm$core$List$map,
									withoutUnder,
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
						} else {
							var toY2 = toY2M.a;
							return A2(
								$elm$core$List$cons,
								patternDefs,
								A3(
									$elm$core$List$map2,
									withUnder,
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY2, data),
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
						}
					}());
			}
		}
	});
var $terezka$elm_charts$Internal$Item$getPosition = F2(
	function (plane, _v0) {
		var item = _v0.a;
		return A2(item.toPosition, plane, item.config);
	});
var $terezka$elm_charts$Internal$Svg$interpolation = F5(
	function (plane, toX, toY, config, data) {
		var view = function (_v1) {
			var first = _v1.a;
			var cmds = _v1.b;
			return A4(
				$terezka$elm_charts$Internal$Svg$withAttrs,
				config.attrs,
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__interpolation-section'),
						$elm$svg$Svg$Attributes$fill('transparent'),
						$elm$svg$Svg$Attributes$stroke(config.color),
						$elm$svg$Svg$Attributes$strokeDasharray(
						A2(
							$elm$core$String$join,
							' ',
							A2($elm$core$List$map, $elm$core$String$fromFloat, config.dashed))),
						$elm$svg$Svg$Attributes$strokeWidth(
						$elm$core$String$fromFloat(config.width)),
						$elm$svg$Svg$Attributes$d(
						A2(
							$terezka$elm_charts$Internal$Commands$description,
							plane,
							A2(
								$elm$core$List$cons,
								A2($terezka$elm_charts$Internal$Commands$Move, first.x, first.y),
								cmds))),
						$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
					]),
				_List_Nil);
		};
		var _v0 = config.method;
		if (_v0.$ === 'Nothing') {
			return $elm$svg$Svg$text('');
		} else {
			var method = _v0.a;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__interpolation-sections')
					]),
				A2(
					$elm$core$List$map,
					view,
					A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
		}
	});
var $elm$html$Html$table = _VirtualDom_node('table');
var $terezka$elm_charts$Internal$Produce$toDefaultName = F2(
	function (index, name) {
		return A2(
			$elm$core$Maybe$withDefault,
			'Property #' + $elm$core$String$fromInt(index + 1),
			name);
	});
var $terezka$elm_charts$Internal$Svg$toRadius = F2(
	function (size_, shape) {
		var area_ = (2 * $elm$core$Basics$pi) * size_;
		switch (shape.$) {
			case 'Circle':
				return $elm$core$Basics$sqrt(area_ / $elm$core$Basics$pi);
			case 'Triangle':
				var side = $elm$core$Basics$sqrt(
					(area_ * 4) / $elm$core$Basics$sqrt(3));
				return $elm$core$Basics$sqrt(3) * side;
			case 'Square':
				return $elm$core$Basics$sqrt(area_) / 2;
			case 'Diamond':
				return $elm$core$Basics$sqrt(area_) / 2;
			case 'Cross':
				return $elm$core$Basics$sqrt(area_ / 4);
			default:
				return $elm$core$Basics$sqrt(area_ / 4);
		}
	});
var $elm$html$Html$td = _VirtualDom_node('td');
var $elm$html$Html$tr = _VirtualDom_node('tr');
var $terezka$elm_charts$Internal$Produce$tooltipRow = F3(
	function (color, title, text) {
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', color),
							A2($elm$html$Html$Attributes$style, 'padding', '0'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '3px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(title + ':')
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
							A2($elm$html$Html$Attributes$style, 'padding', '0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(text)
						]))
				]));
	});
var $terezka$elm_charts$Internal$Produce$toDotSeries = F4(
	function (elIndex, toX, properties, data) {
		var toInterConfig = function (attrs) {
			return A2($terezka$elm_charts$Internal$Helpers$apply, attrs, $terezka$elm_charts$Internal$Svg$defaultInterpolation);
		};
		var toDotConfig = function (attrs) {
			return A2($terezka$elm_charts$Internal$Helpers$apply, attrs, $terezka$elm_charts$Internal$Svg$defaultDot);
		};
		var toDotItem = F7(
			function (lineIndex, stackIndex, colorIndex, prop, interConfig, dataIndex, datum_) {
				var y_ = A2(
					$elm$core$Maybe$withDefault,
					0,
					prop.visual(datum_));
				var x_ = toX(datum_);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$color(interConfig.color),
						$terezka$elm_charts$Chart$Attributes$border(interConfig.color),
						_Utils_eq(interConfig.method, $elm$core$Maybe$Nothing) ? $terezka$elm_charts$Chart$Attributes$circle : $elm$core$Basics$identity
					]);
				var dotAttrs = _Utils_ap(
					defaultAttrs,
					_Utils_ap(
						prop.attrs,
						A5(prop.extra, lineIndex, stackIndex, dataIndex, prop.meta, datum_)));
				var config = toDotConfig(dotAttrs);
				return $terezka$elm_charts$Internal$Item$Rendered(
					{
						config: {
							product: config,
							toAny: $terezka$elm_charts$Internal$Item$Dot,
							tooltipInfo: {
								border: config.border,
								borderWidth: config.borderWidth,
								color: function () {
									var _v6 = config.color;
									if (_v6 === 'white') {
										return interConfig.color;
									} else {
										return config.color;
									}
								}(),
								data: dataIndex,
								elIndex: elIndex,
								formatted: prop.format(datum_),
								index: colorIndex,
								name: prop.meta,
								property: lineIndex,
								stack: stackIndex
							},
							values: {
								datum: datum_,
								isReal: function () {
									var _v7 = prop.value(datum_);
									if (_v7.$ === 'Just') {
										return true;
									} else {
										return false;
									}
								}(),
								x1: x_,
								x2: x_,
								y: y_
							}
						},
						toHtml: function (c) {
							return _List_fromArray(
								[
									A3(
									$terezka$elm_charts$Internal$Produce$tooltipRow,
									c.tooltipInfo.color,
									A2($terezka$elm_charts$Internal$Produce$toDefaultName, colorIndex, c.tooltipInfo.name),
									prop.format(datum_))
								]);
						},
						toLimits: function (_v8) {
							return {x1: x_, x2: x_, y1: y_, y2: y_};
						},
						toPosition: F2(
							function (plane, _v9) {
								var radius = A2(
									$elm$core$Maybe$withDefault,
									0,
									A2(
										$elm$core$Maybe$map,
										$terezka$elm_charts$Internal$Svg$toRadius(config.size),
										config.shape));
								var radiusX_ = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, radius);
								var radiusY_ = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, radius);
								return {x1: x_ - radiusX_, x2: x_ + radiusX_, y1: y_ - radiusY_, y2: y_ + radiusY_};
							}),
						toSvg: F3(
							function (plane, _v10, _v11) {
								var _v12 = prop.value(datum_);
								if (_v12.$ === 'Nothing') {
									return $elm$svg$Svg$text('');
								} else {
									return A5(
										$terezka$elm_charts$Internal$Svg$dot,
										plane,
										function ($) {
											return $.x;
										},
										function ($) {
											return $.y;
										},
										config,
										{x: x_, y: y_});
								}
							})
					});
			});
		var toSeriesItem = F5(
			function (lineIndex, stacks, stackIndex, prop, colorIndex) {
				var defaultOpacity = ($elm$core$List$length(stacks) > 1) ? 0.4 : 0;
				var interAttr = _Utils_ap(
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(
							$terezka$elm_charts$Internal$Helpers$toDefaultColor(colorIndex)),
							$terezka$elm_charts$Chart$Attributes$opacity(defaultOpacity)
						]),
					prop.inter);
				var interConfig = toInterConfig(interAttr);
				var dotItems = A2(
					$elm$core$List$indexedMap,
					A5(toDotItem, lineIndex, stackIndex, colorIndex, prop, interConfig),
					data);
				if (!dotItems.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					var first = dotItems.a;
					var rest = dotItems.b;
					return $elm$core$Maybe$Just(
						$terezka$elm_charts$Internal$Item$Rendered(
							{
								config: {
									items: _Utils_Tuple2(first, rest)
								},
								toHtml: function (c) {
									return _List_fromArray(
										[
											A2(
											$elm$html$Html$table,
											_List_fromArray(
												[
													A2($elm$html$Html$Attributes$style, 'margin', '0')
												]),
											A2(
												$elm$core$List$concatMap,
												$terezka$elm_charts$Internal$Item$toHtml,
												function (_v1) {
													var x = _v1.a;
													var xs = _v1.b;
													return A2($elm$core$List$cons, x, xs);
												}(c.items)))
										]);
								},
								toLimits: function (c) {
									return A2(
										$terezka$elm_charts$Internal$Coordinates$foldPosition,
										$terezka$elm_charts$Internal$Item$getLimits,
										function (_v2) {
											var x = _v2.a;
											var xs = _v2.b;
											return A2($elm$core$List$cons, x, xs);
										}(c.items));
								},
								toPosition: F2(
									function (plane, c) {
										return A2(
											$terezka$elm_charts$Internal$Coordinates$foldPosition,
											$terezka$elm_charts$Internal$Item$getPosition(plane),
											function (_v3) {
												var x = _v3.a;
												var xs = _v3.b;
												return A2($elm$core$List$cons, x, xs);
											}(c.items));
									}),
								toSvg: F3(
									function (plane, _v4, _v5) {
										var toBottom = function (datum_) {
											return A3(
												$elm$core$Maybe$map2,
												F2(
													function (real, visual) {
														return visual - real;
													}),
												prop.value(datum_),
												prop.visual(datum_));
										};
										return A2(
											$elm$svg$Svg$g,
											_List_fromArray(
												[
													$elm$svg$Svg$Attributes$class('elm-charts__series')
												]),
											_List_fromArray(
												[
													A6(
													$terezka$elm_charts$Internal$Svg$area,
													plane,
													toX,
													$elm$core$Maybe$Just(toBottom),
													prop.visual,
													interConfig,
													data),
													A5($terezka$elm_charts$Internal$Svg$interpolation, plane, toX, prop.visual, interConfig, data),
													A2(
													$elm$svg$Svg$g,
													_List_fromArray(
														[
															$elm$svg$Svg$Attributes$class('elm-charts__dots')
														]),
													A2(
														$elm$core$List$map,
														$terezka$elm_charts$Internal$Item$toSvg(plane),
														dotItems))
												]));
									})
							}));
				}
			});
		return A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (propIndex, f) {
						return f(elIndex + propIndex);
					}),
				$elm$core$List$concat(
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (lineIndex, stacks) {
								return A2(
									$elm$core$List$indexedMap,
									A2(toSeriesItem, lineIndex, stacks),
									stacks);
							}),
						A2($elm$core$List$map, $terezka$elm_charts$Internal$Property$toConfigs, properties)))));
	});
var $terezka$elm_charts$Chart$seriesMap = F4(
	function (mapData, toX, properties, data) {
		return $terezka$elm_charts$Chart$Indexed(
			function (index) {
				var legends_ = A2($terezka$elm_charts$Internal$Legend$toDotLegends, index, properties);
				var items = A4($terezka$elm_charts$Internal$Produce$toDotSeries, index, toX, properties, data);
				var toLimits = A2($elm$core$List$map, $terezka$elm_charts$Internal$Item$getLimits, items);
				var generalized = A2(
					$elm$core$List$map,
					$terezka$elm_charts$Internal$Item$map(mapData),
					A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Many$getGenerals, items));
				return _Utils_Tuple2(
					A4(
						$terezka$elm_charts$Chart$SeriesElement,
						toLimits,
						generalized,
						legends_,
						function (p) {
							return A2(
								$elm$svg$Svg$map,
								$elm$core$Basics$never,
								A2(
									$elm$svg$Svg$g,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$class('elm-charts__dot-series')
										]),
									A2(
										$elm$core$List$map,
										$terezka$elm_charts$Internal$Item$toSvg(p),
										items)));
						}),
					index + $elm$core$List$length(
						A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Property$toConfigs, properties)));
			});
	});
var $terezka$elm_charts$Chart$series = F3(
	function (toX, properties, data) {
		return A4($terezka$elm_charts$Chart$seriesMap, $elm$core$Basics$identity, toX, properties, data);
	});
var $author$project$ViewProfileCharts$splitProportion = 0.5;
var $terezka$elm_charts$Internal$Svg$Stepped = {$: 'Stepped'};
var $terezka$elm_charts$Chart$Attributes$stepped = function (config) {
	return _Utils_update(
		config,
		{
			method: $elm$core$Maybe$Just($terezka$elm_charts$Internal$Svg$Stepped)
		});
};
var $terezka$elm_charts$Chart$SubElements = function (a) {
	return {$: 'SubElements', a: a};
};
var $terezka$elm_charts$Chart$withPlane = function (func) {
	return $terezka$elm_charts$Chart$SubElements(
		F2(
			function (p, is) {
				return func(p);
			}));
};
var $terezka$elm_charts$Chart$Attributes$x2 = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				x2: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$elm_charts$Chart$AxisElement = F2(
	function (a, b) {
		return {$: 'AxisElement', a: a, b: b};
	});
var $elm$svg$Svg$polygon = $elm$svg$Svg$trustedNode('polygon');
var $terezka$elm_charts$Internal$Svg$position = F6(
	function (plane, rotation, x_, y_, xOff_, yOff_) {
		return $elm$svg$Svg$Attributes$transform(
			'translate(' + ($elm$core$String$fromFloat(
				A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x_) + xOff_) + (',' + ($elm$core$String$fromFloat(
				A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y_) + yOff_) + (') rotate(' + ($elm$core$String$fromFloat(rotation) + ')'))))));
	});
var $terezka$elm_charts$Internal$Svg$arrow = F3(
	function (plane, config, point) {
		var points_ = '0,0 ' + ($elm$core$String$fromFloat(config.length) + (',' + ($elm$core$String$fromFloat(config.width) + (' 0, ' + $elm$core$String$fromFloat(config.width * 2)))));
		var commands = 'rotate(' + ($elm$core$String$fromFloat(config.rotate) + (') translate(0 ' + ($elm$core$String$fromFloat(-config.width) + ') ')));
		return A2(
			$elm$svg$Svg$g,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$class('elm-charts__arrow'),
					A6($terezka$elm_charts$Internal$Svg$position, plane, 0, point.x, point.y, config.xOff, config.yOff)
				]),
			_List_fromArray(
				[
					A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.attrs,
					$elm$svg$Svg$polygon,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(config.color),
							$elm$svg$Svg$Attributes$points(points_),
							$elm$svg$Svg$Attributes$transform(commands)
						]),
					_List_Nil)
				]));
	});
var $terezka$elm_charts$Internal$Svg$defaultArrow = {attrs: _List_Nil, color: 'rgb(210, 210, 210)', length: 7, rotate: 0, width: 4, xOff: 0, yOff: 0};
var $terezka$elm_charts$Chart$Svg$arrow = F2(
	function (plane, edits) {
		return A2(
			$terezka$elm_charts$Internal$Svg$arrow,
			plane,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultArrow));
	});
var $terezka$elm_charts$Chart$Attributes$zero = function (b) {
	return A3($elm$core$Basics$clamp, b.min, b.max, 0);
};
var $terezka$elm_charts$Chart$xAxis = function (edits) {
	var config = A2(
		$terezka$elm_charts$Internal$Helpers$apply,
		edits,
		{arrow: true, color: '', limits: _List_Nil, pinned: $terezka$elm_charts$Chart$Attributes$zero, width: 1});
	var addTickValues = F2(
		function (p, ts) {
			return _Utils_update(
				ts,
				{
					yAxis: A2(
						$elm$core$List$cons,
						config.pinned(p.y),
						ts.yAxis)
				});
		});
	return A2(
		$terezka$elm_charts$Chart$AxisElement,
		addTickValues,
		function (p) {
			var xLimit = A3(
				$elm$core$List$foldl,
				F2(
					function (f, x) {
						return f(x);
					}),
				p.x,
				config.limits);
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__x-axis')
					]),
				_List_fromArray(
					[
						A2(
						$terezka$elm_charts$Chart$Svg$line,
						p,
						_List_fromArray(
							[
								$terezka$elm_charts$Chart$Attributes$color(config.color),
								$terezka$elm_charts$Chart$Attributes$width(config.width),
								$terezka$elm_charts$Chart$Attributes$y1(
								config.pinned(p.y)),
								$terezka$elm_charts$Chart$Attributes$x1(
								A2($elm$core$Basics$max, p.x.min, xLimit.min)),
								$terezka$elm_charts$Chart$Attributes$x2(
								A2($elm$core$Basics$min, p.x.max, xLimit.max))
							])),
						config.arrow ? A3(
						$terezka$elm_charts$Chart$Svg$arrow,
						p,
						_List_fromArray(
							[
								$terezka$elm_charts$Chart$Attributes$color(config.color)
							]),
						{
							x: xLimit.max,
							y: config.pinned(p.y)
						}) : $elm$svg$Svg$text('')
					]));
		});
};
var $terezka$elm_charts$Internal$Svg$Floats = {$: 'Floats'};
var $terezka$elm_charts$Chart$LabelsElement = F3(
	function (a, b, c) {
		return {$: 'LabelsElement', a: a, b: b, c: c};
	});
var $terezka$elm_charts$Internal$Svg$defaultLabel = {anchor: $elm$core$Maybe$Nothing, attrs: _List_Nil, border: 'white', borderWidth: 0, color: '#808BAB', ellipsis: $elm$core$Maybe$Nothing, fontSize: $elm$core$Maybe$Nothing, hideOverflow: false, rotate: 0, uppercase: false, xOff: 0, yOff: 0};
var $terezka$elm_charts$Internal$Svg$Generator = function (a) {
	return {$: 'Generator', a: a};
};
var $terezka$intervals$Intervals$Around = function (a) {
	return {$: 'Around', a: a};
};
var $terezka$intervals$Intervals$around = $terezka$intervals$Intervals$Around;
var $terezka$intervals$Intervals$ceilingTo = F2(
	function (prec, number) {
		return prec * $elm$core$Basics$ceiling(number / prec);
	});
var $terezka$intervals$Intervals$getBeginning = F2(
	function (min, interval) {
		var multiple = min / interval;
		return _Utils_eq(
			multiple,
			$elm$core$Basics$round(multiple)) ? min : A2($terezka$intervals$Intervals$ceilingTo, interval, min);
	});
var $terezka$intervals$Intervals$correctFloat = function (prec) {
	return A2(
		$elm$core$Basics$composeR,
		$myrho$elm_round$Round$round(prec),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$String$toFloat,
			$elm$core$Maybe$withDefault(0)));
};
var $terezka$intervals$Intervals$getMultiples = F3(
	function (magnitude, allowDecimals, hasTickAmount) {
		var defaults = hasTickAmount ? _List_fromArray(
			[1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10]) : _List_fromArray(
			[1, 2, 2.5, 5, 10]);
		return allowDecimals ? defaults : ((magnitude === 1) ? A2(
			$elm$core$List$filter,
			function (n) {
				return _Utils_eq(
					$elm$core$Basics$round(n),
					n);
			},
			defaults) : ((magnitude <= 0.1) ? _List_fromArray(
			[1 / magnitude]) : defaults));
	});
var $terezka$intervals$Intervals$getPrecision = function (number) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(number));
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var before = _v0.a;
		var _v1 = _v0.b;
		var after = _v1.a;
		return $elm$core$Basics$abs(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(after)));
	} else {
		var _v2 = A2(
			$elm$core$String$split,
			'.',
			$elm$core$String$fromFloat(number));
		if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
			var before = _v2.a;
			var _v3 = _v2.b;
			var after = _v3.a;
			return $elm$core$String$length(after);
		} else {
			return 0;
		}
	}
};
var $elm$core$Basics$e = _Basics_e;
var $terezka$intervals$Intervals$toMagnitude = function (num) {
	return A2(
		$elm$core$Basics$pow,
		10,
		$elm$core$Basics$floor(
			A2($elm$core$Basics$logBase, $elm$core$Basics$e, num) / A2($elm$core$Basics$logBase, $elm$core$Basics$e, 10)));
};
var $terezka$intervals$Intervals$getInterval = F3(
	function (intervalRaw, allowDecimals, hasTickAmount) {
		var magnitude = $terezka$intervals$Intervals$toMagnitude(intervalRaw);
		var multiples = A3($terezka$intervals$Intervals$getMultiples, magnitude, allowDecimals, hasTickAmount);
		var normalized = intervalRaw / magnitude;
		var findMultipleExact = function (multiples_) {
			findMultipleExact:
			while (true) {
				if (multiples_.b) {
					var m1 = multiples_.a;
					var rest = multiples_.b;
					if (_Utils_cmp(m1 * magnitude, intervalRaw) > -1) {
						return m1;
					} else {
						var $temp$multiples_ = rest;
						multiples_ = $temp$multiples_;
						continue findMultipleExact;
					}
				} else {
					return 1;
				}
			}
		};
		var findMultiple = function (multiples_) {
			findMultiple:
			while (true) {
				if (multiples_.b) {
					if (multiples_.b.b) {
						var m1 = multiples_.a;
						var _v2 = multiples_.b;
						var m2 = _v2.a;
						var rest = _v2.b;
						if (_Utils_cmp(normalized, (m1 + m2) / 2) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = A2($elm$core$List$cons, m2, rest);
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					} else {
						var m1 = multiples_.a;
						var rest = multiples_.b;
						if (_Utils_cmp(normalized, m1) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = rest;
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					}
				} else {
					return 1;
				}
			}
		};
		var multiple = hasTickAmount ? findMultipleExact(multiples) : findMultiple(multiples);
		var precision = $terezka$intervals$Intervals$getPrecision(magnitude) + $terezka$intervals$Intervals$getPrecision(multiple);
		return A2($terezka$intervals$Intervals$correctFloat, precision, multiple * magnitude);
	});
var $terezka$intervals$Intervals$positions = F5(
	function (range, beginning, interval, m, acc) {
		positions:
		while (true) {
			var nextPosition = A2(
				$terezka$intervals$Intervals$correctFloat,
				$terezka$intervals$Intervals$getPrecision(interval),
				beginning + (m * interval));
			if (_Utils_cmp(nextPosition, range.max) > 0) {
				return acc;
			} else {
				var $temp$range = range,
					$temp$beginning = beginning,
					$temp$interval = interval,
					$temp$m = m + 1,
					$temp$acc = _Utils_ap(
					acc,
					_List_fromArray(
						[nextPosition]));
				range = $temp$range;
				beginning = $temp$beginning;
				interval = $temp$interval;
				m = $temp$m;
				acc = $temp$acc;
				continue positions;
			}
		}
	});
var $terezka$intervals$Intervals$values = F4(
	function (allowDecimals, exact, amountRough, range) {
		var intervalRough = (range.max - range.min) / amountRough;
		var interval = A3($terezka$intervals$Intervals$getInterval, intervalRough, allowDecimals, exact);
		var intervalSafe = (!interval) ? 1 : interval;
		var beginning = A2($terezka$intervals$Intervals$getBeginning, range.min, intervalSafe);
		var amountRoughSafe = (!amountRough) ? 1 : amountRough;
		return A5($terezka$intervals$Intervals$positions, range, beginning, intervalSafe, 0, _List_Nil);
	});
var $terezka$intervals$Intervals$floats = function (amount) {
	if (amount.$ === 'Exactly') {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, true, number);
	} else {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, false, number);
	}
};
var $terezka$elm_charts$Internal$Svg$floats = $terezka$elm_charts$Internal$Svg$Generator(
	F2(
		function (i, b) {
			return A2(
				$terezka$intervals$Intervals$floats,
				$terezka$intervals$Intervals$around(i),
				{max: b.max, min: b.min});
		}));
var $terezka$elm_charts$Chart$Svg$floats = $terezka$elm_charts$Internal$Svg$floats;
var $ryannhg$date_format$DateFormat$Language$Language = F6(
	function (toMonthName, toMonthAbbreviation, toWeekdayName, toWeekdayAbbreviation, toAmPm, toOrdinalSuffix) {
		return {toAmPm: toAmPm, toMonthAbbreviation: toMonthAbbreviation, toMonthName: toMonthName, toOrdinalSuffix: toOrdinalSuffix, toWeekdayAbbreviation: toWeekdayAbbreviation, toWeekdayName: toWeekdayName};
	});
var $ryannhg$date_format$DateFormat$Language$toEnglishAmPm = function (hour) {
	return (hour > 11) ? 'pm' : 'am';
};
var $ryannhg$date_format$DateFormat$Language$toEnglishMonthName = function (month) {
	switch (month.$) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var $ryannhg$date_format$DateFormat$Language$toEnglishSuffix = function (num) {
	var _v0 = A2($elm$core$Basics$modBy, 100, num);
	switch (_v0) {
		case 11:
			return 'th';
		case 12:
			return 'th';
		case 13:
			return 'th';
		default:
			var _v1 = A2($elm$core$Basics$modBy, 10, num);
			switch (_v1) {
				case 1:
					return 'st';
				case 2:
					return 'nd';
				case 3:
					return 'rd';
				default:
					return 'th';
			}
	}
};
var $ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName = function (weekday) {
	switch (weekday.$) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $ryannhg$date_format$DateFormat$Language$english = A6(
	$ryannhg$date_format$DateFormat$Language$Language,
	$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishAmPm,
	$ryannhg$date_format$DateFormat$Language$toEnglishSuffix);
var $ryannhg$date_format$DateFormat$amPm = F3(
	function (language, zone, posix) {
		return language.toAmPm(
			A2($elm$time$Time$toHour, zone, posix));
	});
var $ryannhg$date_format$DateFormat$dayOfMonth = $elm$time$Time$toDay;
var $elm$time$Time$Sun = {$: 'Sun'};
var $elm$time$Time$Fri = {$: 'Fri'};
var $elm$time$Time$Mon = {$: 'Mon'};
var $elm$time$Time$Sat = {$: 'Sat'};
var $elm$time$Time$Thu = {$: 'Thu'};
var $elm$time$Time$Tue = {$: 'Tue'};
var $elm$time$Time$Wed = {$: 'Wed'};
var $ryannhg$date_format$DateFormat$days = _List_fromArray(
	[$elm$time$Time$Sun, $elm$time$Time$Mon, $elm$time$Time$Tue, $elm$time$Time$Wed, $elm$time$Time$Thu, $elm$time$Time$Fri, $elm$time$Time$Sat]);
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return $elm$time$Time$Thu;
			case 1:
				return $elm$time$Time$Fri;
			case 2:
				return $elm$time$Time$Sat;
			case 3:
				return $elm$time$Time$Sun;
			case 4:
				return $elm$time$Time$Mon;
			case 5:
				return $elm$time$Time$Tue;
			default:
				return $elm$time$Time$Wed;
		}
	});
var $ryannhg$date_format$DateFormat$dayOfWeek = F2(
	function (zone, posix) {
		return function (_v1) {
			var i = _v1.a;
			return i;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				_Utils_Tuple2(0, $elm$time$Time$Sun),
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var day = _v0.b;
							return _Utils_eq(
								day,
								A2($elm$time$Time$toWeekday, zone, posix));
						},
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, day) {
									return _Utils_Tuple2(i, day);
								}),
							$ryannhg$date_format$DateFormat$days)))));
	});
var $ryannhg$date_format$DateFormat$isLeapYear = function (year_) {
	return (!(!A2($elm$core$Basics$modBy, 4, year_))) ? false : ((!(!A2($elm$core$Basics$modBy, 100, year_))) ? true : ((!(!A2($elm$core$Basics$modBy, 400, year_))) ? false : true));
};
var $ryannhg$date_format$DateFormat$daysInMonth = F2(
	function (year_, month) {
		switch (month.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $ryannhg$date_format$DateFormat$isLeapYear(year_) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $ryannhg$date_format$DateFormat$months = _List_fromArray(
	[$elm$time$Time$Jan, $elm$time$Time$Feb, $elm$time$Time$Mar, $elm$time$Time$Apr, $elm$time$Time$May, $elm$time$Time$Jun, $elm$time$Time$Jul, $elm$time$Time$Aug, $elm$time$Time$Sep, $elm$time$Time$Oct, $elm$time$Time$Nov, $elm$time$Time$Dec]);
var $ryannhg$date_format$DateFormat$monthPair = F2(
	function (zone, posix) {
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, $elm$time$Time$Jan),
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var i = _v0.a;
						var m = _v0.b;
						return _Utils_eq(
							m,
							A2($elm$time$Time$toMonth, zone, posix));
					},
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (a, b) {
								return _Utils_Tuple2(a, b);
							}),
						$ryannhg$date_format$DateFormat$months))));
	});
var $ryannhg$date_format$DateFormat$monthNumber_ = F2(
	function (zone, posix) {
		return 1 + function (_v0) {
			var i = _v0.a;
			var m = _v0.b;
			return i;
		}(
			A2($ryannhg$date_format$DateFormat$monthPair, zone, posix));
	});
var $ryannhg$date_format$DateFormat$dayOfYear = F2(
	function (zone, posix) {
		var monthsBeforeThisOne = A2(
			$elm$core$List$take,
			A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) - 1,
			$ryannhg$date_format$DateFormat$months);
		var daysBeforeThisMonth = $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				$ryannhg$date_format$DateFormat$daysInMonth(
					A2($elm$time$Time$toYear, zone, posix)),
				monthsBeforeThisOne));
		return daysBeforeThisMonth + A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix);
	});
var $ryannhg$date_format$DateFormat$quarter = F2(
	function (zone, posix) {
		return (A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) / 4) | 0;
	});
var $ryannhg$date_format$DateFormat$toFixedLength = F2(
	function (totalChars, num) {
		var numStr = $elm$core$String$fromInt(num);
		var numZerosNeeded = totalChars - $elm$core$String$length(numStr);
		var zeros = A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				function (_v0) {
					return '0';
				},
				A2($elm$core$List$range, 1, numZerosNeeded)));
		return _Utils_ap(zeros, numStr);
	});
var $ryannhg$date_format$DateFormat$toNonMilitary = function (num) {
	return (!num) ? 12 : ((num <= 12) ? num : (num - 12));
};
var $ryannhg$date_format$DateFormat$millisecondsPerYear = $elm$core$Basics$round((((1000 * 60) * 60) * 24) * 365.25);
var $ryannhg$date_format$DateFormat$firstDayOfYear = F2(
	function (zone, time) {
		return $elm$time$Time$millisToPosix(
			$ryannhg$date_format$DateFormat$millisecondsPerYear * A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$weekOfYear = F2(
	function (zone, posix) {
		var firstDay = A2($ryannhg$date_format$DateFormat$firstDayOfYear, zone, posix);
		var firstDayOffset = A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, firstDay);
		var daysSoFar = A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix);
		return (((daysSoFar + firstDayOffset) / 7) | 0) + 1;
	});
var $ryannhg$date_format$DateFormat$year = F2(
	function (zone, time) {
		return $elm$core$String$fromInt(
			A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$piece = F4(
	function (language, zone, posix, token) {
		switch (token.$) {
			case 'MonthNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthNameAbbreviated':
				return language.toMonthAbbreviation(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'MonthNameFull':
				return language.toMonthName(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'QuarterNumber':
				return $elm$core$String$fromInt(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 'QuarterSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 'DayOfMonthNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfWeekNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekNameAbbreviated':
				return language.toWeekdayAbbreviation(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'DayOfWeekNameFull':
				return language.toWeekdayName(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'WeekOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'YearNumberLastTwo':
				return A2(
					$elm$core$String$right,
					2,
					A2($ryannhg$date_format$DateFormat$year, zone, posix));
			case 'YearNumber':
				return A2($ryannhg$date_format$DateFormat$year, zone, posix);
			case 'AmPmUppercase':
				return $elm$core$String$toUpper(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 'AmPmLowercase':
				return $elm$core$String$toLower(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 'HourMilitaryNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourNumber':
				return $elm$core$String$fromInt(
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourMilitaryFromOneNumber':
				return $elm$core$String$fromInt(
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFromOneFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'MinuteNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMinute, zone, posix));
			case 'MinuteFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toMinute, zone, posix));
			case 'SecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toSecond, zone, posix));
			case 'SecondFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toSecond, zone, posix));
			case 'MillisecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMillis, zone, posix));
			case 'MillisecondFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($elm$time$Time$toMillis, zone, posix));
			default:
				var string = token.a;
				return string;
		}
	});
var $ryannhg$date_format$DateFormat$formatWithLanguage = F4(
	function (language, tokens, zone, time) {
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A3($ryannhg$date_format$DateFormat$piece, language, zone, time),
				tokens));
	});
var $ryannhg$date_format$DateFormat$format = $ryannhg$date_format$DateFormat$formatWithLanguage($ryannhg$date_format$DateFormat$Language$english);
var $ryannhg$date_format$DateFormat$HourMilitaryFixed = {$: 'HourMilitaryFixed'};
var $ryannhg$date_format$DateFormat$hourMilitaryFixed = $ryannhg$date_format$DateFormat$HourMilitaryFixed;
var $ryannhg$date_format$DateFormat$MinuteFixed = {$: 'MinuteFixed'};
var $ryannhg$date_format$DateFormat$minuteFixed = $ryannhg$date_format$DateFormat$MinuteFixed;
var $ryannhg$date_format$DateFormat$Text = function (a) {
	return {$: 'Text', a: a};
};
var $ryannhg$date_format$DateFormat$text = $ryannhg$date_format$DateFormat$Text;
var $terezka$elm_charts$Internal$Svg$formatClock = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed
		]));
var $ryannhg$date_format$DateFormat$MillisecondFixed = {$: 'MillisecondFixed'};
var $ryannhg$date_format$DateFormat$millisecondFixed = $ryannhg$date_format$DateFormat$MillisecondFixed;
var $ryannhg$date_format$DateFormat$SecondFixed = {$: 'SecondFixed'};
var $ryannhg$date_format$DateFormat$secondFixed = $ryannhg$date_format$DateFormat$SecondFixed;
var $terezka$elm_charts$Internal$Svg$formatClockMillis = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$secondFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$millisecondFixed
		]));
var $terezka$elm_charts$Internal$Svg$formatClockSecond = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$secondFixed
		]));
var $ryannhg$date_format$DateFormat$DayOfMonthNumber = {$: 'DayOfMonthNumber'};
var $ryannhg$date_format$DateFormat$dayOfMonthNumber = $ryannhg$date_format$DateFormat$DayOfMonthNumber;
var $ryannhg$date_format$DateFormat$MonthNumber = {$: 'MonthNumber'};
var $ryannhg$date_format$DateFormat$monthNumber = $ryannhg$date_format$DateFormat$MonthNumber;
var $terezka$elm_charts$Internal$Svg$formatDate = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$monthNumber,
			$ryannhg$date_format$DateFormat$text('/'),
			$ryannhg$date_format$DateFormat$dayOfMonthNumber
		]));
var $ryannhg$date_format$DateFormat$MonthNameAbbreviated = {$: 'MonthNameAbbreviated'};
var $ryannhg$date_format$DateFormat$monthNameAbbreviated = $ryannhg$date_format$DateFormat$MonthNameAbbreviated;
var $terezka$elm_charts$Internal$Svg$formatMonth = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$monthNameAbbreviated]));
var $ryannhg$date_format$DateFormat$DayOfWeekNameFull = {$: 'DayOfWeekNameFull'};
var $ryannhg$date_format$DateFormat$dayOfWeekNameFull = $ryannhg$date_format$DateFormat$DayOfWeekNameFull;
var $terezka$elm_charts$Internal$Svg$formatWeekday = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$dayOfWeekNameFull]));
var $ryannhg$date_format$DateFormat$YearNumber = {$: 'YearNumber'};
var $ryannhg$date_format$DateFormat$yearNumber = $ryannhg$date_format$DateFormat$YearNumber;
var $terezka$elm_charts$Internal$Svg$formatYear = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$yearNumber]));
var $terezka$elm_charts$Internal$Svg$formatTime = F2(
	function (zone, time) {
		var _v0 = A2($elm$core$Maybe$withDefault, time.unit, time.change);
		switch (_v0.$) {
			case 'Millisecond':
				return A2($terezka$elm_charts$Internal$Svg$formatClockMillis, zone, time.timestamp);
			case 'Second':
				return A2($terezka$elm_charts$Internal$Svg$formatClockSecond, zone, time.timestamp);
			case 'Minute':
				return A2($terezka$elm_charts$Internal$Svg$formatClock, zone, time.timestamp);
			case 'Hour':
				return A2($terezka$elm_charts$Internal$Svg$formatClock, zone, time.timestamp);
			case 'Day':
				return (time.multiple === 7) ? A2($terezka$elm_charts$Internal$Svg$formatWeekday, zone, time.timestamp) : A2($terezka$elm_charts$Internal$Svg$formatDate, zone, time.timestamp);
			case 'Month':
				return A2($terezka$elm_charts$Internal$Svg$formatMonth, zone, time.timestamp);
			default:
				return A2($terezka$elm_charts$Internal$Svg$formatYear, zone, time.timestamp);
		}
	});
var $terezka$elm_charts$Chart$Svg$formatTime = $terezka$elm_charts$Internal$Svg$formatTime;
var $terezka$elm_charts$Internal$Svg$generate = F3(
	function (amount, _v0, limits) {
		var func = _v0.a;
		return A2(func, amount, limits);
	});
var $terezka$elm_charts$Chart$Svg$generate = $terezka$elm_charts$Internal$Svg$generate;
var $terezka$intervals$Intervals$ints = F2(
	function (amount, range) {
		return A2(
			$elm$core$List$map,
			$elm$core$Basics$round,
			function () {
				if (amount.$ === 'Exactly') {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, true, number, range);
				} else {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, false, number, range);
				}
			}());
	});
var $terezka$elm_charts$Internal$Svg$ints = $terezka$elm_charts$Internal$Svg$Generator(
	F2(
		function (i, b) {
			return A2(
				$terezka$intervals$Intervals$ints,
				$terezka$intervals$Intervals$around(i),
				{max: b.max, min: b.min});
		}));
var $terezka$elm_charts$Chart$Svg$ints = $terezka$elm_charts$Internal$Svg$ints;
var $terezka$intervals$Intervals$Day = {$: 'Day'};
var $terezka$intervals$Intervals$Hour = {$: 'Hour'};
var $terezka$intervals$Intervals$Millisecond = {$: 'Millisecond'};
var $terezka$intervals$Intervals$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Month = {$: 'Month'};
var $terezka$intervals$Intervals$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Year = {$: 'Year'};
var $justinmimbs$time_extra$Time$Extra$Day = {$: 'Day'};
var $justinmimbs$date$Date$Days = {$: 'Days'};
var $justinmimbs$time_extra$Time$Extra$Millisecond = {$: 'Millisecond'};
var $justinmimbs$time_extra$Time$Extra$Month = {$: 'Month'};
var $justinmimbs$date$Date$Months = {$: 'Months'};
var $justinmimbs$date$Date$RD = function (a) {
	return {$: 'RD', a: a};
};
var $justinmimbs$date$Date$isLeapYear = function (y) {
	return ((!A2($elm$core$Basics$modBy, 4, y)) && (!(!A2($elm$core$Basics$modBy, 100, y)))) || (!A2($elm$core$Basics$modBy, 400, y));
};
var $justinmimbs$date$Date$daysBeforeMonth = F2(
	function (y, m) {
		var leapDays = $justinmimbs$date$Date$isLeapYear(y) ? 1 : 0;
		switch (m.$) {
			case 'Jan':
				return 0;
			case 'Feb':
				return 31;
			case 'Mar':
				return 59 + leapDays;
			case 'Apr':
				return 90 + leapDays;
			case 'May':
				return 120 + leapDays;
			case 'Jun':
				return 151 + leapDays;
			case 'Jul':
				return 181 + leapDays;
			case 'Aug':
				return 212 + leapDays;
			case 'Sep':
				return 243 + leapDays;
			case 'Oct':
				return 273 + leapDays;
			case 'Nov':
				return 304 + leapDays;
			default:
				return 334 + leapDays;
		}
	});
var $justinmimbs$date$Date$floorDiv = F2(
	function (a, b) {
		return $elm$core$Basics$floor(a / b);
	});
var $justinmimbs$date$Date$daysBeforeYear = function (y1) {
	var y = y1 - 1;
	var leapYears = (A2($justinmimbs$date$Date$floorDiv, y, 4) - A2($justinmimbs$date$Date$floorDiv, y, 100)) + A2($justinmimbs$date$Date$floorDiv, y, 400);
	return (365 * y) + leapYears;
};
var $justinmimbs$date$Date$daysInMonth = F2(
	function (y, m) {
		switch (m.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $justinmimbs$date$Date$isLeapYear(y) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $justinmimbs$date$Date$monthToNumber = function (m) {
	switch (m.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $justinmimbs$date$Date$numberToMonth = function (mn) {
	var _v0 = A2($elm$core$Basics$max, 1, mn);
	switch (_v0) {
		case 1:
			return $elm$time$Time$Jan;
		case 2:
			return $elm$time$Time$Feb;
		case 3:
			return $elm$time$Time$Mar;
		case 4:
			return $elm$time$Time$Apr;
		case 5:
			return $elm$time$Time$May;
		case 6:
			return $elm$time$Time$Jun;
		case 7:
			return $elm$time$Time$Jul;
		case 8:
			return $elm$time$Time$Aug;
		case 9:
			return $elm$time$Time$Sep;
		case 10:
			return $elm$time$Time$Oct;
		case 11:
			return $elm$time$Time$Nov;
		default:
			return $elm$time$Time$Dec;
	}
};
var $justinmimbs$date$Date$toCalendarDateHelp = F3(
	function (y, m, d) {
		toCalendarDateHelp:
		while (true) {
			var monthDays = A2($justinmimbs$date$Date$daysInMonth, y, m);
			var mn = $justinmimbs$date$Date$monthToNumber(m);
			if ((mn < 12) && (_Utils_cmp(d, monthDays) > 0)) {
				var $temp$y = y,
					$temp$m = $justinmimbs$date$Date$numberToMonth(mn + 1),
					$temp$d = d - monthDays;
				y = $temp$y;
				m = $temp$m;
				d = $temp$d;
				continue toCalendarDateHelp;
			} else {
				return {day: d, month: m, year: y};
			}
		}
	});
var $justinmimbs$date$Date$divWithRemainder = F2(
	function (a, b) {
		return _Utils_Tuple2(
			A2($justinmimbs$date$Date$floorDiv, a, b),
			A2($elm$core$Basics$modBy, b, a));
	});
var $justinmimbs$date$Date$year = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($justinmimbs$date$Date$divWithRemainder, rd, 146097);
	var n400 = _v1.a;
	var r400 = _v1.b;
	var _v2 = A2($justinmimbs$date$Date$divWithRemainder, r400, 36524);
	var n100 = _v2.a;
	var r100 = _v2.b;
	var _v3 = A2($justinmimbs$date$Date$divWithRemainder, r100, 1461);
	var n4 = _v3.a;
	var r4 = _v3.b;
	var _v4 = A2($justinmimbs$date$Date$divWithRemainder, r4, 365);
	var n1 = _v4.a;
	var r1 = _v4.b;
	var n = (!r1) ? 0 : 1;
	return ((((n400 * 400) + (n100 * 100)) + (n4 * 4)) + n1) + n;
};
var $justinmimbs$date$Date$toOrdinalDate = function (_v0) {
	var rd = _v0.a;
	var y = $justinmimbs$date$Date$year(
		$justinmimbs$date$Date$RD(rd));
	return {
		ordinalDay: rd - $justinmimbs$date$Date$daysBeforeYear(y),
		year: y
	};
};
var $justinmimbs$date$Date$toCalendarDate = function (_v0) {
	var rd = _v0.a;
	var date = $justinmimbs$date$Date$toOrdinalDate(
		$justinmimbs$date$Date$RD(rd));
	return A3($justinmimbs$date$Date$toCalendarDateHelp, date.year, $elm$time$Time$Jan, date.ordinalDay);
};
var $justinmimbs$date$Date$add = F3(
	function (unit, n, _v0) {
		var rd = _v0.a;
		switch (unit.$) {
			case 'Years':
				return A3(
					$justinmimbs$date$Date$add,
					$justinmimbs$date$Date$Months,
					12 * n,
					$justinmimbs$date$Date$RD(rd));
			case 'Months':
				var date = $justinmimbs$date$Date$toCalendarDate(
					$justinmimbs$date$Date$RD(rd));
				var wholeMonths = ((12 * (date.year - 1)) + ($justinmimbs$date$Date$monthToNumber(date.month) - 1)) + n;
				var m = $justinmimbs$date$Date$numberToMonth(
					A2($elm$core$Basics$modBy, 12, wholeMonths) + 1);
				var y = A2($justinmimbs$date$Date$floorDiv, wholeMonths, 12) + 1;
				return $justinmimbs$date$Date$RD(
					($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A2(
						$elm$core$Basics$min,
						date.day,
						A2($justinmimbs$date$Date$daysInMonth, y, m)));
			case 'Weeks':
				return $justinmimbs$date$Date$RD(rd + (7 * n));
			default:
				return $justinmimbs$date$Date$RD(rd + n);
		}
	});
var $justinmimbs$date$Date$fromCalendarDate = F3(
	function (y, m, d) {
		return $justinmimbs$date$Date$RD(
			($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A3(
				$elm$core$Basics$clamp,
				1,
				A2($justinmimbs$date$Date$daysInMonth, y, m),
				d));
	});
var $justinmimbs$date$Date$fromPosix = F2(
	function (zone, posix) {
		return A3(
			$justinmimbs$date$Date$fromCalendarDate,
			A2($elm$time$Time$toYear, zone, posix),
			A2($elm$time$Time$toMonth, zone, posix),
			A2($elm$time$Time$toDay, zone, posix));
	});
var $justinmimbs$date$Date$toRataDie = function (_v0) {
	var rd = _v0.a;
	return rd;
};
var $justinmimbs$time_extra$Time$Extra$dateToMillis = function (date) {
	var daysSinceEpoch = $justinmimbs$date$Date$toRataDie(date) - 719163;
	return daysSinceEpoch * 86400000;
};
var $justinmimbs$time_extra$Time$Extra$timeFromClock = F4(
	function (hour, minute, second, millisecond) {
		return (((hour * 3600000) + (minute * 60000)) + (second * 1000)) + millisecond;
	});
var $justinmimbs$time_extra$Time$Extra$timeFromPosix = F2(
	function (zone, posix) {
		return A4(
			$justinmimbs$time_extra$Time$Extra$timeFromClock,
			A2($elm$time$Time$toHour, zone, posix),
			A2($elm$time$Time$toMinute, zone, posix),
			A2($elm$time$Time$toSecond, zone, posix),
			A2($elm$time$Time$toMillis, zone, posix));
	});
var $justinmimbs$time_extra$Time$Extra$toOffset = F2(
	function (zone, posix) {
		var millis = $elm$time$Time$posixToMillis(posix);
		var localMillis = $justinmimbs$time_extra$Time$Extra$dateToMillis(
			A2($justinmimbs$date$Date$fromPosix, zone, posix)) + A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix);
		return ((localMillis - millis) / 60000) | 0;
	});
var $justinmimbs$time_extra$Time$Extra$posixFromDateTime = F3(
	function (zone, date, time) {
		var millis = $justinmimbs$time_extra$Time$Extra$dateToMillis(date) + time;
		var offset0 = A2(
			$justinmimbs$time_extra$Time$Extra$toOffset,
			zone,
			$elm$time$Time$millisToPosix(millis));
		var posix1 = $elm$time$Time$millisToPosix(millis - (offset0 * 60000));
		var offset1 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix1);
		if (_Utils_eq(offset0, offset1)) {
			return posix1;
		} else {
			var posix2 = $elm$time$Time$millisToPosix(millis - (offset1 * 60000));
			var offset2 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix2);
			return _Utils_eq(offset1, offset2) ? posix2 : posix1;
		}
	});
var $justinmimbs$time_extra$Time$Extra$add = F4(
	function (interval, n, zone, posix) {
		add:
		while (true) {
			switch (interval.$) {
				case 'Millisecond':
					return $elm$time$Time$millisToPosix(
						$elm$time$Time$posixToMillis(posix) + n);
				case 'Second':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 1000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Minute':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 60000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Hour':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 3600000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Day':
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							$justinmimbs$date$Date$Days,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 'Month':
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							$justinmimbs$date$Date$Months,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 'Year':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Month,
						$temp$n = n * 12,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Quarter':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Month,
						$temp$n = n * 3,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Week':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Day,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				default:
					var weekday = interval;
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Day,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
			}
		}
	});
var $justinmimbs$time_extra$Time$Extra$Week = {$: 'Week'};
var $justinmimbs$date$Date$Day = {$: 'Day'};
var $justinmimbs$date$Date$Friday = {$: 'Friday'};
var $justinmimbs$date$Date$Monday = {$: 'Monday'};
var $justinmimbs$date$Date$Month = {$: 'Month'};
var $justinmimbs$date$Date$Quarter = {$: 'Quarter'};
var $justinmimbs$date$Date$Saturday = {$: 'Saturday'};
var $justinmimbs$date$Date$Sunday = {$: 'Sunday'};
var $justinmimbs$date$Date$Thursday = {$: 'Thursday'};
var $justinmimbs$date$Date$Tuesday = {$: 'Tuesday'};
var $justinmimbs$date$Date$Wednesday = {$: 'Wednesday'};
var $justinmimbs$date$Date$Week = {$: 'Week'};
var $justinmimbs$date$Date$Year = {$: 'Year'};
var $justinmimbs$date$Date$weekdayNumber = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($elm$core$Basics$modBy, 7, rd);
	if (!_v1) {
		return 7;
	} else {
		var n = _v1;
		return n;
	}
};
var $justinmimbs$date$Date$weekdayToNumber = function (wd) {
	switch (wd.$) {
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		case 'Sat':
			return 6;
		default:
			return 7;
	}
};
var $justinmimbs$date$Date$daysSincePreviousWeekday = F2(
	function (wd, date) {
		return A2(
			$elm$core$Basics$modBy,
			7,
			($justinmimbs$date$Date$weekdayNumber(date) + 7) - $justinmimbs$date$Date$weekdayToNumber(wd));
	});
var $justinmimbs$date$Date$firstOfMonth = F2(
	function (y, m) {
		return $justinmimbs$date$Date$RD(
			($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + 1);
	});
var $justinmimbs$date$Date$firstOfYear = function (y) {
	return $justinmimbs$date$Date$RD(
		$justinmimbs$date$Date$daysBeforeYear(y) + 1);
};
var $justinmimbs$date$Date$month = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toCalendarDate,
	function ($) {
		return $.month;
	});
var $justinmimbs$date$Date$monthToQuarter = function (m) {
	return (($justinmimbs$date$Date$monthToNumber(m) + 2) / 3) | 0;
};
var $justinmimbs$date$Date$quarter = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToQuarter);
var $justinmimbs$date$Date$quarterToMonth = function (q) {
	return $justinmimbs$date$Date$numberToMonth((q * 3) - 2);
};
var $justinmimbs$date$Date$floor = F2(
	function (interval, date) {
		var rd = date.a;
		switch (interval.$) {
			case 'Year':
				return $justinmimbs$date$Date$firstOfYear(
					$justinmimbs$date$Date$year(date));
			case 'Quarter':
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$quarterToMonth(
						$justinmimbs$date$Date$quarter(date)));
			case 'Month':
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$month(date));
			case 'Week':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Mon, date));
			case 'Monday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Mon, date));
			case 'Tuesday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Tue, date));
			case 'Wednesday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Wed, date));
			case 'Thursday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Thu, date));
			case 'Friday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Fri, date));
			case 'Saturday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Sat, date));
			case 'Sunday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Sun, date));
			default:
				return date;
		}
	});
var $justinmimbs$time_extra$Time$Extra$floorDate = F3(
	function (dateInterval, zone, posix) {
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A2(
				$justinmimbs$date$Date$floor,
				dateInterval,
				A2($justinmimbs$date$Date$fromPosix, zone, posix)),
			0);
	});
var $justinmimbs$time_extra$Time$Extra$floor = F3(
	function (interval, zone, posix) {
		switch (interval.$) {
			case 'Millisecond':
				return posix;
			case 'Second':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						A2($elm$time$Time$toSecond, zone, posix),
						0));
			case 'Minute':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						0,
						0));
			case 'Hour':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						0,
						0,
						0));
			case 'Day':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Day, zone, posix);
			case 'Month':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Month, zone, posix);
			case 'Year':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Year, zone, posix);
			case 'Quarter':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Quarter, zone, posix);
			case 'Week':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Week, zone, posix);
			case 'Monday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Monday, zone, posix);
			case 'Tuesday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Tuesday, zone, posix);
			case 'Wednesday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Wednesday, zone, posix);
			case 'Thursday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Thursday, zone, posix);
			case 'Friday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Friday, zone, posix);
			case 'Saturday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Saturday, zone, posix);
			default:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Sunday, zone, posix);
		}
	});
var $justinmimbs$time_extra$Time$Extra$ceiling = F3(
	function (interval, zone, posix) {
		var floored = A3($justinmimbs$time_extra$Time$Extra$floor, interval, zone, posix);
		return _Utils_eq(floored, posix) ? posix : A4($justinmimbs$time_extra$Time$Extra$add, interval, 1, zone, floored);
	});
var $terezka$intervals$Intervals$Time$ceilingDay = F3(
	function (zone, mult, stamp) {
		return (mult === 7) ? A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Week, zone, stamp) : A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Day, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Hour = {$: 'Hour'};
var $justinmimbs$time_extra$Time$Extra$partsToPosix = F2(
	function (zone, _v0) {
		var year = _v0.year;
		var month = _v0.month;
		var day = _v0.day;
		var hour = _v0.hour;
		var minute = _v0.minute;
		var second = _v0.second;
		var millisecond = _v0.millisecond;
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A3($justinmimbs$date$Date$fromCalendarDate, year, month, day),
			A4(
				$justinmimbs$time_extra$Time$Extra$timeFromClock,
				A3($elm$core$Basics$clamp, 0, 23, hour),
				A3($elm$core$Basics$clamp, 0, 59, minute),
				A3($elm$core$Basics$clamp, 0, 59, second),
				A3($elm$core$Basics$clamp, 0, 999, millisecond)));
	});
var $justinmimbs$time_extra$Time$Extra$posixToParts = F2(
	function (zone, posix) {
		return {
			day: A2($elm$time$Time$toDay, zone, posix),
			hour: A2($elm$time$Time$toHour, zone, posix),
			millisecond: A2($elm$time$Time$toMillis, zone, posix),
			minute: A2($elm$time$Time$toMinute, zone, posix),
			month: A2($elm$time$Time$toMonth, zone, posix),
			second: A2($elm$time$Time$toSecond, zone, posix),
			year: A2($elm$time$Time$toYear, zone, posix)
		};
	});
var $terezka$intervals$Intervals$Time$ceilingHour = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Hour, zone, stamp));
		var rem = parts.hour % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Hour, mult - rem, zone, _new);
	});
var $justinmimbs$time_extra$Time$Extra$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Time$ceilingMinute = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Minute, zone, stamp));
		var rem = parts.minute % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Minute, mult - rem, zone, _new);
	});
var $terezka$intervals$Intervals$Time$intAsMonth = function (_int) {
	switch (_int) {
		case 1:
			return $elm$time$Time$Jan;
		case 2:
			return $elm$time$Time$Feb;
		case 3:
			return $elm$time$Time$Mar;
		case 4:
			return $elm$time$Time$Apr;
		case 5:
			return $elm$time$Time$May;
		case 6:
			return $elm$time$Time$Jun;
		case 7:
			return $elm$time$Time$Jul;
		case 8:
			return $elm$time$Time$Aug;
		case 9:
			return $elm$time$Time$Sep;
		case 10:
			return $elm$time$Time$Oct;
		case 11:
			return $elm$time$Time$Nov;
		case 12:
			return $elm$time$Time$Dec;
		default:
			return $elm$time$Time$Dec;
	}
};
var $terezka$intervals$Intervals$Time$monthAsInt = function (month) {
	switch (month.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $terezka$intervals$Intervals$Time$ceilingMonth = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Month, zone, stamp));
		var monthInt = $terezka$intervals$Intervals$Time$monthAsInt(parts.month);
		var rem = (monthInt - 1) % mult;
		var newMonth = (!rem) ? monthInt : ((monthInt - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			(newMonth > 12) ? _Utils_update(
				parts,
				{
					month: $terezka$intervals$Intervals$Time$intAsMonth(newMonth - 12),
					year: parts.year + 1
				}) : _Utils_update(
				parts,
				{
					month: $terezka$intervals$Intervals$Time$intAsMonth(newMonth)
				}));
	});
var $terezka$intervals$Intervals$Time$ceilingMs = F3(
	function (zone, mult, stamp) {
		var parts = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, stamp);
		var rem = parts.millisecond % mult;
		return (!rem) ? A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts) : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Millisecond, mult - rem, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Time$ceilingSecond = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Second, zone, stamp));
		var rem = parts.second % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Second, mult - rem, zone, _new);
	});
var $justinmimbs$time_extra$Time$Extra$Year = {$: 'Year'};
var $terezka$intervals$Intervals$Time$ceilingYear = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Year, zone, stamp));
		var rem = parts.year % mult;
		var newYear = (!rem) ? parts.year : ((parts.year - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			_Utils_update(
				parts,
				{year: newYear}));
	});
var $terezka$intervals$Intervals$Time$ceilingUnit = F3(
	function (zone, unit, mult) {
		switch (unit.$) {
			case 'Millisecond':
				return A2($terezka$intervals$Intervals$Time$ceilingMs, zone, mult);
			case 'Second':
				return A2($terezka$intervals$Intervals$Time$ceilingSecond, zone, mult);
			case 'Minute':
				return A2($terezka$intervals$Intervals$Time$ceilingMinute, zone, mult);
			case 'Hour':
				return A2($terezka$intervals$Intervals$Time$ceilingHour, zone, mult);
			case 'Day':
				return A2($terezka$intervals$Intervals$Time$ceilingDay, zone, mult);
			case 'Month':
				return A2($terezka$intervals$Intervals$Time$ceilingMonth, zone, mult);
			default:
				return A2($terezka$intervals$Intervals$Time$ceilingYear, zone, mult);
		}
	});
var $terezka$intervals$Intervals$Time$Day = {$: 'Day'};
var $terezka$intervals$Intervals$Time$Hour = {$: 'Hour'};
var $terezka$intervals$Intervals$Time$Millisecond = {$: 'Millisecond'};
var $terezka$intervals$Intervals$Time$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Time$Month = {$: 'Month'};
var $terezka$intervals$Intervals$Time$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Time$Year = {$: 'Year'};
var $terezka$intervals$Intervals$Time$getChange = F3(
	function (zone, a, b) {
		var bP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b);
		var aP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a);
		return (!_Utils_eq(aP.year, bP.year)) ? $terezka$intervals$Intervals$Time$Year : ((!_Utils_eq(aP.month, bP.month)) ? $terezka$intervals$Intervals$Time$Month : ((!_Utils_eq(aP.day, bP.day)) ? $terezka$intervals$Intervals$Time$Day : ((!_Utils_eq(aP.hour, bP.hour)) ? $terezka$intervals$Intervals$Time$Hour : ((!_Utils_eq(aP.minute, bP.minute)) ? $terezka$intervals$Intervals$Time$Minute : ((!_Utils_eq(aP.second, bP.second)) ? $terezka$intervals$Intervals$Time$Second : $terezka$intervals$Intervals$Time$Millisecond)))));
	});
var $danhandrea$elm_time_extra$Util$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 400, year)) || ((!(!A2($elm$core$Basics$modBy, 100, year))) && (!A2($elm$core$Basics$modBy, 4, year)));
};
var $danhandrea$elm_time_extra$Month$days = F2(
	function (year, month) {
		switch (month.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $danhandrea$elm_time_extra$Util$isLeapYear(year) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $danhandrea$elm_time_extra$TimeExtra$daysInMonth = $danhandrea$elm_time_extra$Month$days;
var $terezka$intervals$Intervals$Time$toMs = $elm$time$Time$posixToMillis;
var $terezka$intervals$Intervals$Time$getDiff = F3(
	function (zone, a, b) {
		var _v0 = (_Utils_cmp(
			$terezka$intervals$Intervals$Time$toMs(a),
			$terezka$intervals$Intervals$Time$toMs(b)) < 0) ? _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b)) : _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a));
		var aP = _v0.a;
		var bP = _v0.b;
		var dMsX = bP.millisecond - aP.millisecond;
		var dMs = (dMsX < 0) ? (1000 + dMsX) : dMsX;
		var dSecondX = (bP.second - aP.second) + ((dMsX < 0) ? (-1) : 0);
		var dMinuteX = (bP.minute - aP.minute) + ((dSecondX < 0) ? (-1) : 0);
		var dHourX = (bP.hour - aP.hour) + ((dMinuteX < 0) ? (-1) : 0);
		var dDayX = (bP.day - aP.day) + ((dHourX < 0) ? (-1) : 0);
		var dDay = (dDayX < 0) ? (A2($danhandrea$elm_time_extra$TimeExtra$daysInMonth, bP.year, bP.month) + dDayX) : dDayX;
		var dMonthX = ($terezka$intervals$Intervals$Time$monthAsInt(bP.month) - $terezka$intervals$Intervals$Time$monthAsInt(aP.month)) + ((dDayX < 0) ? (-1) : 0);
		var dMonth = (dMonthX < 0) ? (12 + dMonthX) : dMonthX;
		var dHour = (dHourX < 0) ? (24 + dHourX) : dHourX;
		var dMinute = (dMinuteX < 0) ? (60 + dMinuteX) : dMinuteX;
		var dSecond = (dSecondX < 0) ? (60 + dSecondX) : dSecondX;
		var dYearX = (bP.year - aP.year) + ((dMonthX < 0) ? (-1) : 0);
		var dYear = (dYearX < 0) ? ($terezka$intervals$Intervals$Time$monthAsInt(bP.month) + dYearX) : dYearX;
		return {day: dDay, hour: dHour, millisecond: dMs, minute: dMinute, month: dMonth, second: dSecond, year: dYear};
	});
var $terezka$intervals$Intervals$Time$oneSecond = 1000;
var $terezka$intervals$Intervals$Time$oneMinute = $terezka$intervals$Intervals$Time$oneSecond * 60;
var $terezka$intervals$Intervals$Time$oneHour = $terezka$intervals$Intervals$Time$oneMinute * 60;
var $terezka$intervals$Intervals$Time$oneDay = $terezka$intervals$Intervals$Time$oneHour * 24;
var $terezka$intervals$Intervals$Time$oneMs = 1;
var $terezka$intervals$Intervals$Time$getNumOfTicks = F5(
	function (zone, unit, mult, a, b) {
		var div = F2(
			function (n1, n2) {
				return $elm$core$Basics$floor(n1 / n2);
			});
		var timeDiff = function (ms) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				A2(
					div,
					$terezka$intervals$Intervals$Time$toMs(b) - $terezka$intervals$Intervals$Time$toMs(ceiled),
					ms),
				mult);
		};
		var diff = function (property) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				property(
					A3($terezka$intervals$Intervals$Time$getDiff, zone, ceiled, b)),
				mult);
		};
		switch (unit.$) {
			case 'Millisecond':
				return timeDiff($terezka$intervals$Intervals$Time$oneMs) + 1;
			case 'Second':
				return timeDiff($terezka$intervals$Intervals$Time$oneSecond) + 1;
			case 'Minute':
				return timeDiff($terezka$intervals$Intervals$Time$oneMinute) + 1;
			case 'Hour':
				return timeDiff($terezka$intervals$Intervals$Time$oneHour) + 1;
			case 'Day':
				return timeDiff($terezka$intervals$Intervals$Time$oneDay) + 1;
			case 'Month':
				return diff(
					function (d) {
						return d.month + (d.year * 12);
					}) + 1;
			default:
				return diff(
					function ($) {
						return $.year;
					}) + 1;
		}
	});
var $terezka$intervals$Intervals$Time$largerUnit = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Second);
		case 'Second':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Minute);
		case 'Minute':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Hour);
		case 'Hour':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Day);
		case 'Day':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Month);
		case 'Month':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Year);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $terezka$intervals$Intervals$Time$niceMultiples = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500]);
		case 'Second':
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 'Minute':
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 'Hour':
			return _List_fromArray(
				[1, 2, 3, 4, 6, 8, 12]);
		case 'Day':
			return _List_fromArray(
				[1, 2, 3, 7, 14]);
		case 'Month':
			return _List_fromArray(
				[1, 2, 3, 4, 6]);
		default:
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500, 1000, 10000, 1000000, 10000000]);
	}
};
var $terezka$intervals$Intervals$Time$toBestUnit = F4(
	function (zone, amount, min, max) {
		var toNice = function (unit) {
			toNice:
			while (true) {
				var niceNums = $terezka$intervals$Intervals$Time$niceMultiples(unit);
				var maybeNiceNum = A2(
					$elm$core$List$filter,
					function (n) {
						return _Utils_cmp(
							A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, n, min, max),
							amount) < 1;
					},
					niceNums);
				var div = F2(
					function (n1, n2) {
						return $elm$core$Basics$ceiling(n1 / n2);
					});
				var _v0 = $elm$core$List$head(maybeNiceNum);
				if (_v0.$ === 'Just') {
					var niceNum = _v0.a;
					return _Utils_Tuple2(unit, niceNum);
				} else {
					var _v1 = $terezka$intervals$Intervals$Time$largerUnit(unit);
					if (_v1.$ === 'Just') {
						var larger = _v1.a;
						var $temp$unit = larger;
						unit = $temp$unit;
						continue toNice;
					} else {
						return _Utils_Tuple2($terezka$intervals$Intervals$Time$Year, 100000000);
					}
				}
			}
		};
		return toNice($terezka$intervals$Intervals$Time$Millisecond);
	});
var $terezka$intervals$Intervals$Time$toExtraUnit = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return $justinmimbs$time_extra$Time$Extra$Millisecond;
		case 'Second':
			return $justinmimbs$time_extra$Time$Extra$Second;
		case 'Minute':
			return $justinmimbs$time_extra$Time$Extra$Minute;
		case 'Hour':
			return $justinmimbs$time_extra$Time$Extra$Hour;
		case 'Day':
			return $justinmimbs$time_extra$Time$Extra$Day;
		case 'Month':
			return $justinmimbs$time_extra$Time$Extra$Month;
		default:
			return $justinmimbs$time_extra$Time$Extra$Year;
	}
};
var $terezka$intervals$Intervals$Time$unitToInt = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return 0;
		case 'Second':
			return 1;
		case 'Minute':
			return 2;
		case 'Hour':
			return 3;
		case 'Day':
			return 4;
		case 'Month':
			return 5;
		default:
			return 6;
	}
};
var $terezka$intervals$Intervals$Time$values = F4(
	function (zone, maxMmount, min, max) {
		var _v0 = A4($terezka$intervals$Intervals$Time$toBestUnit, zone, maxMmount, min, max);
		var unit = _v0.a;
		var mult = _v0.b;
		var amount = A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, mult, min, max);
		var initial = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, min);
		var tUnit = $terezka$intervals$Intervals$Time$toExtraUnit(unit);
		var toTick = F3(
			function (x, timestamp, change) {
				return {
					change: (_Utils_cmp(
						$terezka$intervals$Intervals$Time$unitToInt(change),
						$terezka$intervals$Intervals$Time$unitToInt(unit)) > 0) ? $elm$core$Maybe$Just(change) : $elm$core$Maybe$Nothing,
					isFirst: !x,
					multiple: mult,
					timestamp: timestamp,
					unit: unit,
					zone: zone
				};
			});
		var toTicks = F2(
			function (xs, acc) {
				toTicks:
				while (true) {
					if (xs.b) {
						var x = xs.a;
						var rest = xs.b;
						var prev = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, (x - 1) * mult, zone, initial);
						var curr = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, x * mult, zone, initial);
						var change = A3($terezka$intervals$Intervals$Time$getChange, zone, prev, curr);
						var $temp$xs = rest,
							$temp$acc = A2(
							$elm$core$List$cons,
							A3(toTick, x, curr, change),
							acc);
						xs = $temp$xs;
						acc = $temp$acc;
						continue toTicks;
					} else {
						return acc;
					}
				}
			});
		return $elm$core$List$reverse(
			A2(
				toTicks,
				A2($elm$core$List$range, 0, amount - 1),
				_List_Nil));
	});
var $terezka$intervals$Intervals$times = F3(
	function (zone, amount, range) {
		var toUnit = function (unit) {
			switch (unit.$) {
				case 'Millisecond':
					return $terezka$intervals$Intervals$Millisecond;
				case 'Second':
					return $terezka$intervals$Intervals$Second;
				case 'Minute':
					return $terezka$intervals$Intervals$Minute;
				case 'Hour':
					return $terezka$intervals$Intervals$Hour;
				case 'Day':
					return $terezka$intervals$Intervals$Day;
				case 'Month':
					return $terezka$intervals$Intervals$Month;
				default:
					return $terezka$intervals$Intervals$Year;
			}
		};
		var translateUnit = function (time) {
			return {
				change: A2($elm$core$Maybe$map, toUnit, time.change),
				isFirst: time.isFirst,
				multiple: time.multiple,
				timestamp: time.timestamp,
				unit: toUnit(time.unit),
				zone: time.zone
			};
		};
		var fromMs = function (ts) {
			return $elm$time$Time$millisToPosix(
				$elm$core$Basics$round(ts));
		};
		return A2(
			$elm$core$List$map,
			translateUnit,
			A4(
				$terezka$intervals$Intervals$Time$values,
				zone,
				amount,
				fromMs(range.min),
				fromMs(range.max)));
	});
var $terezka$elm_charts$Internal$Svg$times = function (zone) {
	return $terezka$elm_charts$Internal$Svg$Generator(
		F2(
			function (i, b) {
				return A3(
					$terezka$intervals$Intervals$times,
					zone,
					i,
					{max: b.max, min: b.min});
			}));
};
var $terezka$elm_charts$Chart$Svg$times = $terezka$elm_charts$Internal$Svg$times;
var $terezka$elm_charts$Chart$generateValues = F4(
	function (amount, tick, maybeFormat, axis) {
		var toTickValues = F2(
			function (toValue, toString) {
				return $elm$core$List$map(
					function (i) {
						return {
							label: function () {
								if (maybeFormat.$ === 'Just') {
									var formatter = maybeFormat.a;
									return formatter(
										toValue(i));
								} else {
									return toString(i);
								}
							}(),
							value: toValue(i)
						};
					});
			});
		switch (tick.$) {
			case 'Floats':
				return A3(
					toTickValues,
					$elm$core$Basics$identity,
					$elm$core$String$fromFloat,
					A3($terezka$elm_charts$Chart$Svg$generate, amount, $terezka$elm_charts$Chart$Svg$floats, axis));
			case 'Ints':
				return A3(
					toTickValues,
					$elm$core$Basics$toFloat,
					$elm$core$String$fromInt,
					A3($terezka$elm_charts$Chart$Svg$generate, amount, $terezka$elm_charts$Chart$Svg$ints, axis));
			default:
				var zone = tick.a;
				return A3(
					toTickValues,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Basics$toFloat, $elm$time$Time$posixToMillis),
						function ($) {
							return $.timestamp;
						}),
					$terezka$elm_charts$Chart$Svg$formatTime(zone),
					A3(
						$terezka$elm_charts$Chart$Svg$generate,
						amount,
						$terezka$elm_charts$Chart$Svg$times(zone),
						axis));
		}
	});
var $elm$svg$Svg$foreignObject = $elm$svg$Svg$trustedNode('foreignObject');
var $elm$svg$Svg$text_ = $elm$svg$Svg$trustedNode('text');
var $elm$svg$Svg$tspan = $elm$svg$Svg$trustedNode('tspan');
var $terezka$elm_charts$Internal$Svg$label = F4(
	function (plane, config, inner, point) {
		var _v0 = config.ellipsis;
		if (_v0.$ === 'Nothing') {
			var withOverflowWrap = function (el) {
				return config.hideOverflow ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_fromArray(
						[el])) : el;
			};
			var uppercaseStyle = config.uppercase ? 'text-transform: uppercase;' : '';
			var fontStyle = function () {
				var _v5 = config.fontSize;
				if (_v5.$ === 'Just') {
					var size_ = _v5.a;
					return 'font-size: ' + ($elm$core$String$fromInt(size_) + 'px;');
				} else {
					return '';
				}
			}();
			var anchorStyle = function () {
				var _v1 = config.anchor;
				if (_v1.$ === 'Nothing') {
					return 'text-anchor: middle;';
				} else {
					switch (_v1.a.$) {
						case 'End':
							var _v2 = _v1.a;
							return 'text-anchor: end;';
						case 'Start':
							var _v3 = _v1.a;
							return 'text-anchor: start;';
						default:
							var _v4 = _v1.a;
							return 'text-anchor: middle;';
					}
				}
			}();
			return withOverflowWrap(
				A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.attrs,
					$elm$svg$Svg$text_,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__label'),
							$elm$svg$Svg$Attributes$stroke(config.border),
							$elm$svg$Svg$Attributes$strokeWidth(
							$elm$core$String$fromFloat(config.borderWidth)),
							$elm$svg$Svg$Attributes$fill(config.color),
							A6($terezka$elm_charts$Internal$Svg$position, plane, -config.rotate, point.x, point.y, config.xOff, config.yOff),
							$elm$svg$Svg$Attributes$style(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									['pointer-events: none;', fontStyle, anchorStyle, uppercaseStyle])))
						]),
					_List_fromArray(
						[
							A2($elm$svg$Svg$tspan, _List_Nil, inner)
						])));
		} else {
			var ellipsis = _v0.a;
			var xOffWithAnchor = function () {
				var _v11 = config.anchor;
				if (_v11.$ === 'Nothing') {
					return config.xOff - (ellipsis.width / 2);
				} else {
					switch (_v11.a.$) {
						case 'End':
							var _v12 = _v11.a;
							return config.xOff - ellipsis.width;
						case 'Start':
							var _v13 = _v11.a;
							return config.xOff;
						default:
							var _v14 = _v11.a;
							return config.xOff - (ellipsis.width / 2);
					}
				}
			}();
			var withOverflowWrap = function (el) {
				return config.hideOverflow ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_fromArray(
						[el])) : el;
			};
			var uppercaseStyle = config.uppercase ? A2($elm$html$Html$Attributes$style, 'text-transform', 'uppercase') : A2($elm$html$Html$Attributes$style, '', '');
			var fontStyle = function () {
				var _v10 = config.fontSize;
				if (_v10.$ === 'Just') {
					var size_ = _v10.a;
					return A2(
						$elm$html$Html$Attributes$style,
						'font-size',
						$elm$core$String$fromInt(size_) + 'px');
				} else {
					return A2($elm$html$Html$Attributes$style, '', '');
				}
			}();
			var anchorStyle = function () {
				var _v6 = config.anchor;
				if (_v6.$ === 'Nothing') {
					return A2($elm$html$Html$Attributes$style, 'text-align', 'center');
				} else {
					switch (_v6.a.$) {
						case 'End':
							var _v7 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'right');
						case 'Start':
							var _v8 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'left');
						default:
							var _v9 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'center');
					}
				}
			}();
			return withOverflowWrap(
				A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.attrs,
					$elm$svg$Svg$foreignObject,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__label'),
							$elm$svg$Svg$Attributes$class('elm-charts__html-label'),
							$elm$svg$Svg$Attributes$width(
							$elm$core$String$fromFloat(ellipsis.width)),
							$elm$svg$Svg$Attributes$height(
							$elm$core$String$fromFloat(ellipsis.height)),
							A6($terezka$elm_charts$Internal$Svg$position, plane, -config.rotate, point.x, point.y, xOffWithAnchor, config.yOff - 10)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$attribute, 'xmlns', 'http://www.w3.org/1999/xhtml'),
									A2($elm$html$Html$Attributes$style, 'white-space', 'nowrap'),
									A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
									A2($elm$html$Html$Attributes$style, 'text-overflow', 'ellipsis'),
									A2($elm$html$Html$Attributes$style, 'height', '100%'),
									A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
									A2($elm$html$Html$Attributes$style, 'color', config.color),
									fontStyle,
									uppercaseStyle,
									anchorStyle
								]),
							inner)
						])));
		}
	});
var $terezka$elm_charts$Chart$xLabels = function (edits) {
	var toTicks = F2(
		function (p, config) {
			return A4(
				$terezka$elm_charts$Chart$generateValues,
				config.amount,
				config.generate,
				config.format,
				A3(
					$elm$core$List$foldl,
					F2(
						function (f, x) {
							return f(x);
						}),
					p.x,
					config.limits));
		});
	var toTickValues = F3(
		function (p, config, ts) {
			return (!config.grid) ? ts : _Utils_update(
				ts,
				{
					xs: _Utils_ap(
						ts.xs,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.value;
							},
							A2(toTicks, p, config)))
				});
		});
	var toConfig = function (p) {
		return A2(
			$terezka$elm_charts$Internal$Helpers$apply,
			edits,
			{amount: 5, anchor: $elm$core$Maybe$Nothing, attrs: _List_Nil, color: '#808BAB', ellipsis: $elm$core$Maybe$Nothing, flip: false, fontSize: $elm$core$Maybe$Nothing, format: $elm$core$Maybe$Nothing, generate: $terezka$elm_charts$Internal$Svg$Floats, grid: false, hideOverflow: false, limits: _List_Nil, pinned: $terezka$elm_charts$Chart$Attributes$zero, rotate: 0, uppercase: false, xOff: 0, yOff: 18});
	};
	return A3(
		$terezka$elm_charts$Chart$LabelsElement,
		toConfig,
		toTickValues,
		F2(
			function (p, config) {
				var _default = $terezka$elm_charts$Internal$Svg$defaultLabel;
				var toLabel = function (item) {
					return A4(
						$terezka$elm_charts$Internal$Svg$label,
						p,
						_Utils_update(
							_default,
							{
								anchor: config.anchor,
								attrs: config.attrs,
								color: config.color,
								ellipsis: config.ellipsis,
								fontSize: config.fontSize,
								hideOverflow: config.hideOverflow,
								rotate: config.rotate,
								uppercase: config.uppercase,
								xOff: config.xOff,
								yOff: config.flip ? ((-config.yOff) + 10) : config.yOff
							}),
						_List_fromArray(
							[
								$elm$svg$Svg$text(item.label)
							]),
						{
							x: item.value,
							y: config.pinned(p.y)
						});
				};
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__x-labels')
						]),
					A2(
						$elm$core$List$map,
						toLabel,
						A2(toTicks, p, config)));
			}));
};
var $terezka$elm_charts$Chart$TicksElement = F2(
	function (a, b) {
		return {$: 'TicksElement', a: a, b: b};
	});
var $terezka$elm_charts$Chart$Attributes$length = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{length: v});
	});
var $terezka$elm_charts$Internal$Svg$defaultTick = {attrs: _List_Nil, color: 'rgb(210, 210, 210)', length: 5, width: 1};
var $terezka$elm_charts$Internal$Svg$tick = F4(
	function (plane, config, isX, point) {
		return A4(
			$terezka$elm_charts$Internal$Svg$withAttrs,
			config.attrs,
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$class('elm-charts__tick'),
					$elm$svg$Svg$Attributes$stroke(config.color),
					$elm$svg$Svg$Attributes$strokeWidth(
					$elm$core$String$fromFloat(config.width)),
					$elm$svg$Svg$Attributes$x1(
					$elm$core$String$fromFloat(
						A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, point.x))),
					$elm$svg$Svg$Attributes$x2(
					$elm$core$String$fromFloat(
						A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, point.x) + (isX ? 0 : (-config.length)))),
					$elm$svg$Svg$Attributes$y1(
					$elm$core$String$fromFloat(
						A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, point.y))),
					$elm$svg$Svg$Attributes$y2(
					$elm$core$String$fromFloat(
						A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, point.y) + (isX ? config.length : 0)))
				]),
			_List_Nil);
	});
var $terezka$elm_charts$Internal$Svg$xTick = F3(
	function (plane, config, point) {
		return A4($terezka$elm_charts$Internal$Svg$tick, plane, config, true, point);
	});
var $terezka$elm_charts$Chart$Svg$xTick = F2(
	function (plane, edits) {
		return A2(
			$terezka$elm_charts$Internal$Svg$xTick,
			plane,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultTick));
	});
var $terezka$elm_charts$Chart$xTicks = function (edits) {
	var config = A2(
		$terezka$elm_charts$Internal$Helpers$apply,
		edits,
		{amount: 5, color: '', flip: false, generate: $terezka$elm_charts$Internal$Svg$Floats, grid: true, height: 5, limits: _List_Nil, pinned: $terezka$elm_charts$Chart$Attributes$zero, width: 1});
	var toTicks = function (p) {
		return A2(
			$elm$core$List$map,
			function ($) {
				return $.value;
			},
			A4(
				$terezka$elm_charts$Chart$generateValues,
				config.amount,
				config.generate,
				$elm$core$Maybe$Nothing,
				A3(
					$elm$core$List$foldl,
					F2(
						function (f, x) {
							return f(x);
						}),
					p.x,
					config.limits)));
	};
	var addTickValues = F2(
		function (p, ts) {
			return (!config.grid) ? ts : _Utils_update(
				ts,
				{
					xs: _Utils_ap(
						ts.xs,
						toTicks(p))
				});
		});
	return A2(
		$terezka$elm_charts$Chart$TicksElement,
		addTickValues,
		function (p) {
			var toTick = function (x) {
				return A3(
					$terezka$elm_charts$Chart$Svg$xTick,
					p,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(config.color),
							$terezka$elm_charts$Chart$Attributes$length(
							config.flip ? (-config.height) : config.height),
							$terezka$elm_charts$Chart$Attributes$width(config.width)
						]),
					{
						x: x,
						y: config.pinned(p.y)
					});
			};
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__x-ticks')
					]),
				A2(
					$elm$core$List$map,
					toTick,
					toTicks(p)));
		});
};
var $terezka$elm_charts$Chart$Attributes$y2 = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				y2: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$elm_charts$Chart$Attributes$rotate = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{rotate: config.rotate + v});
	});
var $terezka$elm_charts$Chart$yAxis = function (edits) {
	var config = A2(
		$terezka$elm_charts$Internal$Helpers$apply,
		edits,
		{arrow: true, color: '', limits: _List_Nil, pinned: $terezka$elm_charts$Chart$Attributes$zero, width: 1});
	var addTickValues = F2(
		function (p, ts) {
			return _Utils_update(
				ts,
				{
					xAxis: A2(
						$elm$core$List$cons,
						config.pinned(p.x),
						ts.xAxis)
				});
		});
	return A2(
		$terezka$elm_charts$Chart$AxisElement,
		addTickValues,
		function (p) {
			var yLimit = A3(
				$elm$core$List$foldl,
				F2(
					function (f, y) {
						return f(y);
					}),
				p.y,
				config.limits);
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__y-axis')
					]),
				_List_fromArray(
					[
						A2(
						$terezka$elm_charts$Chart$Svg$line,
						p,
						_List_fromArray(
							[
								$terezka$elm_charts$Chart$Attributes$color(config.color),
								$terezka$elm_charts$Chart$Attributes$width(config.width),
								$terezka$elm_charts$Chart$Attributes$x1(
								config.pinned(p.x)),
								$terezka$elm_charts$Chart$Attributes$y1(
								A2($elm$core$Basics$max, p.y.min, yLimit.min)),
								$terezka$elm_charts$Chart$Attributes$y2(
								A2($elm$core$Basics$min, p.y.max, yLimit.max))
							])),
						config.arrow ? A3(
						$terezka$elm_charts$Chart$Svg$arrow,
						p,
						_List_fromArray(
							[
								$terezka$elm_charts$Chart$Attributes$color(config.color),
								$terezka$elm_charts$Chart$Attributes$rotate(-90)
							]),
						{
							x: config.pinned(p.x),
							y: yLimit.max
						}) : $elm$svg$Svg$text('')
					]));
		});
};
var $terezka$elm_charts$Internal$Svg$End = {$: 'End'};
var $terezka$elm_charts$Internal$Svg$Start = {$: 'Start'};
var $terezka$elm_charts$Chart$yLabels = function (edits) {
	var toTicks = F2(
		function (p, config) {
			return A4(
				$terezka$elm_charts$Chart$generateValues,
				config.amount,
				config.generate,
				config.format,
				A3(
					$elm$core$List$foldl,
					F2(
						function (f, y) {
							return f(y);
						}),
					p.y,
					config.limits));
		});
	var toTickValues = F3(
		function (p, config, ts) {
			return (!config.grid) ? ts : _Utils_update(
				ts,
				{
					ys: _Utils_ap(
						ts.ys,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.value;
							},
							A2(toTicks, p, config)))
				});
		});
	var toConfig = function (p) {
		return A2(
			$terezka$elm_charts$Internal$Helpers$apply,
			edits,
			{amount: 5, anchor: $elm$core$Maybe$Nothing, attrs: _List_Nil, color: '#808BAB', ellipsis: $elm$core$Maybe$Nothing, flip: false, fontSize: $elm$core$Maybe$Nothing, format: $elm$core$Maybe$Nothing, generate: $terezka$elm_charts$Internal$Svg$Floats, grid: false, hideOverflow: false, limits: _List_Nil, pinned: $terezka$elm_charts$Chart$Attributes$zero, rotate: 0, uppercase: false, xOff: -10, yOff: 3});
	};
	return A3(
		$terezka$elm_charts$Chart$LabelsElement,
		toConfig,
		toTickValues,
		F2(
			function (p, config) {
				var _default = $terezka$elm_charts$Internal$Svg$defaultLabel;
				var toLabel = function (item) {
					return A4(
						$terezka$elm_charts$Internal$Svg$label,
						p,
						_Utils_update(
							_default,
							{
								anchor: function () {
									var _v0 = config.anchor;
									if (_v0.$ === 'Nothing') {
										return $elm$core$Maybe$Just(
											config.flip ? $terezka$elm_charts$Internal$Svg$Start : $terezka$elm_charts$Internal$Svg$End);
									} else {
										var anchor = _v0.a;
										return $elm$core$Maybe$Just(anchor);
									}
								}(),
								attrs: config.attrs,
								color: config.color,
								ellipsis: config.ellipsis,
								fontSize: config.fontSize,
								hideOverflow: config.hideOverflow,
								rotate: config.rotate,
								uppercase: config.uppercase,
								xOff: config.flip ? (-config.xOff) : config.xOff,
								yOff: config.yOff
							}),
						_List_fromArray(
							[
								$elm$svg$Svg$text(item.label)
							]),
						{
							x: config.pinned(p.x),
							y: item.value
						});
				};
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__y-labels')
						]),
					A2(
						$elm$core$List$map,
						toLabel,
						A2(toTicks, p, config)));
			}));
};
var $terezka$elm_charts$Internal$Svg$yTick = F3(
	function (plane, config, point) {
		return A4($terezka$elm_charts$Internal$Svg$tick, plane, config, false, point);
	});
var $terezka$elm_charts$Chart$Svg$yTick = F2(
	function (plane, edits) {
		return A2(
			$terezka$elm_charts$Internal$Svg$yTick,
			plane,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultTick));
	});
var $terezka$elm_charts$Chart$yTicks = function (edits) {
	var config = A2(
		$terezka$elm_charts$Internal$Helpers$apply,
		edits,
		{amount: 5, color: '', flip: false, generate: $terezka$elm_charts$Internal$Svg$Floats, grid: true, height: 5, limits: _List_Nil, pinned: $terezka$elm_charts$Chart$Attributes$zero, width: 1});
	var toTicks = function (p) {
		return A2(
			$elm$core$List$map,
			function ($) {
				return $.value;
			},
			A4(
				$terezka$elm_charts$Chart$generateValues,
				config.amount,
				config.generate,
				$elm$core$Maybe$Nothing,
				A3(
					$elm$core$List$foldl,
					F2(
						function (f, y) {
							return f(y);
						}),
					p.y,
					config.limits)));
	};
	var addTickValues = F2(
		function (p, ts) {
			return _Utils_update(
				ts,
				{
					ys: _Utils_ap(
						ts.ys,
						toTicks(p))
				});
		});
	return A2(
		$terezka$elm_charts$Chart$TicksElement,
		addTickValues,
		function (p) {
			var toTick = function (y) {
				return A3(
					$terezka$elm_charts$Chart$Svg$yTick,
					p,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(config.color),
							$terezka$elm_charts$Chart$Attributes$length(
							config.flip ? (-config.height) : config.height),
							$terezka$elm_charts$Chart$Attributes$width(config.width)
						]),
					{
						x: config.pinned(p.x),
						y: y
					});
			};
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__y-ticks')
					]),
				A2(
					$elm$core$List$map,
					toTick,
					toTicks(p)));
		});
};
var $author$project$ViewProfileCharts$view = F4(
	function (context, _v0, track, msgWrapper) {
		var givenWidth = _v0.a;
		var givenHeight = _v0.b;
		var markerLineAtDistance = F2(
			function (p, dist) {
				return $terezka$elm_charts$Chart$line(
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$x1(dist),
							$terezka$elm_charts$Chart$Attributes$y1(p.y.min),
							$terezka$elm_charts$Chart$Attributes$y2(p.y.max),
							$terezka$elm_charts$Chart$Attributes$dashed(
							_List_fromArray(
								[2, 2])),
							$terezka$elm_charts$Chart$Attributes$width(1),
							$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$darkBlue)
						]));
			});
		var lengthConversion = context.imperial ? $ianmackenzie$elm_units$Length$inMiles : $ianmackenzie$elm_units$Length$inMeters;
		var problemMarkers = $terezka$elm_charts$Chart$withPlane(
			function (p) {
				return A2(
					$elm$core$List$map,
					function (idx) {
						return A2(
							markerLineAtDistance,
							p,
							lengthConversion(
								A2($author$project$DomainModel$distanceFromIndex, idx, track.trackTree)));
					},
					context.gradientProblems);
			});
		var currentPointGradient = $author$project$DomainModel$gradientFromNode(
			A2($author$project$DomainModel$leafFromIndex, track.currentPosition, track.trackTree));
		var currentPointDistance = (context.imperial ? $ianmackenzie$elm_units$Length$inMiles : $ianmackenzie$elm_units$Length$inMeters)(
			A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree));
		var currentPointAltitude = (context.imperial ? $ianmackenzie$elm_units$Length$inFeet : $ianmackenzie$elm_units$Length$inMeters)(
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(
				A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree)));
		var backgroundColour = $author$project$UtilsForViews$colourHexString($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite);
		var _v1 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Pixels$inPixels(
				$ianmackenzie$elm_units$Quantity$toFloatQuantity(givenWidth)),
			$ianmackenzie$elm_units$Pixels$inPixels(
				A2(
					$ianmackenzie$elm_units$Quantity$multiplyBy,
					1.0 - $author$project$ViewProfileCharts$splitProportion,
					$ianmackenzie$elm_units$Quantity$toFloatQuantity(givenHeight))));
		var gradientWidth = _v1.a;
		var gradientHeight = _v1.b;
		var _v2 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Pixels$inPixels(
				$ianmackenzie$elm_units$Quantity$toFloatQuantity(givenWidth)),
			$ianmackenzie$elm_units$Pixels$inPixels(
				A2(
					$ianmackenzie$elm_units$Quantity$multiplyBy,
					$author$project$ViewProfileCharts$splitProportion,
					$ianmackenzie$elm_units$Quantity$toFloatQuantity(givenHeight))));
		var altitudeWidth = _v2.a;
		var altitudeHeight = _v2.b;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								$elm$core$Basics$round(altitudeWidth))),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(
								$elm$core$Basics$round(altitudeHeight))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWheel(
								function (event) {
									return msgWrapper(
										$author$project$ViewProfileCharts$ImageMouseWheel(event.deltaY));
								}))
						]),
					$mdgriffith$elm_ui$Element$html(
						A2(
							$terezka$elm_charts$Chart$chart,
							_List_fromArray(
								[
									$terezka$elm_charts$Chart$Attributes$height(altitudeHeight),
									$terezka$elm_charts$Chart$Attributes$width(altitudeWidth),
									$terezka$elm_charts$Chart$Attributes$htmlAttrs(
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'background', backgroundColour)
										])),
									$terezka$elm_charts$Chart$Attributes$range(
									_List_fromArray(
										[$terezka$elm_charts$Chart$Attributes$likeData])),
									$terezka$elm_charts$Chart$Attributes$domain(
									_List_fromArray(
										[$terezka$elm_charts$Chart$Attributes$likeData])),
									$terezka$elm_charts$Chart$Attributes$margin(
									{bottom: 30, left: 30, right: 20, top: 10}),
									$terezka$elm_charts$Chart$Attributes$padding(
									{bottom: 30, left: 20, right: 20, top: 10}),
									A2(
									$terezka$elm_charts$Chart$Events$onClick,
									A2(
										$elm$core$Basics$composeL,
										A2($elm$core$Basics$composeL, msgWrapper, $author$project$ViewProfileCharts$ImageClick),
										$elm$core$Maybe$Just),
									$terezka$elm_charts$Chart$Events$getCoords)
								]),
							_List_fromArray(
								[
									$terezka$elm_charts$Chart$xAxis(_List_Nil),
									$terezka$elm_charts$Chart$xTicks(_List_Nil),
									$terezka$elm_charts$Chart$xLabels(_List_Nil),
									$terezka$elm_charts$Chart$yAxis(_List_Nil),
									$terezka$elm_charts$Chart$yTicks(_List_Nil),
									$terezka$elm_charts$Chart$yLabels(_List_Nil),
									$terezka$elm_charts$Chart$withPlane(
									function (p) {
										return _List_fromArray(
											[
												$terezka$elm_charts$Chart$line(
												_List_fromArray(
													[
														$terezka$elm_charts$Chart$Attributes$x1(p.x.min),
														$terezka$elm_charts$Chart$Attributes$y1(currentPointAltitude),
														$terezka$elm_charts$Chart$Attributes$x2(p.x.max),
														$terezka$elm_charts$Chart$Attributes$dashed(
														_List_fromArray(
															[5, 5])),
														$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$red)
													])),
												$terezka$elm_charts$Chart$line(
												_List_fromArray(
													[
														$terezka$elm_charts$Chart$Attributes$x1(currentPointDistance),
														$terezka$elm_charts$Chart$Attributes$y1(p.y.min),
														$terezka$elm_charts$Chart$Attributes$y2(p.y.max),
														$terezka$elm_charts$Chart$Attributes$dashed(
														_List_fromArray(
															[5, 5])),
														$terezka$elm_charts$Chart$Attributes$width(2),
														$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$red)
													]))
											]);
									}),
									problemMarkers,
									A3(
									$terezka$elm_charts$Chart$series,
									function ($) {
										return $.distance;
									},
									_List_fromArray(
										[
											A3(
											$terezka$elm_charts$Chart$interpolated,
											function ($) {
												return $.altitude;
											},
											_List_fromArray(
												[
													$terezka$elm_charts$Chart$Attributes$width(2),
													$terezka$elm_charts$Chart$Attributes$opacity(0.2),
													$terezka$elm_charts$Chart$Attributes$gradient(_List_Nil)
												]),
											_List_Nil)
										]),
									context.profileData),
									A3(
									$terezka$elm_charts$Chart$series,
									function ($) {
										return $.distance;
									},
									_List_fromArray(
										[
											A3(
											$terezka$elm_charts$Chart$interpolated,
											function ($) {
												return $.altitude;
											},
											_List_fromArray(
												[
													$terezka$elm_charts$Chart$Attributes$width(2),
													$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$green),
													$terezka$elm_charts$Chart$Attributes$opacity(0.2),
													$terezka$elm_charts$Chart$Attributes$gradient(_List_Nil)
												]),
											_List_Nil)
										]),
									context.previewData)
								])))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								$elm$core$Basics$round(gradientWidth))),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(
								$elm$core$Basics$round(gradientHeight))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWheel(
								function (event) {
									return msgWrapper(
										$author$project$ViewProfileCharts$ImageMouseWheel(event.deltaY));
								}))
						]),
					$mdgriffith$elm_ui$Element$html(
						A2(
							$terezka$elm_charts$Chart$chart,
							_List_fromArray(
								[
									$terezka$elm_charts$Chart$Attributes$height(gradientHeight),
									$terezka$elm_charts$Chart$Attributes$width(gradientWidth),
									$terezka$elm_charts$Chart$Attributes$htmlAttrs(
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'background', backgroundColour)
										])),
									$terezka$elm_charts$Chart$Attributes$range(
									_List_fromArray(
										[$terezka$elm_charts$Chart$Attributes$likeData])),
									$terezka$elm_charts$Chart$Attributes$domain(
									_List_fromArray(
										[$terezka$elm_charts$Chart$Attributes$likeData])),
									$terezka$elm_charts$Chart$Attributes$margin(
									{bottom: 30, left: 30, right: 20, top: 20}),
									$terezka$elm_charts$Chart$Attributes$padding(
									{bottom: 20, left: 20, right: 20, top: 20}),
									A2(
									$terezka$elm_charts$Chart$Events$onClick,
									A2(
										$elm$core$Basics$composeL,
										A2($elm$core$Basics$composeL, msgWrapper, $author$project$ViewProfileCharts$ImageClick),
										$elm$core$Maybe$Just),
									$terezka$elm_charts$Chart$Events$getCoords)
								]),
							_List_fromArray(
								[
									$terezka$elm_charts$Chart$xAxis(_List_Nil),
									$terezka$elm_charts$Chart$xTicks(_List_Nil),
									$terezka$elm_charts$Chart$xLabels(_List_Nil),
									$terezka$elm_charts$Chart$yAxis(_List_Nil),
									$terezka$elm_charts$Chart$yTicks(_List_Nil),
									$terezka$elm_charts$Chart$yLabels(_List_Nil),
									$terezka$elm_charts$Chart$withPlane(
									function (p) {
										return _List_fromArray(
											[
												$terezka$elm_charts$Chart$line(
												_List_fromArray(
													[
														$terezka$elm_charts$Chart$Attributes$x1(p.x.min),
														$terezka$elm_charts$Chart$Attributes$y1(currentPointGradient),
														$terezka$elm_charts$Chart$Attributes$x2(p.x.max),
														$terezka$elm_charts$Chart$Attributes$dashed(
														_List_fromArray(
															[5, 5])),
														$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$red)
													])),
												$terezka$elm_charts$Chart$line(
												_List_fromArray(
													[
														$terezka$elm_charts$Chart$Attributes$x1(currentPointDistance),
														$terezka$elm_charts$Chart$Attributes$y1(p.y.min),
														$terezka$elm_charts$Chart$Attributes$y2(p.y.max),
														$terezka$elm_charts$Chart$Attributes$dashed(
														_List_fromArray(
															[5, 5])),
														$terezka$elm_charts$Chart$Attributes$width(2),
														$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$red)
													]))
											]);
									}),
									problemMarkers,
									A3(
									$terezka$elm_charts$Chart$series,
									function ($) {
										return $.distance;
									},
									_List_fromArray(
										[
											A3(
											$terezka$elm_charts$Chart$interpolated,
											function ($) {
												return $.gradient;
											},
											_List_fromArray(
												[
													$terezka$elm_charts$Chart$Attributes$width(2),
													$terezka$elm_charts$Chart$Attributes$stepped
												]),
											_List_Nil)
										]),
									context.profileData),
									A3(
									$terezka$elm_charts$Chart$series,
									function ($) {
										return $.distance;
									},
									_List_fromArray(
										[
											A3(
											$terezka$elm_charts$Chart$interpolated,
											function ($) {
												return $.gradient;
											},
											_List_fromArray(
												[
													$terezka$elm_charts$Chart$Attributes$width(2),
													$terezka$elm_charts$Chart$Attributes$stepped,
													$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$green)
												]),
											_List_Nil)
										]),
									context.previewData)
								]))))
				]));
	});
var $author$project$ViewThirdPerson$ImageClick = function (a) {
	return {$: 'ImageClick', a: a};
};
var $author$project$ViewThirdPerson$ImageDoubleClick = function (a) {
	return {$: 'ImageDoubleClick', a: a};
};
var $author$project$ViewThirdPerson$ImageDrag = function (a) {
	return {$: 'ImageDrag', a: a};
};
var $author$project$ViewThirdPerson$ImageGrab = function (a) {
	return {$: 'ImageGrab', a: a};
};
var $author$project$ViewThirdPerson$ImageMouseWheel = function (a) {
	return {$: 'ImageMouseWheel', a: a};
};
var $author$project$ViewThirdPerson$ImageNoOp = {$: 'ImageNoOp'};
var $author$project$ViewThirdPerson$ImageRelease = function (a) {
	return {$: 'ImageRelease', a: a};
};
var $author$project$ViewThirdPerson$onContextMenu = function (msg) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$custom,
			'contextmenu',
			$elm$json$Json$Decode$succeed(
				{message: msg, preventDefault: true, stopPropagation: true})));
};
var $author$project$ViewThirdPerson$ImageReset = {$: 'ImageReset'};
var $author$project$ViewThirdPerson$ImageZoomIn = {$: 'ImageZoomIn'};
var $author$project$ViewThirdPerson$ImageZoomOut = {$: 'ImageZoomOut'};
var $author$project$ViewThirdPerson$ToggleFollowOrange = {$: 'ToggleFollowOrange'};
var $author$project$ViewThirdPerson$zoomButtons = F2(
	function (msgWrapper, context) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$moveDown(5),
					$mdgriffith$elm_ui$Element$moveLeft(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$white),
					$mdgriffith$elm_ui$Element$Font$size(40),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'click',
						$author$project$ViewThirdPerson$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewThirdPerson$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'dblclick',
						$author$project$ViewThirdPerson$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewThirdPerson$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mousedown',
						$author$project$ViewThirdPerson$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewThirdPerson$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mouseup',
						$author$project$ViewThirdPerson$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewThirdPerson$ImageNoOp),
							msgWrapper)))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$plus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewThirdPerson$ImageZoomIn))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$minus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewThirdPerson$ImageZoomOut))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$maximize),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewThirdPerson$ImageReset))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: context.followSelectedPoint ? $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$lock) : $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$unlock),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewThirdPerson$ToggleFollowOrange))
					})
				]));
	});
var $author$project$ViewThirdPerson$view = F5(
	function (context, contentArea, track, scene, msgWrapper) {
		var dragging = context.dragAction;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDown(
						A2($elm$core$Basics$composeR, $author$project$ViewThirdPerson$ImageGrab, msgWrapper))),
					(!_Utils_eq(dragging, $author$project$ViewThirdPerson$DragNone)) ? $mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onMove(
						A2($elm$core$Basics$composeR, $author$project$ViewThirdPerson$ImageDrag, msgWrapper))) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onUp(
						A2($elm$core$Basics$composeR, $author$project$ViewThirdPerson$ImageRelease, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick(
						A2($elm$core$Basics$composeR, $author$project$ViewThirdPerson$ImageClick, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDoubleClick(
						A2($elm$core$Basics$composeR, $author$project$ViewThirdPerson$ImageDoubleClick, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWheel(
						function (event) {
							return msgWrapper(
								$author$project$ViewThirdPerson$ImageMouseWheel(event.deltaY));
						})),
					$author$project$ViewThirdPerson$onContextMenu(
					msgWrapper($author$project$ViewThirdPerson$ImageNoOp)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$Border$width(0),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$ViewThirdPerson$zoomButtons, msgWrapper, context))
				]),
			$mdgriffith$elm_ui$Element$html(
				$ianmackenzie$elm_3d_scene$Scene3d$sunny(
					{
						background: $ianmackenzie$elm_3d_scene$Scene3d$backgroundColor($avh4$elm_color$Color$lightBlue),
						camera: A3($author$project$ViewThirdPerson$deriveCamera, track.trackTree, context, track.currentPosition),
						clipDepth: $ianmackenzie$elm_units$Length$meters(1),
						dimensions: contentArea,
						entities: scene,
						shadows: false,
						sunlightDirection: $ianmackenzie$elm_geometry$Direction3d$negativeZ,
						upDirection: $ianmackenzie$elm_geometry$Direction3d$positiveZ
					})));
	});
var $author$project$PaneLayoutManager$SetViewMode = F2(
	function (a, b) {
		return {$: 'SetViewMode', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$optionWith = F2(
	function (val, view) {
		return A2($mdgriffith$elm_ui$Element$Input$Option, val, view);
	});
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$clearChill = A3($mdgriffith$elm_ui$Element$rgb255, 30, 144, 255);
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$prestigeBlue = A3($mdgriffith$elm_ui$Element$rgb255, 47, 53, 66);
var $author$project$ViewPureStyles$radioButton = F2(
	function (label, state) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(1),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$clearChill),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? {bottom: 0, left: 2, right: 2, top: 2} : {bottom: 0, left: 1, right: 1, top: 1}),
					$mdgriffith$elm_ui$Element$Background$color(
					_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? $smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite : $smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
					$mdgriffith$elm_ui$Element$Font$color(
					_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? $smucode$elm_flat_colors$FlatColors$ChinesePalette$prestigeBlue : $smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
				$mdgriffith$elm_ui$Element$text(label)));
	});
var $author$project$PaneLayoutManager$viewModeChoices = F2(
	function (msgWrapper, context) {
		var fullOptionList = _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$PaneLayoutManager$ViewMap,
				$author$project$ViewPureStyles$radioButton('Map')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$PaneLayoutManager$ViewThird,
				$author$project$ViewPureStyles$radioButton('Perspective')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$PaneLayoutManager$ViewProfile,
				$author$project$ViewPureStyles$radioButton('Profile')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$PaneLayoutManager$ViewPlan,
				$author$project$ViewPureStyles$radioButton('Plan'))
			]);
		return A2(
			$mdgriffith$elm_ui$Element$Input$radioRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 4, right: 0, top: 4})
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Choose view'),
				onChange: A2(
					$elm$core$Basics$composeL,
					msgWrapper,
					$author$project$PaneLayoutManager$SetViewMode(context.paneId)),
				options: fullOptionList,
				selected: $elm$core$Maybe$Just(context.activeView)
			});
	});
var $author$project$PaneLayoutManager$viewModeChoicesNoMap = F2(
	function (msgWrapper, pane) {
		var reducedOptionList = _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$PaneLayoutManager$ViewThird,
				$author$project$ViewPureStyles$radioButton('Perspective')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$PaneLayoutManager$ViewProfile,
				$author$project$ViewPureStyles$radioButton('Profile')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$PaneLayoutManager$ViewPlan,
				$author$project$ViewPureStyles$radioButton('Plan'))
			]);
		return A2(
			$mdgriffith$elm_ui$Element$Input$radioRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Choose view'),
				onChange: A2(
					$elm$core$Basics$composeL,
					msgWrapper,
					$author$project$PaneLayoutManager$SetViewMode(pane.paneId)),
				options: reducedOptionList,
				selected: $elm$core$Maybe$Just(pane.activeView)
			});
	});
var $author$project$ViewPureStyles$wideSliderStylesWithWidth = function (w) {
	var usedWidth = $elm$core$Basics$round(
		0.8 * $ianmackenzie$elm_units$Pixels$toInt(w));
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(24)),
			$mdgriffith$elm_ui$Element$width(
			$mdgriffith$elm_ui$Element$px(usedWidth)),
			$mdgriffith$elm_ui$Element$centerY,
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$behindContent(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(usedWidth)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(2)),
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$Background$color($author$project$ColourPalette$scrollbarBackground),
						$mdgriffith$elm_ui$Element$Border$rounded(6)
					]),
				$mdgriffith$elm_ui$Element$none))
		]);
};
var $author$project$PaneLayoutManager$viewPanes = F4(
	function (msgWrapper, mTrack, _v0, options) {
		var w = _v0.a;
		var h = _v0.b;
		var slider = function () {
			if (mTrack.$ === 'Just') {
				var track = mTrack.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					A2(
						$mdgriffith$elm_ui$Element$Input$slider,
						$author$project$ViewPureStyles$wideSliderStylesWithWidth(w),
						{
							label: $mdgriffith$elm_ui$Element$Input$labelHidden('Current position slider'),
							max: $author$project$DomainModel$skipCount(track.trackTree),
							min: 0,
							onChange: A2(
								$elm$core$Basics$composeR,
								$elm$core$Basics$round,
								A2($elm$core$Basics$composeR, $author$project$PaneLayoutManager$SetCurrentPosition, msgWrapper)),
							step: $elm$core$Maybe$Just(1),
							thumb: $author$project$ViewPureStyles$sliderThumb,
							value: track.currentPosition
						}));
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}();
		var _v1 = A2(
			$author$project$PaneLayoutManager$dimensionsWithLayout,
			options.paneLayout,
			_Utils_Tuple2(w, h));
		var paneWidth = _v1.a;
		var paneHeight = _v1.b;
		var showNonMapViews = function (pane) {
			var _v3 = pane.activeView;
			switch (_v3.$) {
				case 'ViewThird':
					var _v4 = _Utils_Tuple2(pane.thirdPersonContext, mTrack);
					if ((_v4.a.$ === 'Just') && (_v4.b.$ === 'Just')) {
						var context = _v4.a.a;
						var track = _v4.b.a;
						return A5(
							$author$project$ViewThirdPerson$view,
							context,
							_Utils_Tuple2(paneWidth, paneHeight),
							track,
							options.scene3d,
							A2(
								$elm$core$Basics$composeL,
								msgWrapper,
								$author$project$PaneLayoutManager$ThirdPersonViewMessage(pane.paneId)));
					} else {
						return $mdgriffith$elm_ui$Element$none;
					}
				case 'ViewPlan':
					var _v5 = _Utils_Tuple2(pane.planContext, mTrack);
					if ((_v5.a.$ === 'Just') && (_v5.b.$ === 'Just')) {
						var context = _v5.a.a;
						var track = _v5.b.a;
						return A5(
							$author$project$ViewPlan$view,
							context,
							_Utils_Tuple2(paneWidth, paneHeight),
							track,
							options.scene3d,
							A2(
								$elm$core$Basics$composeL,
								msgWrapper,
								$author$project$PaneLayoutManager$PlanViewMessage(pane.paneId)));
					} else {
						return $mdgriffith$elm_ui$Element$none;
					}
				case 'ViewProfile':
					var _v6 = _Utils_Tuple2(pane.profileContext, mTrack);
					if ((_v6.a.$ === 'Just') && (_v6.b.$ === 'Just')) {
						var context = _v6.a.a;
						var track = _v6.b.a;
						return A4(
							$author$project$ViewProfileCharts$view,
							context,
							_Utils_Tuple2(paneWidth, paneHeight),
							track,
							A2(
								$elm$core$Basics$composeL,
								msgWrapper,
								$author$project$PaneLayoutManager$ProfileViewMessage(pane.paneId)));
					} else {
						return $mdgriffith$elm_ui$Element$none;
					}
				default:
					return $mdgriffith$elm_ui$Element$none;
			}
		};
		var viewPaneNoMap = function (pane) {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$centerX
					]),
				_List_fromArray(
					[
						A2($author$project$PaneLayoutManager$viewModeChoicesNoMap, msgWrapper, pane),
						showNonMapViews(pane)
					]));
		};
		var viewPaneZeroWithMap = function (pane) {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX
					]),
				_List_fromArray(
					[
						A2($author$project$PaneLayoutManager$viewModeChoices, msgWrapper, pane),
						A2(
						$author$project$ViewPureStyles$conditionallyVisible,
						!_Utils_eq(pane.activeView, $author$project$PaneLayoutManager$ViewMap),
						showNonMapViews(pane)),
						A2(
						$author$project$ViewPureStyles$conditionallyVisible,
						_Utils_eq(pane.activeView, $author$project$PaneLayoutManager$ViewMap),
						A3(
							$author$project$ViewMap$view,
							_Utils_Tuple2(paneWidth, paneHeight),
							pane.mapContext,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$PaneLayoutManager$MapViewMessage)))
					]));
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$wrappedRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					function () {
						var _v2 = options.paneLayout;
						switch (_v2.$) {
							case 'PanesOne':
								return _List_fromArray(
									[
										viewPaneZeroWithMap(options.pane1),
										slider
									]);
							case 'PanesLeftRight':
								return _List_fromArray(
									[
										viewPaneZeroWithMap(options.pane1),
										viewPaneNoMap(options.pane2),
										slider
									]);
							case 'PanesUpperLower':
								return _List_fromArray(
									[
										viewPaneZeroWithMap(options.pane1),
										viewPaneNoMap(options.pane2),
										slider
									]);
							case 'PanesGrid':
								return _List_fromArray(
									[
										viewPaneZeroWithMap(options.pane1),
										viewPaneNoMap(options.pane2),
										viewPaneNoMap(options.pane3),
										viewPaneNoMap(options.pane4),
										slider
									]);
							default:
								return _List_fromArray(
									[
										viewPaneZeroWithMap(options.pane1),
										slider
									]);
						}
					}())
				]));
	});
var $author$project$Main$viewPaneArea = function (model) {
	return A3(
		$mdgriffith$elm_ui$Element$layoutWith,
		{
			options: _List_fromArray(
				[$mdgriffith$elm_ui$Element$noStaticStyleSheet])
		},
		$author$project$ViewPureStyles$commonLayoutStyles,
		A4($author$project$PaneLayoutManager$viewPanes, $author$project$Main$PaneMsg, model.track, model.contentArea, model.paneLayoutOptions));
};
var $author$project$Main$centralAreaView = function (model) {
	return A4(
		$author$project$SplitPane$SplitPane$view,
		$author$project$Main$bottomDockConfig,
		$author$project$Main$viewPaneArea(model),
		$author$project$Main$bottomDockView(model),
		model.bottomDockTopEdge);
};
var $author$project$Main$leftDockConfig = $author$project$SplitPane$SplitPane$createViewConfig(
	{customSplitter: $elm$core$Maybe$Nothing, toMsg: $author$project$Main$SplitLeftDockRightEdge});
var $author$project$Main$leftDockInternalConfig = $author$project$SplitPane$SplitPane$createViewConfig(
	{customSplitter: $elm$core$Maybe$Nothing, toMsg: $author$project$Main$SplitLeftDockInternal});
var $author$project$Main$lowerLeftDockView = function (model) {
	return A3(
		$mdgriffith$elm_ui$Element$layoutWith,
		{
			options: _List_fromArray(
				[$mdgriffith$elm_ui$Element$noStaticStyleSheet])
		},
		$author$project$ViewPureStyles$commonLayoutStyles,
		A4($author$project$ToolsController$toolsForDock, $author$project$ToolsController$DockLowerLeft, $author$project$Main$ToolsMsg, model.track, model.toolOptions));
};
var $author$project$Main$upperLeftDockView = function (model) {
	return A3(
		$mdgriffith$elm_ui$Element$layoutWith,
		{
			options: _List_fromArray(
				[$mdgriffith$elm_ui$Element$noStaticStyleSheet])
		},
		$author$project$ViewPureStyles$commonLayoutStyles,
		A4($author$project$ToolsController$toolsForDock, $author$project$ToolsController$DockUpperLeft, $author$project$Main$ToolsMsg, model.track, model.toolOptions));
};
var $author$project$Main$leftDockView = function (model) {
	return A4(
		$author$project$SplitPane$SplitPane$view,
		$author$project$Main$leftDockInternalConfig,
		$author$project$Main$upperLeftDockView(model),
		$author$project$Main$lowerLeftDockView(model),
		model.leftDockInternal);
};
var $author$project$Main$notTheRightDockView = function (model) {
	return A4(
		$author$project$SplitPane$SplitPane$view,
		$author$project$Main$leftDockConfig,
		$author$project$Main$leftDockView(model),
		$author$project$Main$centralAreaView(model),
		model.leftDockRightEdge);
};
var $author$project$Main$rightDockConfig = $author$project$SplitPane$SplitPane$createViewConfig(
	{customSplitter: $elm$core$Maybe$Nothing, toMsg: $author$project$Main$SplitRightDockLeftEdge});
var $author$project$Main$lowerRightDockView = function (model) {
	return A3(
		$mdgriffith$elm_ui$Element$layoutWith,
		{
			options: _List_fromArray(
				[$mdgriffith$elm_ui$Element$noStaticStyleSheet])
		},
		$author$project$ViewPureStyles$commonLayoutStyles,
		A4($author$project$ToolsController$toolsForDock, $author$project$ToolsController$DockLowerRight, $author$project$Main$ToolsMsg, model.track, model.toolOptions));
};
var $author$project$Main$rightDockInternalConfig = $author$project$SplitPane$SplitPane$createViewConfig(
	{customSplitter: $elm$core$Maybe$Nothing, toMsg: $author$project$Main$SplitRightDockInternal});
var $author$project$Main$upperRightDockView = function (model) {
	return A3(
		$mdgriffith$elm_ui$Element$layoutWith,
		{
			options: _List_fromArray(
				[$mdgriffith$elm_ui$Element$noStaticStyleSheet])
		},
		$author$project$ViewPureStyles$commonLayoutStyles,
		A4($author$project$ToolsController$toolsForDock, $author$project$ToolsController$DockUpperRight, $author$project$Main$ToolsMsg, model.track, model.toolOptions));
};
var $author$project$Main$rightDockView = function (model) {
	return A4(
		$author$project$SplitPane$SplitPane$view,
		$author$project$Main$rightDockInternalConfig,
		$author$project$Main$upperRightDockView(model),
		$author$project$Main$lowerRightDockView(model),
		model.rightDockInternal);
};
var $elm_explorations$markdown$Markdown$defaultOptions = {
	defaultHighlighting: $elm$core$Maybe$Nothing,
	githubFlavored: $elm$core$Maybe$Just(
		{breaks: false, tables: false}),
	sanitize: true,
	smartypants: false
};
var $elm_explorations$markdown$Markdown$toHtmlWith = _Markdown_toHtml;
var $elm_explorations$markdown$Markdown$toHtml = $elm_explorations$markdown$Markdown$toHtmlWith($elm_explorations$markdown$Markdown$defaultOptions);
var $author$project$ViewPureStyles$showModalMessage = F3(
	function (areaWidth, content, msg) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(areaWidth)),
					$mdgriffith$elm_ui$Element$Border$width(6),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$quinceJelly),
					$mdgriffith$elm_ui$Element$Border$rounded(8)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(8),
							$mdgriffith$elm_ui$Element$padding(4),
							$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$quinceJelly),
							$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Message')
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(20),
							$mdgriffith$elm_ui$Element$padding(20)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$html(
									A2($elm_explorations$markdown$Markdown$toHtml, _List_Nil, content))
								])),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$ViewPureStyles$neatToolsBorder,
							{
								label: $mdgriffith$elm_ui$Element$text('Dismiss'),
								onPress: $elm$core$Maybe$Just(msg)
							})
						]))
				]));
	});
var $author$project$Main$FilenameChange = function (a) {
	return {$: 'FilenameChange', a: a};
};
var $author$project$Main$GpxRequested = {$: 'GpxRequested'};
var $author$project$Main$OneClickMsg = function (a) {
	return {$: 'OneClickMsg', a: a};
};
var $author$project$Main$WriteGpxFile = {$: 'WriteGpxFile'};
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var src = _v0.src;
		var description = _v0.description;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 'Width':
						return true;
					case 'Height':
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.imageContainer),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Main$buyMeACoffeeButton = A2(
	$mdgriffith$elm_ui$Element$newTabLink,
	_List_fromArray(
		[$mdgriffith$elm_ui$Element$alignRight]),
	{
		label: A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(30)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(130))
				]),
			{description: 'Buy Me A Coffee', src: 'https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png'}),
		url: 'https://www.buymeacoffee.com/Peterward'
	});
var $author$project$Main$NoOp = {$: 'NoOp'};
var $author$project$Main$ToggleToolPopup = {$: 'ToggleToolPopup'};
var $author$project$Main$BackgroundColour = function (a) {
	return {$: 'BackgroundColour', a: a};
};
var $author$project$Main$RestoreDefaultToolLayout = {$: 'RestoreDefaultToolLayout'};
var $author$project$ToolsController$ToggleImperial = {$: 'ToggleImperial'};
var $author$project$ToolsController$imperialToggleMenuEntry = F2(
	function (msgWrapper, options) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$alignRight]),
			{
				label: options.imperial ? $mdgriffith$elm_ui$Element$text('Use metric measures') : $mdgriffith$elm_ui$Element$text('Use imperial measures'),
				onPress: $elm$core$Maybe$Just(
					msgWrapper($author$project$ToolsController$ToggleImperial))
			});
	});
var $author$project$Main$showOptionsMenu = function (model) {
	var colourBlock = function (colour) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(colour),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(20))
				]),
			{
				label: $mdgriffith$elm_ui$Element$none,
				onPress: $elm$core$Maybe$Just(
					$author$project$Main$BackgroundColour(colour))
			});
	};
	return model.isPopupOpen ? A2(
		$mdgriffith$elm_ui$Element$column,
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$spacing(4),
			$author$project$ViewPureStyles$neatToolsBorder),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$alignRight,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$author$project$ViewPureStyles$neatToolsBorder)),
				_List_fromArray(
					[
						colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$silver),
						colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$asbestos),
						colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$wetAsphalt)
					])),
				A2(
				$mdgriffith$elm_ui$Element$el,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$alignRight,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$author$project$ViewPureStyles$neatToolsBorder)),
				A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					{
						label: $mdgriffith$elm_ui$Element$text('Restore default layout'),
						onPress: $elm$core$Maybe$Just($author$project$Main$RestoreDefaultToolLayout)
					})),
				A2(
				$mdgriffith$elm_ui$Element$el,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$alignRight,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$author$project$ViewPureStyles$neatToolsBorder)),
				A2($author$project$ToolsController$imperialToggleMenuEntry, $author$project$Main$ToolsMsg, model.toolOptions))
			])) : $mdgriffith$elm_ui$Element$none;
};
var $author$project$Main$globalOptions = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignRight,
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$moveDown(26),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A3(
								$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
								'click',
								$author$project$ViewThirdPerson$stopProp,
								$elm$core$Basics$always($author$project$Main$NoOp))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A3(
								$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
								'dblclick',
								$author$project$ViewThirdPerson$stopProp,
								$elm$core$Basics$always($author$project$Main$NoOp))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A3(
								$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
								'mousedown',
								$author$project$ViewThirdPerson$stopProp,
								$elm$core$Basics$always($author$project$Main$NoOp))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A3(
								$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
								'mouseup',
								$author$project$ViewThirdPerson$stopProp,
								$elm$core$Basics$always($author$project$Main$NoOp))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'z-index', '20')),
							$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze)
						]),
					_List_fromArray(
						[
							$author$project$Main$showOptionsMenu(model)
						])))
			]),
		A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$carrot)
				]),
			{
				label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$settings),
				onPress: $elm$core$Maybe$Just($author$project$Main$ToggleToolPopup)
			}));
};
var $smucode$elm_flat_colors$FlatColors$AussiePalette$juneBud = A3($mdgriffith$elm_ui$Element$rgb255, 186, 220, 88);
var $author$project$Tools$OneClickQuickFix$Apply = {$: 'Apply'};
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$bayWharf = A3($mdgriffith$elm_ui$Element$rgb255, 116, 125, 140);
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$frenchSkyBlue = A3($mdgriffith$elm_ui$Element$rgb255, 112, 161, 255);
var $author$project$ViewPureStyles$prettyButtonStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Border$width(2),
		$mdgriffith$elm_ui$Element$Border$rounded(4),
		$mdgriffith$elm_ui$Element$padding(2),
		$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$bayWharf),
		$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$frenchSkyBlue),
		$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
		$mdgriffith$elm_ui$Element$Font$size(16)
	]);
var $author$project$Tools$OneClickQuickFix$oneClickQuickFixButton = F2(
	function (wrapper, track) {
		if (track.$ === 'Just') {
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(30)),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, $author$project$ViewPureStyles$prettyButtonStyles)),
				{
					label: $mdgriffith$elm_ui$Element$text('One-click Quick-fix!'),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$OneClickQuickFix$Apply))
				});
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$PaneLayoutManager$TogglePopup = {$: 'TogglePopup'};
var $author$project$PaneLayoutManager$PaneNoOp = {$: 'PaneNoOp'};
var $author$project$PaneLayoutManager$SetPaneLayout = function (a) {
	return {$: 'SetPaneLayout', a: a};
};
var $feathericons$elm_feather$FeatherIcons$columns = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'columns',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M12 3h7a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-7m0-18H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7m0-18v18')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$grid = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'grid',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('3'),
					$elm$svg$Svg$Attributes$y('3'),
					$elm$svg$Svg$Attributes$width('7'),
					$elm$svg$Svg$Attributes$height('7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('14'),
					$elm$svg$Svg$Attributes$y('3'),
					$elm$svg$Svg$Attributes$width('7'),
					$elm$svg$Svg$Attributes$height('7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('14'),
					$elm$svg$Svg$Attributes$y('14'),
					$elm$svg$Svg$Attributes$width('7'),
					$elm$svg$Svg$Attributes$height('7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('3'),
					$elm$svg$Svg$Attributes$y('14'),
					$elm$svg$Svg$Attributes$width('7'),
					$elm$svg$Svg$Attributes$height('7')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$server = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'server',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('2'),
					$elm$svg$Svg$Attributes$y('2'),
					$elm$svg$Svg$Attributes$width('20'),
					$elm$svg$Svg$Attributes$height('8'),
					$elm$svg$Svg$Attributes$rx('2'),
					$elm$svg$Svg$Attributes$ry('2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('2'),
					$elm$svg$Svg$Attributes$y('14'),
					$elm$svg$Svg$Attributes$width('20'),
					$elm$svg$Svg$Attributes$height('8'),
					$elm$svg$Svg$Attributes$rx('2'),
					$elm$svg$Svg$Attributes$ry('2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('6'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('6.01'),
					$elm$svg$Svg$Attributes$y2('6')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('6'),
					$elm$svg$Svg$Attributes$y1('18'),
					$elm$svg$Svg$Attributes$x2('6.01'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$square = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'square',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('3'),
					$elm$svg$Svg$Attributes$y('3'),
					$elm$svg$Svg$Attributes$width('18'),
					$elm$svg$Svg$Attributes$height('18'),
					$elm$svg$Svg$Attributes$rx('2'),
					$elm$svg$Svg$Attributes$ry('2')
				]),
			_List_Nil)
		]));
var $author$project$PaneLayoutManager$optionList = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Element$Input$option,
		$author$project$PaneLayoutManager$PanesOne,
		A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(20)
				]),
			_List_fromArray(
				[
					$author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$square),
					$mdgriffith$elm_ui$Element$text('Just the one')
				]))),
		A2(
		$mdgriffith$elm_ui$Element$Input$option,
		$author$project$PaneLayoutManager$PanesLeftRight,
		A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(20)
				]),
			_List_fromArray(
				[
					$author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$columns),
					$mdgriffith$elm_ui$Element$text('Cupboards')
				]))),
		A2(
		$mdgriffith$elm_ui$Element$Input$option,
		$author$project$PaneLayoutManager$PanesUpperLower,
		A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(20)
				]),
			_List_fromArray(
				[
					$author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$server),
					$mdgriffith$elm_ui$Element$text('Drawers')
				]))),
		A2(
		$mdgriffith$elm_ui$Element$Input$option,
		$author$project$PaneLayoutManager$PanesGrid,
		A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(20)
				]),
			_List_fromArray(
				[
					$author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$grid),
					$mdgriffith$elm_ui$Element$text('Grid of four')
				])))
	]);
var $author$project$PaneLayoutManager$showOptionsMenu = F2(
	function (msgWrapper, options) {
		return options.popupVisible ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveDown(30),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'click',
						$author$project$ViewThirdPerson$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$PaneLayoutManager$PaneNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'dblclick',
						$author$project$ViewThirdPerson$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$PaneLayoutManager$PaneNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mousedown',
						$author$project$ViewThirdPerson$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$PaneLayoutManager$PaneNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mouseup',
						$author$project$ViewThirdPerson$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$PaneLayoutManager$PaneNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '20'))
				]),
			A2(
				$mdgriffith$elm_ui$Element$Input$radio,
				_Utils_ap(
					$author$project$ViewPureStyles$neatToolsBorder,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(10),
							$mdgriffith$elm_ui$Element$spacing(10)
						])),
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden('Choose layout'),
					onChange: A2($elm$core$Basics$composeL, msgWrapper, $author$project$PaneLayoutManager$SetPaneLayout),
					options: $author$project$PaneLayoutManager$optionList,
					selected: $elm$core$Maybe$Just(options.paneLayout)
				})) : $mdgriffith$elm_ui$Element$none;
	});
var $author$project$PaneLayoutManager$paneLayoutMenu = F2(
	function (msgWrapper, options) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$PaneLayoutManager$showOptionsMenu, msgWrapper, options))
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Choose layout'),
				onPress: $elm$core$Maybe$Just(
					msgWrapper($author$project$PaneLayoutManager$TogglePopup))
			});
	});
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 'TextInputNode', a: a};
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 'TextArea'};
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 'Nothing') {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clip);
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 'Height') {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return true;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (label.$ === 'Label') {
		var loc = label.a;
		switch (loc.$) {
			case 'OnRight':
				return false;
			case 'OnLeft':
				return false;
			case 'Above':
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {bottom: -box.bottom, left: -box.left, right: -box.right, top: -box.top};
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 'Fill':
				return true;
			case 'Content':
				return false;
			case 'Px':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 'Nearby':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			case 'Width':
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						input: A2($elm$core$List$cons, attr, els.input),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : (stacked ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}));
			case 'Height':
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					})));
			case 'AlignX':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'AlignY':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'StyleClass':
				switch (attr.b.$) {
					case 'SpacingStyle':
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent),
								input: A2($elm$core$List$cons, attr, els.input),
								parent: A2($elm$core$List$cons, attr, els.parent),
								wrapper: A2($elm$core$List$cons, attr, els.wrapper)
							});
					case 'PaddingStyle':
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									parent: A2($elm$core$List$cons, attr, els.parent)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									input: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.input)),
									parent: A2($elm$core$List$cons, reducedVerticalPadding, els.parent)
								});
						}
					case 'BorderWidth':
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'Transform':
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'FontSize':
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					case 'FontFamily':
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
				}
			case 'NoAttribute':
				return els;
			case 'Attr':
				var a = attr.a;
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Describe':
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Class':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			default:
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				cover: $elm$core$List$reverse(redist.cover),
				fullParent: $elm$core$List$reverse(redist.fullParent),
				input: $elm$core$List$reverse(redist.input),
				parent: $elm$core$List$reverse(redist.parent),
				wrapper: $elm$core$List$reverse(redist.wrapper)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{cover: _List_Nil, fullParent: _List_Nil, input: _List_Nil, parent: _List_Nil, wrapper: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY);
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.type_, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.label),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.type_;
			if (_v7.$ === 'TextInputNode') {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						bottom: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						left: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						right: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						top: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{bottom: 0, left: 0, right: 0, top: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.type_;
				if (_v3.$ === 'TextInputNode') {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.type_;
					if (_v4.$ === 'TextInputNode') {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputText)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.text),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.onChange)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.label),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.spellchecked),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.autofill))
						]),
					redistributed.input)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.type_;
			if (_v0.$ === 'TextArea') {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper)
								])),
						redistributed.parent),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
												redistributed.wrapper)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.text === '') {
											var _v1 = textOptions.placeholder;
											if (_v1.$ === 'Nothing') {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.text === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.text + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.parent,
										function () {
										var _v2 = textOptions.placeholder;
										if (_v2.$ === 'Nothing') {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.cover, textOptions.text === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.fullParent))),
			textOptions.label,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Nothing,
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$twinkleBlue = A3($mdgriffith$elm_ui$Element$rgb255, 206, 214, 224);
var $author$project$Main$topLoadingBar = function (model) {
	var saveButton = A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$padding(5),
				$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$juneBud),
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
				$mdgriffith$elm_ui$Element$Border$width(2)
			]),
		{
			label: $mdgriffith$elm_ui$Element$text('Save GPX file'),
			onPress: $elm$core$Maybe$Just($author$project$Main$WriteGpxFile)
		});
	var loadGpxButton = A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$padding(5),
				$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
				$mdgriffith$elm_ui$Element$Border$width(2)
			]),
		{
			label: $mdgriffith$elm_ui$Element$text('Load GPX file'),
			onPress: $elm$core$Maybe$Just($author$project$Main$GpxRequested)
		});
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_Utils_ap(
			$author$project$ViewPureStyles$commonLayoutStyles,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(20),
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 1, left: 0, right: 0, top: 0}),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$twinkleBlue)
				])),
		_List_fromArray(
			[
				loadGpxButton,
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(
						$author$project$ViewPureStyles$contrastingColour(model.backgroundColour))
					]),
				$mdgriffith$elm_ui$Element$text(
					$author$project$Main$bestTrackName(model))),
				function () {
				var _v0 = model.filename;
				if (_v0.$ === 'Just') {
					var filename = _v0.a;
					return A2(
						$mdgriffith$elm_ui$Element$Input$text,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(5)
							]),
						{
							label: $mdgriffith$elm_ui$Element$Input$labelHidden('filename'),
							onChange: $author$project$Main$FilenameChange,
							placeholder: $elm$core$Maybe$Nothing,
							text: filename
						});
				} else {
					return $mdgriffith$elm_ui$Element$none;
				}
			}(),
				saveButton,
				A2($author$project$Tools$OneClickQuickFix$oneClickQuickFixButton, $author$project$Main$OneClickMsg, model.track),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignRight]),
				A2($author$project$PaneLayoutManager$paneLayoutMenu, $author$project$Main$PaneMsg, model.paneLayoutOptions)),
				$author$project$Main$buyMeACoffeeButton,
				$author$project$Main$globalOptions(model)
			]));
};
var $author$project$Main$view = function (model) {
	return {
		body: _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$layout,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Background$color(model.backgroundColour),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$inFront(
							function () {
								var _v0 = model.modalMessage;
								if (_v0.$ === 'Just') {
									var message = _v0.a;
									return A3(
										$author$project$ViewPureStyles$showModalMessage,
										$ianmackenzie$elm_units$Pixels$inPixels(model.contentArea.a),
										message,
										$author$project$Main$DismissModalMessage);
								} else {
									return $mdgriffith$elm_ui$Element$none;
								}
							}()),
						$author$project$ViewPureStyles$commonLayoutStyles)),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							$author$project$Main$topLoadingBar(model),
							$mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										A2($elm$html$Html$Attributes$style, 'width', '100%'),
										A2($elm$html$Html$Attributes$style, 'height', '100%')
									]),
								_List_fromArray(
									[
										A4(
										$author$project$SplitPane$SplitPane$view,
										$author$project$Main$rightDockConfig,
										$author$project$Main$notTheRightDockView(model),
										$author$project$Main$rightDockView(model),
										model.rightDockLeftEdge)
									])))
						])))
			]),
		title: $author$project$Main$composeTitle(model)
	};
};
var $author$project$Main$main = $elm$browser$Browser$application(
	{
		init: A2(
			$elm$core$Basics$composeR,
			$elm$core$Maybe$map($author$project$StravaAuth$convertBytes),
			$author$project$Main$init),
		onUrlChange: $elm$core$Basics$always(
			$author$project$Main$OAuthMessage($author$project$OAuthTypes$NoOp)),
		onUrlRequest: $elm$core$Basics$always(
			$author$project$Main$OAuthMessage($author$project$OAuthTypes$NoOp)),
		subscriptions: $author$project$Main$subscriptions,
		update: $author$project$Main$update,
		view: $author$project$Main$view
	});
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2(
				$elm$json$Json$Decode$map,
				$elm$core$Maybe$Just,
				$elm$json$Json$Decode$list($elm$json$Json$Decode$int))
			])))(0)}});}(this));